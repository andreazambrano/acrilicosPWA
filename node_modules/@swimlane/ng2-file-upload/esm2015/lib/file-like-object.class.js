/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} node
 * @return {?}
 */
function isElement(node) {
    return !!(node && (node.nodeName || (node.prop && node.attr && node.find)));
}
export class FileLikeObject {
    /**
     * @param {?} fileOrInput
     */
    constructor(fileOrInput) {
        this.rawFile = fileOrInput;
        /** @type {?} */
        const isInput = isElement(fileOrInput);
        /** @type {?} */
        const fakePathOrObject = isInput ? fileOrInput.value : fileOrInput;
        /** @type {?} */
        const postfix = typeof fakePathOrObject === 'string' ? 'FakePath' : 'Object';
        /** @type {?} */
        const method = '_createFrom' + postfix;
        ((/** @type {?} */ (this)))[method](fakePathOrObject);
    }
    /**
     * @param {?} path
     * @return {?}
     */
    _createFromFakePath(path) {
        this.lastModifiedDate = void 0;
        this.size = void 0;
        this.type = 'like/' + path.slice(path.lastIndexOf('.') + 1).toLowerCase();
        this.name = path.slice(path.lastIndexOf('/') + path.lastIndexOf('\\') + 2);
    }
    /**
     * @param {?} object
     * @return {?}
     */
    _createFromObject(object) {
        this.size = object.size;
        this.type = object.type;
        this.name = object.name;
    }
}
if (false) {
    /** @type {?} */
    FileLikeObject.prototype.lastModifiedDate;
    /** @type {?} */
    FileLikeObject.prototype.size;
    /** @type {?} */
    FileLikeObject.prototype.type;
    /** @type {?} */
    FileLikeObject.prototype.name;
    /** @type {?} */
    FileLikeObject.prototype.rawFile;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1saWtlLW9iamVjdC5jbGFzcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZzItZmlsZS11cGxvYWQvIiwic291cmNlcyI6WyJsaWIvZmlsZS1saWtlLW9iamVjdC5jbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLFNBQVMsU0FBUyxDQUFDLElBQVM7SUFDMUIsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDOUUsQ0FBQztBQUVELE1BQU0sT0FBTyxjQUFjOzs7O0lBT3pCLFlBQW1CLFdBQWdCO1FBQ2pDLElBQUksQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDOztjQUNyQixPQUFPLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQzs7Y0FDaEMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxXQUFXOztjQUM1RCxPQUFPLEdBQ1gsT0FBTyxnQkFBZ0IsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsUUFBUTs7Y0FDeEQsTUFBTSxHQUFHLGFBQWEsR0FBRyxPQUFPO1FBQ3RDLENBQUMsbUJBQUEsSUFBSSxFQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzFDLENBQUM7Ozs7O0lBRU0sbUJBQW1CLENBQUMsSUFBWTtRQUNyQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDMUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDOzs7OztJQUVNLGlCQUFpQixDQUFDLE1BSXhCO1FBQ0MsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDMUIsQ0FBQztDQUNGOzs7SUFoQ0MsMENBQTZCOztJQUM3Qiw4QkFBaUI7O0lBQ2pCLDhCQUFvQjs7SUFDcEIsOEJBQW9COztJQUNwQixpQ0FBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc0VsZW1lbnQobm9kZTogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiAhIShub2RlICYmIChub2RlLm5vZGVOYW1lIHx8IChub2RlLnByb3AgJiYgbm9kZS5hdHRyICYmIG5vZGUuZmluZCkpKTtcbn1cblxuZXhwb3J0IGNsYXNzIEZpbGVMaWtlT2JqZWN0IHtcbiAgcHVibGljIGxhc3RNb2RpZmllZERhdGU6IGFueTtcbiAgcHVibGljIHNpemU6IGFueTtcbiAgcHVibGljIHR5cGU6IHN0cmluZztcbiAgcHVibGljIG5hbWU6IHN0cmluZztcbiAgcHVibGljIHJhd0ZpbGU6IHN0cmluZztcblxuICBwdWJsaWMgY29uc3RydWN0b3IoZmlsZU9ySW5wdXQ6IGFueSkge1xuICAgIHRoaXMucmF3RmlsZSA9IGZpbGVPcklucHV0O1xuICAgIGNvbnN0IGlzSW5wdXQgPSBpc0VsZW1lbnQoZmlsZU9ySW5wdXQpO1xuICAgIGNvbnN0IGZha2VQYXRoT3JPYmplY3QgPSBpc0lucHV0ID8gZmlsZU9ySW5wdXQudmFsdWUgOiBmaWxlT3JJbnB1dDtcbiAgICBjb25zdCBwb3N0Zml4ID1cbiAgICAgIHR5cGVvZiBmYWtlUGF0aE9yT2JqZWN0ID09PSAnc3RyaW5nJyA/ICdGYWtlUGF0aCcgOiAnT2JqZWN0JztcbiAgICBjb25zdCBtZXRob2QgPSAnX2NyZWF0ZUZyb20nICsgcG9zdGZpeDtcbiAgICAodGhpcyBhcyBhbnkpW21ldGhvZF0oZmFrZVBhdGhPck9iamVjdCk7XG4gIH1cblxuICBwdWJsaWMgX2NyZWF0ZUZyb21GYWtlUGF0aChwYXRoOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmxhc3RNb2RpZmllZERhdGUgPSB2b2lkIDA7XG4gICAgdGhpcy5zaXplID0gdm9pZCAwO1xuICAgIHRoaXMudHlwZSA9ICdsaWtlLycgKyBwYXRoLnNsaWNlKHBhdGgubGFzdEluZGV4T2YoJy4nKSArIDEpLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5uYW1lID0gcGF0aC5zbGljZShwYXRoLmxhc3RJbmRleE9mKCcvJykgKyBwYXRoLmxhc3RJbmRleE9mKCdcXFxcJykgKyAyKTtcbiAgfVxuXG4gIHB1YmxpYyBfY3JlYXRlRnJvbU9iamVjdChvYmplY3Q6IHtcbiAgICBzaXplOiBudW1iZXI7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZztcbiAgfSk6IHZvaWQge1xuICAgIHRoaXMuc2l6ZSA9IG9iamVjdC5zaXplO1xuICAgIHRoaXMudHlwZSA9IG9iamVjdC50eXBlO1xuICAgIHRoaXMubmFtZSA9IG9iamVjdC5uYW1lO1xuICB9XG59XG4iXX0=