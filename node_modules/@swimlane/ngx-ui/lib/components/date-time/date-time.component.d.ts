import { EventEmitter, TemplateRef, OnDestroy, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import moment from 'moment-timezone';
import { DialogService } from '../dialog/dialog.service';
import { Datelike } from './date-like.type';
import { InputComponent } from '../input';
export declare class DateTimeComponent implements OnDestroy, ControlValueAccessor {
    private readonly dialogService;
    id: string;
    name: string;
    label: string;
    hint: string;
    placeholder: string;
    minDate: string | Date;
    maxDate: string | Date;
    precision: moment.unitOfTime.StartOf;
    timezone: string;
    inputFormats: any[];
    disabled: boolean;
    tabindex: number;
    autofocus: boolean;
    inputType: string;
    format: string;
    value: Date | string;
    change: EventEmitter<string | Date>;
    readonly calendarTpl: TemplateRef<ElementRef>;
    readonly input: InputComponent;
    errorMsg: string;
    dialog: any;
    dialogModel: moment.Moment;
    hour: number;
    minute: string;
    amPmVal: string;
    displayValue: string;
    modes: string[];
    private _value;
    private _format;
    private _inputType;
    private _disabled;
    private _autofocus;
    private _tabindex;
    constructor(dialogService: DialogService);
    ngOnDestroy(): void;
    writeValue(val: any): void;
    onBlur(): void;
    open(): void;
    apply(): void;
    setDialogDate(date: Datelike): void;
    minuteChanged(newVal: number): void;
    hourChanged(newVal: number): void;
    selectCurrent(): void;
    isCurrent(): boolean;
    clear(): void;
    onAmPmChange(newVal: string): void;
    getDayDisabled(date: moment.Moment): boolean;
    isTimeDisabled(mode: moment.unitOfTime.StartOf): boolean;
    inputChanged(val: string): void;
    close(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    private roundTo;
    private validate;
    private onTouchedCallback;
    private onChangeCallback;
    private getDisplayValue;
    private parseDate;
    private createMoment;
}
