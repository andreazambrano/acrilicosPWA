import { EventEmitter, QueryList, ElementRef, Renderer2, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { SelectOptionDirective } from './select-option.directive';
import { SelectInputComponent } from './select-input.component';
import { SelectDropdownOption } from './select-dropdown-option.interface';
export declare class SelectComponent implements ControlValueAccessor, OnDestroy {
    private readonly _element;
    private readonly _renderer;
    private readonly _cdr;
    id: string;
    name: string;
    label: string;
    hint: string;
    placeholder: string;
    emptyPlaceholder: string;
    filterEmptyPlaceholder: string;
    filterPlaceholder: string;
    allowAdditionsText: string;
    groupBy: string;
    selectCaret: string;
    requiredIndicator: string | boolean;
    options: SelectDropdownOption[];
    identifier: string;
    minSelections: number;
    maxSelections: number;
    autofocus: boolean;
    allowClear: boolean;
    allowAdditions: boolean;
    disableDropdown: boolean;
    closeOnSelect: boolean;
    closeOnBodyClick: boolean;
    filterable: boolean;
    required: boolean;
    filterCaseSensitive: boolean;
    tagging: boolean;
    multiple: boolean;
    disabled: boolean;
    change: EventEmitter<any[]>;
    keyup: EventEmitter<{
        event: KeyboardEvent;
        value?: string;
    }>;
    toggle: EventEmitter<boolean>;
    readonly inputComponent: SelectInputComponent;
    optionTemplates: QueryList<SelectOptionDirective>;
    readonly invalid: boolean;
    readonly requiredIndicatorView: string;
    readonly isSingleSelect: boolean;
    readonly hasSelections: boolean;
    readonly hasPlaceholder: boolean;
    value: any[];
    readonly dropdownVisible: boolean;
    toggleListener?: () => void;
    filterQuery: string;
    focusIndex: number;
    dropdownActive: boolean;
    private _optionTemplates;
    private _value;
    private _minSelections?;
    private _maxSelections?;
    private _autofocus;
    private _allowClear;
    private _allowAdditions;
    private _disableDropdown;
    private _closeOnSelect;
    private _closeOnBodyClick;
    private _filterable;
    private _required;
    private _filterCaseSensitive;
    private _tagging;
    private _multiple;
    private _disabled;
    constructor(_element: ElementRef, _renderer: Renderer2, _cdr: ChangeDetectorRef);
    ngOnDestroy(): void;
    onDropdownSelection(selection: SelectDropdownOption): void;
    onInputSelection(selections: any[]): void;
    onFocus(): void;
    onClear(): void;
    onBodyClick(event: Event): void;
    onClose(): void;
    onToggle(): void;
    toggleDropdown(state: boolean): void;
    onKeyUp({ event, value }: {
        event: KeyboardEvent;
        value?: string;
    }): void;
    writeValue(val: any[]): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    private checkInvalidValue;
    private onTouchedCallback;
    private onChangeCallback;
}
