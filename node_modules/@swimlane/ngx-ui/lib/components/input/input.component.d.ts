import { AfterViewInit, ElementRef, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor, Validator, NgModel, FormControl } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
import { InputTypes } from './input-types.enum';
export declare class InputComponent implements AfterViewInit, ControlValueAccessor, Validator {
    private readonly cdr;
    id: string;
    name: string;
    label: string;
    hint: string;
    placeholder: string;
    tabindex: number;
    min: number;
    max: number;
    minlength: number;
    maxlength: number;
    disabled: boolean;
    requiredIndicator: string | boolean;
    required: boolean;
    passwordToggleEnabled: boolean;
    passwordTextVisible: boolean;
    autoSelect: boolean;
    autofocus: boolean;
    autocomplete: boolean;
    autocorrect: boolean;
    spellcheck: boolean;
    type: InputTypes;
    change: EventEmitter<string | number>;
    blur: EventEmitter<Event>;
    focus: EventEmitter<FocusEvent>;
    keyup: EventEmitter<KeyboardEvent>;
    click: EventEmitter<Event>;
    select: EventEmitter<FocusEvent>;
    readonly inputControl: ElementRef<HTMLInputElement>;
    readonly inputModel: NgModel;
    readonly textareaControl: ElementRef<HTMLTextAreaElement>;
    value: string | number;
    readonly focusedOrDirty: any;
    readonly isTouched: boolean;
    readonly labelState: string;
    readonly underlineState: string;
    readonly requiredIndicatorView: string;
    readonly element: ElementRef<HTMLInputElement> | ElementRef<HTMLTextAreaElement>;
    focused: boolean;
    readonly type$: BehaviorSubject<InputTypes>;
    private _value;
    private _type;
    private _passwordTextVisible;
    private _disabled;
    private _required;
    private _autoSelect;
    private _autofocus;
    private _autocomplete;
    private _autocorrect;
    private _spellcheck;
    constructor(cdr: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngOnChanges(changes: any): void;
    onChange(event: Event): void;
    onKeyUp(event: KeyboardEvent): void;
    onFocus(event: FocusEvent): void;
    onBlur(event: Event): void;
    validate(c: FormControl): {
        [x: string]: any;
    };
    writeValue(val: string): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    togglePassword(): void;
    setDisabledState(isDisabled: boolean): void;
    private onTouchedCallback;
    private onChangeCallback;
    private updateInputType;
}
