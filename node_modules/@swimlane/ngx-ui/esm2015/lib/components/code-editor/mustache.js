import CodeMirror from 'codemirror';
// Adds mustache as an overlay to text/html
CodeMirror.defineMode('mustache', 
/* istanbul ignore next */ function (config, parserConfig) {
    const mustacheOverlay = {
        token(stream, _) {
            let ch;
            if (stream.match('{{')) {
                // tslint:disable-next-line:no-conditional-assignment
                while ((ch = stream.next()) != null)
                    if (ch === '}' && stream.next() === '}') {
                        stream.eat('}');
                        return 'mustache';
                    }
            }
            while (stream.next() != null && !stream.match('{{', false)) {
                continue;
            }
            return null;
        }
    };
    return CodeMirror.overlayMode(CodeMirror.getMode(config, parserConfig.backdrop || 'text/html'), mustacheOverlay);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVzdGFjaGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvY29kZS1lZGl0b3IvbXVzdGFjaGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxVQUFVLE1BQU0sWUFBWSxDQUFDO0FBRXBDLDJDQUEyQztBQUMzQyxVQUFVLENBQUMsVUFBVSxDQUNuQixVQUFVO0FBQ1YsMEJBQTBCLENBQUMsVUFBUyxNQUFXLEVBQUUsWUFBaUI7SUFDaEUsTUFBTSxlQUFlLEdBQUc7UUFDdEIsS0FBSyxDQUFDLE1BQVcsRUFBRSxDQUFNO1lBQ3ZCLElBQUksRUFBTyxDQUFDO1lBQ1osSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN0QixxREFBcUQ7Z0JBQ3JELE9BQU8sQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksSUFBSTtvQkFDakMsSUFBSSxFQUFFLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLEVBQUU7d0JBQ3ZDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQ2hCLE9BQU8sVUFBVSxDQUFDO3FCQUNuQjthQUNKO1lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUU7Z0JBQzFELFNBQVM7YUFDVjtZQUVELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztLQUNGLENBQUM7SUFDRixPQUFPLFVBQVUsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLFFBQVEsSUFBSSxXQUFXLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUNuSCxDQUFDLENBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb2RlTWlycm9yIGZyb20gJ2NvZGVtaXJyb3InO1xuXG4vLyBBZGRzIG11c3RhY2hlIGFzIGFuIG92ZXJsYXkgdG8gdGV4dC9odG1sXG5Db2RlTWlycm9yLmRlZmluZU1vZGUoXG4gICdtdXN0YWNoZScsXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uKGNvbmZpZzogYW55LCBwYXJzZXJDb25maWc6IGFueSkge1xuICAgIGNvbnN0IG11c3RhY2hlT3ZlcmxheSA9IHtcbiAgICAgIHRva2VuKHN0cmVhbTogYW55LCBfOiBhbnkpIHtcbiAgICAgICAgbGV0IGNoOiBhbnk7XG4gICAgICAgIGlmIChzdHJlYW0ubWF0Y2goJ3t7JykpIHtcbiAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uZGl0aW9uYWwtYXNzaWdubWVudFxuICAgICAgICAgIHdoaWxlICgoY2ggPSBzdHJlYW0ubmV4dCgpKSAhPSBudWxsKVxuICAgICAgICAgICAgaWYgKGNoID09PSAnfScgJiYgc3RyZWFtLm5leHQoKSA9PT0gJ30nKSB7XG4gICAgICAgICAgICAgIHN0cmVhbS5lYXQoJ30nKTtcbiAgICAgICAgICAgICAgcmV0dXJuICdtdXN0YWNoZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHN0cmVhbS5uZXh0KCkgIT0gbnVsbCAmJiAhc3RyZWFtLm1hdGNoKCd7eycsIGZhbHNlKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ29kZU1pcnJvci5vdmVybGF5TW9kZShDb2RlTWlycm9yLmdldE1vZGUoY29uZmlnLCBwYXJzZXJDb25maWcuYmFja2Ryb3AgfHwgJ3RleHQvaHRtbCcpLCBtdXN0YWNoZU92ZXJsYXkpO1xuICB9XG4pO1xuIl19