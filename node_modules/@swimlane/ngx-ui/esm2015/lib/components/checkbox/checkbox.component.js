import { __decorate, __metadata } from "tslib";
import { Component, Input, EventEmitter, Output, forwardRef, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';
const CHKBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => CheckboxComponent),
    multi: true
};
let nextId = 0;
let CheckboxComponent = class CheckboxComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.id = `checkbox-${++nextId}`;
        this.diameter = '18px';
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this._value = false;
        this._tabindex = 0;
        this._disabled = false;
        this._round = false;
        this.onTouchedCallback = () => {
            // placeholder
        };
        this.onChangeCallback = (_) => {
            // placeholder
        };
    }
    get tabindex() {
        return this._tabindex;
    }
    set tabindex(v) {
        this._tabindex = coerceNumberProperty(v);
        this.cdr.markForCheck();
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(v) {
        this._disabled = coerceBooleanProperty(v);
        this.cdr.markForCheck();
    }
    get round() {
        return this._round;
    }
    set round(v) {
        this._round = coerceBooleanProperty(v);
        this.cdr.markForCheck();
    }
    set value(value) {
        if (this._value !== value) {
            this._value = value;
            this.cdr.markForCheck();
            this.onChangeCallback(this._value);
        }
    }
    get value() {
        return this._value;
    }
    onBlur(_) {
        this.onTouchedCallback();
    }
    toggle() {
        this.value = !this.value;
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
};
CheckboxComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], CheckboxComponent.prototype, "id", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CheckboxComponent.prototype, "name", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CheckboxComponent.prototype, "diameter", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], CheckboxComponent.prototype, "tabindex", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], CheckboxComponent.prototype, "disabled", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], CheckboxComponent.prototype, "round", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], CheckboxComponent.prototype, "change", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], CheckboxComponent.prototype, "blur", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], CheckboxComponent.prototype, "focus", void 0);
CheckboxComponent = __decorate([
    Component({
        selector: 'ngx-checkbox',
        exportAs: 'ngxCheckbox',
        template: "<label class=\"ngx-checkbox--label\">\n  <input\n    type=\"checkbox\"\n    [id]=\"id + '-chk'\"\n    [(ngModel)]=\"value\"\n    [disabled]=\"disabled\"\n    [name]=\"name + '-chk'\"\n    [tabIndex]=\"tabindex\"\n    (focus)=\"focus.emit($event)\"\n    (blur)=\"blur.emit($event)\"\n    (change)=\"change.emit($event)\"\n  />\n\n  <div\n    class=\"ngx-checkbox--box\"\n    [class.checked]=\"value\"\n    [style.width]=\"diameter\"\n    [style.height]=\"diameter\"\n    [style.min-width]=\"diameter\"\n    [style.min-height]=\"diameter\"\n  ></div>\n\n  <div class=\"ngx-checkbox--content\">\n    <ng-content></ng-content>\n  </div>\n</label>\n",
        host: {
            class: 'ngx-checkbox',
            '[class.disabled]': 'disabled',
            '[class.round]': 'round',
            '(blur)': 'onBlur($event)'
        },
        providers: [CHKBOX_VALUE_ACCESSOR],
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [".ngx-checkbox{display:-webkit-box;display:flex}.ngx-checkbox.disabled *{cursor:not-allowed}.ngx-checkbox.round .ngx-checkbox--box{border-radius:100%!important}.ngx-checkbox .ngx-checkbox--label{display:-webkit-box;display:flex;cursor:pointer;margin-bottom:0}.ngx-checkbox .ngx-checkbox--label input{display:none}.ngx-checkbox .ngx-checkbox--label .ngx-checkbox--box{border-radius:2px;background-color:transparent;border:2px solid #455066;-webkit-transition:-webkit-transform .4s cubic-bezier(.45,1.8,.5,.75);transition:transform .4s cubic-bezier(.45,1.8,.5,.75);transition:transform .4s cubic-bezier(.45,1.8,.5,.75),-webkit-transform .4s cubic-bezier(.45,1.8,.5,.75);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;margin:auto 10px auto 0}.ngx-checkbox .ngx-checkbox--label .ngx-checkbox--box:after{position:absolute;top:calc(50% - 7px);left:calc(50% - 2px);width:6px;height:12px;content:'';border:solid #fff;border-width:0 2px 2px 0;-webkit-transform:rotate(0) scale(0);transform:rotate(0) scale(0);-webkit-transition:.4s cubic-bezier(.45,1.8,.5,.75);transition:.4s cubic-bezier(.45,1.8,.5,.75)}.ngx-checkbox .ngx-checkbox--label .ngx-checkbox--box.checked{background-color:#479eff;border-radius:2px;opacity:1;border:2px solid #479eff;-webkit-transform:rotate(0) scale(1);transform:rotate(0) scale(1)}.ngx-checkbox .ngx-checkbox--label .ngx-checkbox--box.checked:after{-webkit-transform:rotate(45deg) scale(1);transform:rotate(45deg) scale(1)}.ngx-checkbox .ngx-checkbox--label .ngx-checkbox--content{margin:auto 0}"]
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef])
], CheckboxComponent);
export { CheckboxComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3aW1sYW5lL25neC11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2NoZWNrYm94L2NoZWNrYm94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsWUFBWSxFQUNaLE1BQU0sRUFDTixVQUFVLEVBQ1YsaUJBQWlCLEVBQ2pCLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGlCQUFpQixFQUF3QixNQUFNLGdCQUFnQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXBGLE1BQU0scUJBQXFCLEdBQUc7SUFDNUIsT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDO0lBQ2hELEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQztBQUVGLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztBQWlCZixJQUFhLGlCQUFpQixHQUE5QixNQUFhLGlCQUFpQjtJQXFENUIsWUFBNkIsR0FBc0I7UUFBdEIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFwRDFDLE9BQUUsR0FBRyxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUM7UUFFNUIsYUFBUSxHQUFXLE1BQU0sQ0FBQztRQTZCekIsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFTLENBQUM7UUFDbkMsU0FBSSxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7UUFDdEMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7UUFjekMsV0FBTSxHQUFZLEtBQUssQ0FBQztRQUN4QixjQUFTLEdBQVcsQ0FBQyxDQUFDO1FBQ3RCLGNBQVMsR0FBWSxLQUFLLENBQUM7UUFDM0IsV0FBTSxHQUFZ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LEVBQUUsVUFBVTtZQUM5QixlQUFlLEVBQUUsT0FBTztZQUN4QixRQUFRLEVBQUUsZ0JBQWdCO1NBQzNCO1FBQ0QsU0FBUyxFQUFFLENBQUMscUJBQXFCLENBQUM7UUFDbEMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7UUFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O0tBQ2hELENBQUM7cUNBc0RrQyxpQkFBaUI7R0FyRHhDLGlCQUFpQixDQXNGN0I7U0F0RlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBPdXRwdXQsXG4gIGZvcndhcmRSZWYsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiwgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBjb2VyY2VOdW1iZXJQcm9wZXJ0eSwgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcblxuY29uc3QgQ0hLQk9YX1ZBTFVFX0FDQ0VTU09SID0ge1xuICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gQ2hlY2tib3hDb21wb25lbnQpLFxuICBtdWx0aTogdHJ1ZVxufTtcblxubGV0IG5leHRJZCA9IDA7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1jaGVja2JveCcsXG4gIGV4cG9ydEFzOiAnbmd4Q2hlY2tib3gnLFxuICB0ZW1wbGF0ZVVybDogJy4vY2hlY2tib3guY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9jaGVja2JveC5jb21wb25lbnQuc2NzcyddLFxuICBob3N0OiB7XG4gICAgY2xhc3M6ICduZ3gtY2hlY2tib3gnLFxuICAgICdbY2xhc3MuZGlzYWJsZWRdJzogJ2Rpc2FibGVkJyxcbiAgICAnW2NsYXNzLnJvdW5kXSc6ICdyb3VuZCcsXG4gICAgJyhibHVyKSc6ICdvbkJsdXIoJGV2ZW50KSdcbiAgfSxcbiAgcHJvdmlkZXJzOiBbQ0hLQk9YX1ZBTFVFX0FDQ0VTU09SXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgQ2hlY2tib3hDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIEBJbnB1dCgpIGlkID0gYGNoZWNrYm94LSR7KytuZXh0SWR9YDtcbiAgQElucHV0KCkgbmFtZT86IHN0cmluZztcbiAgQElucHV0KCkgZGlhbWV0ZXI6IHN0cmluZyA9ICcxOHB4JztcblxuICBASW5wdXQoKVxuICBnZXQgdGFiaW5kZXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhYmluZGV4O1xuICB9XG4gIHNldCB0YWJpbmRleCh2OiBudW1iZXIpIHtcbiAgICB0aGlzLl90YWJpbmRleCA9IGNvZXJjZU51bWJlclByb3BlcnR5KHYpO1xuICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgQElucHV0KClcbiAgZ2V0IGRpc2FibGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuICBzZXQgZGlzYWJsZWQodjogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHYpO1xuICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgQElucHV0KClcbiAgZ2V0IHJvdW5kKCkge1xuICAgIHJldHVybiB0aGlzLl9yb3VuZDtcbiAgfVxuICBzZXQgcm91bmQodjogYm9vbGVhbikge1xuICAgIHRoaXMuX3JvdW5kID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHYpO1xuICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgQE91dHB1dCgpIGNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8RXZlbnQ+KCk7XG4gIEBPdXRwdXQoKSBibHVyID0gbmV3IEV2ZW50RW1pdHRlcjxGb2N1c0V2ZW50PigpO1xuICBAT3V0cHV0KCkgZm9jdXMgPSBuZXcgRXZlbnRFbWl0dGVyPEZvY3VzRXZlbnQ+KCk7XG5cbiAgc2V0IHZhbHVlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgaWYgKHRoaXMuX3ZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrKHRoaXMuX3ZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBnZXQgdmFsdWUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSBfdmFsdWU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfdGFiaW5kZXg6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgX2Rpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX3JvdW5kOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIG9uQmx1cihfOiBhbnkpIHtcbiAgICB0aGlzLm9uVG91Y2hlZENhbGxiYWNrKCk7XG4gIH1cblxuICB0b2dnbGUoKSB7XG4gICAgdGhpcy52YWx1ZSA9ICF0aGlzLnZhbHVlO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSkge1xuICAgIHRoaXMub25DaGFuZ2VDYWxsYmFjayA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSkge1xuICAgIHRoaXMub25Ub3VjaGVkQ2FsbGJhY2sgPSBmbjtcbiAgfVxuXG4gIHNldERpc2FibGVkU3RhdGUoZGlzYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gIH1cblxuICBwcml2YXRlIG9uVG91Y2hlZENhbGxiYWNrID0gKCkgPT4ge1xuICAgIC8vIHBsYWNlaG9sZGVyXG4gIH07XG5cbiAgcHJpdmF0ZSBvbkNoYW5nZUNhbGxiYWNrID0gKF86IGFueSkgPT4ge1xuICAgIC8vIHBsYWNlaG9sZGVyXG4gIH07XG59XG4iXX0=