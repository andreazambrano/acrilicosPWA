import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { InjectionService } from '../../services/injection/injection.service';
import { LoadingComponent } from './loading.component';
let LoadingService = class LoadingService {
    constructor(injectionService) {
        this.injectionService = injectionService;
        this.threshold = 250;
        this._count = 0;
        this._progress = 0;
    }
    set progress(val) {
        if (this.instance) {
            this.instance.progress = val;
        }
        this._progress = val;
    }
    get progress() {
        return this._progress;
    }
    get count() {
        return this._count;
    }
    get instance() {
        if (this.component)
            return this.component.instance;
    }
    start(autoIncrement = true) {
        this.create();
        this._count++;
        if (autoIncrement) {
            clearTimeout(this.timeout);
            const fn = () => {
                this.increment();
                if (this.progress < 100) {
                    this.timeout = setTimeout(fn.bind(this), this.threshold);
                }
                else {
                    this.complete();
                }
            };
            this.timeout = setTimeout(fn.bind(this), this.threshold);
        }
    }
    stop() {
        this._count--;
        clearTimeout(this.timeout);
    }
    reset(num = 0) {
        this.progress = num;
    }
    complete(all = false) {
        this._count--;
        if (this.count <= 0 || all) {
            this.progress = 100;
            this._count = 0;
            setTimeout(() => {
                this.hide();
                this.progress = 0;
            }, this.threshold * 2);
        }
    }
    hide() {
        this.stop();
        if (this.instance) {
            this.instance.visible = false;
        }
    }
    create() {
        if (!this.component) {
            this.component = this.injectionService.appendComponent(LoadingComponent);
        }
        this.instance.visible = true;
        this.instance.progress = this.progress;
        return this.component;
    }
    increment() {
        if (this.progress >= 100)
            return;
        // inspired by angular-loading-bar
        // https://github.com/chieffancypants/angular-loading-bar
        const stat = this.progress / 100;
        let rnd = 0;
        if (stat >= 0 && stat < 0.25) {
            // Start out between 3 - 6% increments
            rnd = (Math.random() * (5 - 3 + 1) + 3) / 100;
        }
        else if (stat >= 0.25 && stat < 0.65) {
            // increment between 0 - 3%
            rnd = (Math.random() * 3) / 100;
        }
        else if (stat >= 0.65 && stat < 0.9) {
            // increment between 0 - 2%
            rnd = (Math.random() * 2) / 100;
        }
        else {
            // finally, increment it .5 %
            // after 99%, don't increment:
            rnd = 0.005;
        }
        this.progress = (stat + rnd) * 100;
    }
};
LoadingService.ctorParameters = () => [
    { type: InjectionService }
];
LoadingService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [InjectionService])
], LoadingService);
export { LoadingService };
//# sourceMappingURL=data:application/json;base64,