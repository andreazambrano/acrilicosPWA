import { __decorate, __metadata } from "tslib";
import { Injectable, EventEmitter } from '@angular/core';
import { InjectionService } from '../../services/injection/injection.service';
import { OverlayComponent } from './overlay.component';
let OverlayService = class OverlayService {
    constructor(injectionService) {
        this.injectionService = injectionService;
        // list of components that will close by clicking the overlay
        this.triggerComponents = [];
        this.click = new EventEmitter();
    }
    get instance() {
        if (this.component)
            return this.component.instance;
    }
    show(options = {}) {
        if (!options.triggerComponent) {
            throw new Error('ngx-ui OverlayService.show: triggerComponent missing ');
        }
        if (!this.component) {
            this.component = this.injectComponent();
            this.instance.click.subscribe(this.onClick.bind(this));
        }
        this.triggerComponents.push({
            component: options.triggerComponent,
            zIndex: options.zIndex
        });
        this.component.instance.visible = true;
        this.updateZIndex();
        return this.component;
    }
    hide() {
        if (this.triggerComponents.length === 0) {
            this.component.instance.visible = false;
        }
    }
    destroy() {
        if (this.component) {
            // destroy is called like this to trigger
            // proper lifecycle events like animations
            this.hide();
            setTimeout(() => {
                // <--- new dialog is being created during this timeout.
                if (this.component && this.triggerComponents.length === 0) {
                    this.component.destroy();
                    this.component = undefined;
                }
            }, 100);
        }
    }
    injectComponent() {
        return this.injectionService.appendComponent(OverlayComponent);
    }
    onClick() {
        if (this.triggerComponents.length > 0) {
            const lastIdx = this.triggerComponents.length - 1;
            const triggerComponent = this.triggerComponents[lastIdx];
            this.click.emit(triggerComponent.component);
        }
    }
    removeTriggerComponent(component) {
        const idx = this.triggerComponents.findIndex(c => c.component === component);
        if (idx !== -1) {
            this.triggerComponents.splice(idx, 1);
        }
        this.updateZIndex();
        if (this.triggerComponents.length === 0) {
            this.destroy();
        }
    }
    updateZIndex() {
        if (this.triggerComponents.length === 0) {
            return;
        }
        const indexes = this.triggerComponents.map(tc => tc.zIndex);
        const zIndex = Math.max(...indexes) - 1;
        this.instance.zIndex = zIndex;
    }
};
OverlayService.ctorParameters = () => [
    { type: InjectionService }
];
OverlayService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [InjectionService])
], OverlayService);
export { OverlayService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3aW1sYW5lL25neC11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL292ZXJsYXkvb3ZlcmxheS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFnQixZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDOUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHdkQsSUFBYSxjQUFjLEdBQTNCLE1BQWEsY0FBYztJQVd6QixZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQVJ0RCw2REFBNkQ7UUFDN0Qsc0JBQWlCLEdBQVUsRUFBRSxDQUFDO1FBQzlCLFVBQUssR0FBUSxJQUFJLFlBQVksRUFBRSxDQUFDO0lBTXlCLENBQUM7SUFKMUQsSUFBSSxRQUFRO1FBQ1YsSUFBSSxJQUFJLENBQUMsU0FBUztZQUFFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7SUFDckQsQ0FBQztJQUlELElBQUksQ0FBQyxVQUFlLEVBQUU7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtZQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLHVEQUF1RCxDQUFDLENBQUM7U0FDMUU7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUN4QyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUN4RDtRQUVELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7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bnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgQ29tcG9uZW50UmVmLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSW5qZWN0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2luamVjdGlvbi9pbmplY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBPdmVybGF5Q29tcG9uZW50IH0gZnJvbSAnLi9vdmVybGF5LmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPdmVybGF5U2VydmljZSB7XG4gIGNvbXBvbmVudDogQ29tcG9uZW50UmVmPE92ZXJsYXlDb21wb25lbnQ+O1xuXG4gIC8vIGxpc3Qgb2YgY29tcG9uZW50cyB0aGF0IHdpbGwgY2xvc2UgYnkgY2xpY2tpbmcgdGhlIG92ZXJsYXlcbiAgdHJpZ2dlckNvbXBvbmVudHM6IGFueVtdID0gW107XG4gIGNsaWNrOiBhbnkgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgZ2V0IGluc3RhbmNlKCkge1xuICAgIGlmICh0aGlzLmNvbXBvbmVudCkgcmV0dXJuIHRoaXMuY29tcG9uZW50Lmluc3RhbmNlO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3Rpb25TZXJ2aWNlOiBJbmplY3Rpb25TZXJ2aWNlKSB7fVxuXG4gIHNob3cob3B0aW9uczogYW55ID0ge30pIHtcbiAgICBpZiAoIW9wdGlvbnMudHJpZ2dlckNvbXBvbmVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCduZ3gtdWkgT3ZlcmxheVNlcnZpY2Uuc2hvdzogdHJpZ2dlckNvbXBvbmVudCBtaXNzaW5nICcpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuY29tcG9uZW50KSB7XG4gICAgICB0aGlzLmNvbXBvbmVudCA9IHRoaXMuaW5qZWN0Q29tcG9uZW50KCk7XG4gICAgICB0aGlzLmluc3RhbmNlLmNsaWNrLnN1YnNjcmliZSh0aGlzLm9uQ2xpY2suYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyQ29tcG9uZW50cy5wdXNoKHtcbiAgICAgIGNvbXBvbmVudDogb3B0aW9ucy50cmlnZ2VyQ29tcG9uZW50LFxuICAgICAgekluZGV4OiBvcHRpb25zLnpJbmRleFxuICAgIH0pO1xuXG4gICAgdGhpcy5jb21wb25lbnQuaW5zdGFuY2UudmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy51cGRhdGVaSW5kZXgoKTtcblxuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudDtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKHRoaXMudHJpZ2dlckNvbXBvbmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudC5pbnN0YW5jZS52aXNpYmxlID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5jb21wb25lbnQpIHtcbiAgICAgIC8vIGRlc3Ryb3kgaXMgY2FsbGVkIGxpa2UgdGhpcyB0byB0cmlnZ2VyXG4gICAgICAvLyBwcm9wZXIgbGlmZWN5Y2xlIGV2ZW50cyBsaWtlIGFuaW1hdGlvbnNcbiAgICAgIHRoaXMuaGlkZSgpO1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgLy8gPC0tLSBuZXcgZGlhbG9nIGlzIGJlaW5nIGNyZWF0ZWQgZHVyaW5nIHRoaXMgdGltZW91dC5cbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50ICYmIHRoaXMudHJpZ2dlckNvbXBvbmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5jb21wb25lbnQuZGVzdHJveSgpO1xuICAgICAgICAgIHRoaXMuY29tcG9uZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9LCAxMDApO1xuICAgIH1cbiAgfVxuXG4gIGluamVjdENvbXBvbmVudCgpOiBDb21wb25lbnRSZWY8T3ZlcmxheUNvbXBvbmVudD4ge1xuICAgIHJldHVybiB0aGlzLmluamVjdGlvblNlcnZpY2UuYXBwZW5kQ29tcG9uZW50KE92ZXJsYXlDb21wb25lbnQpO1xuICB9XG5cbiAgb25DbGljaygpIHtcbiAgICBpZiAodGhpcy50cmlnZ2VyQ29tcG9uZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBsYXN0SWR4ID0gdGhpcy50cmlnZ2VyQ29tcG9uZW50cy5sZW5ndGggLSAxO1xuICAgICAgY29uc3QgdHJpZ2dlckNvbXBvbmVudCA9IHRoaXMudHJpZ2dlckNvbXBvbmVudHNbbGFzdElkeF07XG4gICAgICB0aGlzLmNsaWNrLmVtaXQodHJpZ2dlckNvbXBvbmVudC5jb21wb25lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZVRyaWdnZXJDb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgY29uc3QgaWR4ID0gdGhpcy50cmlnZ2VyQ29tcG9uZW50cy5maW5kSW5kZXgoYyA9PiBjLmNvbXBvbmVudCA9PT0gY29tcG9uZW50KTtcbiAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgdGhpcy50cmlnZ2VyQ29tcG9uZW50cy5zcGxpY2UoaWR4LCAxKTtcbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVpJbmRleCgpO1xuXG4gICAgaWYgKHRoaXMudHJpZ2dlckNvbXBvbmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVaSW5kZXgoKSB7XG4gICAgaWYgKHRoaXMudHJpZ2dlckNvbXBvbmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ZXMgPSB0aGlzLnRyaWdnZXJDb21wb25lbnRzLm1hcCh0YyA9PiB0Yy56SW5kZXgpO1xuICAgIGNvbnN0IHpJbmRleCA9IE1hdGgubWF4KC4uLmluZGV4ZXMpIC0gMTtcbiAgICB0aGlzLmluc3RhbmNlLnpJbmRleCA9IHpJbmRleDtcbiAgfVxufVxuIl19