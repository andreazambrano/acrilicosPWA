import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, EventEmitter, HostListener, ViewEncapsulation, ChangeDetectionStrategy, TemplateRef } from '@angular/core';
import { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';
import { trigger } from '@angular/animations';
import { DRAWER_ANIMATION } from './drawer.animation';
import { DrawerDirection } from './drawer-direction.enum';
import { DrawerPosition } from './drawer-position.enum';
let DrawerComponent = class DrawerComponent {
    constructor() {
        this.cssClass = '';
        this.isRoot = true;
        this.close = new EventEmitter();
        this.position = DrawerPosition.fixed;
    }
    get size() {
        return this._size;
    }
    set size(val) {
        this._size = coerceNumberProperty(val);
    }
    get zIndex() {
        return this._zIndex;
    }
    set zIndex(val) {
        this._zIndex = coerceNumberProperty(val);
    }
    get closeOnOutsideClick() {
        return this._closeOnOutsideClick;
    }
    set closeOnOutsideClick(val) {
        this._closeOnOutsideClick = coerceBooleanProperty(val);
    }
    get cssClasses() {
        let clz = `ngx-drawer ${this.cssClass}`;
        if (this.isLeft)
            clz += ' left-drawer';
        if (this.isBottom)
            clz += ' bottom-drawer';
        return clz;
    }
    get isLeft() {
        return this.direction === DrawerDirection.Left;
    }
    get isBottom() {
        return this.direction === DrawerDirection.Bottom;
    }
    ngOnInit() {
        this.position = this.isRoot ? DrawerPosition.fixed : DrawerPosition.absolute;
        this.setDimensions(this.size);
    }
    ngOnDestroy() {
        this.close.emit(true);
    }
    setDimensions(size) {
        this.heightSize = `${this.isBottom && size ? size : 100}%`;
        this.widthSize = `${this.isLeft && size ? size : 100}%`;
    }
    onEscapeKey() {
        this.close.emit(true);
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], DrawerComponent.prototype, "cssClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DrawerComponent.prototype, "direction", void 0);
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], DrawerComponent.prototype, "template", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DrawerComponent.prototype, "context", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], DrawerComponent.prototype, "isRoot", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DrawerComponent.prototype, "size", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DrawerComponent.prototype, "zIndex", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DrawerComponent.prototype, "closeOnOutsideClick", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], DrawerComponent.prototype, "close", void 0);
__decorate([
    HostListener('keyup.esc'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DrawerComponent.prototype, "onEscapeKey", null);
DrawerComponent = __decorate([
    Component({
        exportAs: 'ngxDrawer',
        selector: 'ngx-drawer',
        template: "<div class=\"ngx-drawer-content\">\n  <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ context: context, close: close }\">\n  </ng-template>\n</div>\n",
        animations: [trigger('drawerTransition', DRAWER_ANIMATION)],
        host: {
            role: 'dialog',
            tabindex: '-1',
            '[class]': 'cssClasses',
            '[style.width]': 'widthSize',
            '[style.height]': 'heightSize',
            '[style.zIndex]': 'zIndex',
            '[style.position]': 'position',
            '[@drawerTransition]': 'direction'
        },
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [".ngx-drawer{display:block;overflow-y:auto;overflow-x:hidden;text-align:left;z-index:998;background:#1c2029}.ngx-drawer.left-drawer{top:0;right:0;height:100%}.ngx-drawer.bottom-drawer{left:0;bottom:0;width:100%}"]
    })
], DrawerComponent);
export { DrawerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9kcmF3ZXIvZHJhd2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixZQUFZLEVBQ1osaUJBQWlCLEVBRWpCLHVCQUF1QixFQUN2QixXQUFXLEVBRVosTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDcEYsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFxQnhELElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7SUFBNUI7UUFDVyxhQUFRLEdBQVcsRUFBRSxDQUFDO1FBSXRCLFdBQU0sR0FBWSxJQUFJLENBQUM7UUEwQnRCLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBVzlDLGFBQVEsR0FBbUIsY0FBYyxDQUFDLEtBQUssQ0FBQztJQWdDbEQsQ0FBQztJQWxFQyxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUNELElBQUksSUFBSSxDQUFDLEdBQVc7UUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBR0QsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFDRCxJQUFJLE1BQU0sQ0FBQyxHQUFXO1FBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUdELElBQUksbUJBQW1CO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDO0lBQ25DLENBQUM7SUFDRCxJQUFJLG1CQUFtQixDQUFDLEdBQVk7UUFDbEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFJRCxJQUFJLFVBQVU7UUFDWixJQUFJLEdBQUcsR0FBRyxjQUFjLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4QyxJQUFJLElBQUksQ0FBQyxNQUFNO1lBQUUsR0FBRyxJQUFJLGNBQWMsQ0FBQztRQUN2QyxJQUFJLElBQUksQ0FBQyxRQUFRO1lBQUUsR0FBRyxJQUFJLGdCQUFnQixDQUFDO1FBQzNDLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQU1ELElBQVksTUFBTTtRQUNoQixPQUFPLElBQUksQ0FBQyxTQUFTLEtBQUssZUFBZSxDQUFDLElBQUksQ0FBQztJQUNqRCxDQUFDO0lBRUQsSUFBWSxRQUFRO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFNBQVMsS0FBSyxlQUFlLENBQUMsTUFBTSxDQUFDO0lBQ25ELENBQUM7SUFNRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO1FBQzdFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELGFBQWEsQ0FBQyxJQUFZO1FBQ3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUMzRCxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDMUQsQ0FBQztJQUdELFdBQVc7UUFDVCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QixDQUFDO0NBQ0YsQ0FBQTtBQXpFVTtJQUFSLEtBQUssRUFBRTs7aURBQXVCO0FBQ3RCO0lBQVIsS0FBSyxFQUFFOztrREFBNEI7QUFDM0I7SUFBUixLQUFLLEVBQUU7OEJBQVcsV0FBVztpREFBTTtBQUMzQjtJQUFSLEtBQUssRUFBRTs7Z0RBQWM7QUFDYjtJQUFSLEtBQUssRUFBRTs7K0NBQXdCO0FBR2hDO0lBREMsS0FBSyxFQUFFOzs7MkNBR1A7QUFNRDtJQURDLEtBQUssRUFBRTs7OzZDQUdQO0FBTUQ7SUFEQyxLQUFLLEVBQUU7OzswREFHUDtBQUtTO0lBQVQsTUFBTSxFQUFFOzs4Q0FBcUM7QUF3QzlDO0lBREMsWUFBWSxDQUFDLFdBQVcsQ0FBQzs7OztrREFHekI7QUF6RVUsZUFBZTtJQW5CM0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLFdBQVc7UUFDckIsUUFBUSxFQUFFLFlBQVk7UUFDdEIsNExBQW9DO1FBRXBDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzNELElBQUksRUFBRTtZQUNKLElBQUksRUFBRSxRQUFRO1lBQ2QsUUFBUSxFQUFFLElBQUk7WUFDZCxTQUFTLEVBQUUsWUFBWTtZQUN2QixlQUFlLEVBQUUsV0FBVztZQUM1QixnQkFBZ0IsRUFBRSxZQUFZO1lBQzlCLGdCQUFnQixFQUFFLFFBQVE7WUFDMUIsa0JBQWtCLEVBQUUsVUFBVTtZQUM5QixxQkFBcUIsRUFBRSxXQUFXO1NBQ25DO1FBQ0QsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7UUFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O0tBQ2hELENBQUM7R0FDVyxlQUFlLENBMEUzQjtTQTFFWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RMaXN0ZW5lcixcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIE9uRGVzdHJveSxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIFRlbXBsYXRlUmVmLFxuICBPbkluaXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb2VyY2VOdW1iZXJQcm9wZXJ0eSwgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IHRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuaW1wb3J0IHsgRFJBV0VSX0FOSU1BVElPTiB9IGZyb20gJy4vZHJhd2VyLmFuaW1hdGlvbic7XG5pbXBvcnQgeyBEcmF3ZXJEaXJlY3Rpb24gfSBmcm9tICcuL2RyYXdlci1kaXJlY3Rpb24uZW51bSc7XG5pbXBvcnQgeyBEcmF3ZXJQb3NpdGlvbiB9IGZyb20gJy4vZHJhd2VyLXBvc2l0aW9uLmVudW0nO1xuXG5AQ29tcG9uZW50KHtcbiAgZXhwb3J0QXM6ICduZ3hEcmF3ZXInLFxuICBzZWxlY3RvcjogJ25neC1kcmF3ZXInLFxuICB0ZW1wbGF0ZVVybDogJ2RyYXdlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2RyYXdlci5jb21wb25lbnQuc2NzcyddLFxuICBhbmltYXRpb25zOiBbdHJpZ2dlcignZHJhd2VyVHJhbnNpdGlvbicsIERSQVdFUl9BTklNQVRJT04pXSxcbiAgaG9zdDoge1xuICAgIHJvbGU6ICdkaWFsb2cnLFxuICAgIHRhYmluZGV4OiAnLTEnLFxuICAgICdbY2xhc3NdJzogJ2Nzc0NsYXNzZXMnLFxuICAgICdbc3R5bGUud2lkdGhdJzogJ3dpZHRoU2l6ZScsXG4gICAgJ1tzdHlsZS5oZWlnaHRdJzogJ2hlaWdodFNpemUnLFxuICAgICdbc3R5bGUuekluZGV4XSc6ICd6SW5kZXgnLFxuICAgICdbc3R5bGUucG9zaXRpb25dJzogJ3Bvc2l0aW9uJyxcbiAgICAnW0BkcmF3ZXJUcmFuc2l0aW9uXSc6ICdkaXJlY3Rpb24nXG4gIH0sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIERyYXdlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQElucHV0KCkgY3NzQ2xhc3M6IHN0cmluZyA9ICcnO1xuICBASW5wdXQoKSBkaXJlY3Rpb246IERyYXdlckRpcmVjdGlvbjtcbiAgQElucHV0KCkgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gIEBJbnB1dCgpIGNvbnRleHQ6IGFueTtcbiAgQElucHV0KCkgaXNSb290OiBib29sZWFuID0gdHJ1ZTtcblxuICBASW5wdXQoKVxuICBnZXQgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgfVxuICBzZXQgc2l6ZSh2YWw6IG51bWJlcikge1xuICAgIHRoaXMuX3NpemUgPSBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh2YWwpO1xuICB9XG5cbiAgQElucHV0KClcbiAgZ2V0IHpJbmRleCgpIHtcbiAgICByZXR1cm4gdGhpcy5fekluZGV4O1xuICB9XG4gIHNldCB6SW5kZXgodmFsOiBudW1iZXIpIHtcbiAgICB0aGlzLl96SW5kZXggPSBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh2YWwpO1xuICB9XG5cbiAgQElucHV0KClcbiAgZ2V0IGNsb3NlT25PdXRzaWRlQ2xpY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Nsb3NlT25PdXRzaWRlQ2xpY2s7XG4gIH1cbiAgc2V0IGNsb3NlT25PdXRzaWRlQ2xpY2sodmFsOiBib29sZWFuKSB7XG4gICAgdGhpcy5fY2xvc2VPbk91dHNpZGVDbGljayA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWwpO1xuICB9XG5cbiAgQE91dHB1dCgpIGNsb3NlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIGdldCBjc3NDbGFzc2VzKCk6IHN0cmluZyB7XG4gICAgbGV0IGNseiA9IGBuZ3gtZHJhd2VyICR7dGhpcy5jc3NDbGFzc31gO1xuICAgIGlmICh0aGlzLmlzTGVmdCkgY2x6ICs9ICcgbGVmdC1kcmF3ZXInO1xuICAgIGlmICh0aGlzLmlzQm90dG9tKSBjbHogKz0gJyBib3R0b20tZHJhd2VyJztcbiAgICByZXR1cm4gY2x6O1xuICB9XG5cbiAgd2lkdGhTaXplOiBzdHJpbmcgfCBudW1iZXI7XG4gIGhlaWdodFNpemU6IHN0cmluZyB8IG51bWJlcjtcbiAgcG9zaXRpb246IERyYXdlclBvc2l0aW9uID0gRHJhd2VyUG9zaXRpb24uZml4ZWQ7XG5cbiAgcHJpdmF0ZSBnZXQgaXNMZWZ0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmRpcmVjdGlvbiA9PT0gRHJhd2VyRGlyZWN0aW9uLkxlZnQ7XG4gIH1cblxuICBwcml2YXRlIGdldCBpc0JvdHRvbSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kaXJlY3Rpb24gPT09IERyYXdlckRpcmVjdGlvbi5Cb3R0b207XG4gIH1cblxuICBwcml2YXRlIF9zaXplOiBudW1iZXI7XG4gIHByaXZhdGUgX3pJbmRleDogbnVtYmVyO1xuICBwcml2YXRlIF9jbG9zZU9uT3V0c2lkZUNsaWNrOiBib29sZWFuO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLmlzUm9vdCA/IERyYXdlclBvc2l0aW9uLmZpeGVkIDogRHJhd2VyUG9zaXRpb24uYWJzb2x1dGU7XG4gICAgdGhpcy5zZXREaW1lbnNpb25zKHRoaXMuc2l6ZSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmNsb3NlLmVtaXQodHJ1ZSk7XG4gIH1cblxuICBzZXREaW1lbnNpb25zKHNpemU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuaGVpZ2h0U2l6ZSA9IGAke3RoaXMuaXNCb3R0b20gJiYgc2l6ZSA/IHNpemUgOiAxMDB9JWA7XG4gICAgdGhpcy53aWR0aFNpemUgPSBgJHt0aGlzLmlzTGVmdCAmJiBzaXplID8gc2l6ZSA6IDEwMH0lYDtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleXVwLmVzYycpXG4gIG9uRXNjYXBlS2V5KCk6IHZvaWQge1xuICAgIHRoaXMuY2xvc2UuZW1pdCh0cnVlKTtcbiAgfVxufVxuIl19