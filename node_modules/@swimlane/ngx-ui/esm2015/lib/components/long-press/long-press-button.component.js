import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, EventEmitter, ViewEncapsulation, OnInit, OnChanges, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { trigger, state, style, animate, transition } from '@angular/animations';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { LongPressButtonState } from './long-press-button-state.enum';
let LongPressButtonComponent = class LongPressButtonComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.state = LongPressButtonState.Active;
        this.icon = 'mouse-hold';
        this.longPress = new EventEmitter();
        this.LongPressButtonState = LongPressButtonState;
        this.pressed = false;
        this._duration = 3000;
        this._disabled = false;
    }
    get duration() {
        return this._duration;
    }
    set duration(duration) {
        this._duration = coerceNumberProperty(duration);
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(disabled) {
        this._disabled = coerceBooleanProperty(disabled);
    }
    ngOnInit() {
        this.updateState();
    }
    ngOnChanges() {
        this.updateState();
    }
    updateState() {
        if (!this.state) {
            this.state = LongPressButtonState.Active;
        }
        if (this.state === LongPressButtonState.Submitted) {
            this.disabled = true;
            clearTimeout(this._lastTimeout);
            this._lastTimeout = setTimeout(() => {
                this.state = LongPressButtonState.Active;
                this.disabled = false;
                this.updateState();
            }, 3000);
        }
        this.cdr.markForCheck();
    }
    onLongPressStart() {
        if (!this.disabled) {
            this.pressed = true;
        }
    }
    onLongPressFinish(e) {
        if (!this.disabled) {
            this.pressed = false;
            this.state = LongPressButtonState.Submitted;
            this.longPress.emit(e);
            this.updateState();
        }
    }
    onLongPressCancel() {
        this.pressed = false;
    }
};
LongPressButtonComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], LongPressButtonComponent.prototype, "state", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], LongPressButtonComponent.prototype, "icon", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], LongPressButtonComponent.prototype, "duration", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], LongPressButtonComponent.prototype, "disabled", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], LongPressButtonComponent.prototype, "longPress", void 0);
LongPressButtonComponent = __decorate([
    Component({
        exportAs: 'ngxLongPressButton',
        selector: 'ngx-long-press-button',
        template: "<div\n  long-press\n  [duration]=\"duration\"\n  [disabled]=\"disabled\"\n  (longPressStart)=\"onLongPressStart()\"\n  (longPressFinish)=\"onLongPressFinish($event)\"\n  (longPressCancel)=\"onLongPressCancel()\"\n  >\n  <span class=\"inner-background\"></span>\n  <svg viewBox=\"-170 -170 340 340\">\n    <g transform=\"rotate(-90)\">\n      <circle\n        class=\"loading-circle\"\n        *ngIf=\"state !== LongPressButtonState.Submitted\"\n        r=\"160\"\n        [@circleAnimation]=\"{ value: pressed ? 'active' : 'inactive', params: { duration: duration } }\"\n      />\n      <circle class=\"full-circle\" *ngIf=\"state === LongPressButtonState.Submitted\" r=\"160\" />\n    </g>\n  </svg>\n  <button [disabled]=\"disabled\">\n    <ngx-icon *ngIf=\"state === LongPressButtonState.Active\" class=\"icon\" [fontIcon]=\"icon\"></ngx-icon>\n    <ngx-icon *ngIf=\"state === LongPressButtonState.Submitted\" class=\"icon\" fontIcon=\"check\"></ngx-icon>\n  </button>\n</div>\n",
        host: {
            class: 'ngx-long-press',
            '[class.disabled-button]': 'disabled',
            '[class.active]': 'state === LongPressButtonState.Active',
            '[class.submitted]': 'state === LongPressButtonState.Submitted'
        },
        animations: [
            trigger('circleAnimation', [
                state('active', style({
                    strokeDasharray: '1000 1000'
                })),
                state('inactive', style({
                    strokeDasharray: '0 1000'
                })),
                transition('inactive => active', animate(`{{ duration }}ms ease-out`), { params: { duration: 1000 } })
            ])
        ],
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [".ngx-long-press{border-radius:50%;border:3px solid #12141a;padding:0;width:60px;height:60px;overflow:hidden;display:inline-block;text-align:center;position:relative;cursor:pointer}.ngx-long-press button{padding:0;position:absolute;top:50%;left:50%}.ngx-long-press .inner-background{border-radius:50%;background:#12141a;width:46px;height:46px;position:absolute;top:4px;left:4px}.ngx-long-press .ngx-icon{font-size:23px;height:60px;vertical-align:middle;line-height:60px;position:absolute;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.ngx-long-press .ngx-icon ::before{line-height:60px}.ngx-long-press svg{width:100%;height:100%}.ngx-long-press circle{fill:none;stroke:#0dee72;stroke-width:16}.ngx-long-press circle.loading-circle{stroke-dashoffset:0;stroke-dasharray:122 1000}"]
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef])
], LongPressButtonComponent);
export { LongPressButtonComponent };
//# sourceMappingURL=data:application/json;base64,