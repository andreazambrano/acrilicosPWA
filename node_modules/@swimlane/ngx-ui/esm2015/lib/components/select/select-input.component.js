import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, EventEmitter, ViewChild, TemplateRef, ElementRef, ChangeDetectionStrategy } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { KeyboardKeys } from '../../enums';
let SelectInputComponent = class SelectInputComponent {
    constructor() {
        this.toggle = new EventEmitter();
        this.selection = new EventEmitter();
        this.activate = new EventEmitter();
        this.keyup = new EventEmitter();
        this.selectedOptions = [];
    }
    get autofocus() {
        return this._autofocus;
    }
    set autofocus(autofocus) {
        this._autofocus = coerceBooleanProperty(autofocus);
    }
    get allowClear() {
        return this._allowClear;
    }
    set allowClear(allowClear) {
        this._allowClear = coerceBooleanProperty(allowClear);
    }
    get multiple() {
        return this._multiple;
    }
    set multiple(multiple) {
        this._multiple = coerceBooleanProperty(multiple);
    }
    get tagging() {
        return this._tagging;
    }
    set tagging(tagging) {
        this._tagging = coerceBooleanProperty(tagging);
    }
    get allowAdditions() {
        return this._allowAdditions;
    }
    set allowAdditions(allowAdditions) {
        this._allowAdditions = coerceBooleanProperty(allowAdditions);
    }
    get disableDropdown() {
        return this._disableDropdown;
    }
    set disableDropdown(disableDropdown) {
        this._disableDropdown = coerceBooleanProperty(disableDropdown);
    }
    get selected() {
        return this._selected;
    }
    set selected(val) {
        this._selected = val;
        this.selectedOptions = this.calcSelectedOptions(val);
    }
    get caretVisible() {
        if (this.disableDropdown)
            return false;
        if (this.tagging && (!this.options || !this.options.length))
            return false;
        return true;
    }
    get isNotTemplate() {
        return !(typeof this.selectCaret === 'object' && this.selectCaret instanceof TemplateRef);
    }
    ngAfterViewInit() {
        if (this.tagging && this.autofocus) {
            setTimeout(() => {
                this.inputElement.nativeElement.focus();
            }, 5);
        }
    }
    onKeyUp(event) {
        event.stopPropagation();
        const key = event.key;
        const value = event.target.value;
        if (key === KeyboardKeys.ENTER) {
            if (value !== '') {
                const hasSelection = this.selected.find(selection => {
                    return value === selection;
                });
                if (!hasSelection) {
                    const newSelections = [...this.selected, value];
                    this.selection.emit(newSelections);
                    event.target.value = '';
                }
            }
            event.preventDefault();
        }
        else if (key === KeyboardKeys.ESCAPE) {
            this.toggle.emit();
        }
        this.keyup.emit({ event, value });
    }
    onKeyDown(event) {
        if (this.disableDropdown)
            return;
        event.stopPropagation();
        if (!this.tagging) {
            this.keyup.emit({ event });
        }
    }
    onClick(event) {
        if (this.disableDropdown)
            return;
        this.activate.emit(event);
        if (this.tagging) {
            setTimeout(() => {
                this.inputElement.nativeElement.focus();
            }, 5);
        }
    }
    onOptionRemove(event, option) {
        event.stopPropagation();
        const newSelections = this.selected.filter(selection => {
            if (this.identifier !== undefined) {
                return option.value[this.identifier] !== selection[this.identifier];
            }
            return option.value !== selection;
        });
        this.selection.emit(newSelections);
    }
    calcSelectedOptions(selected) {
        const results = [];
        // result out if nothing here
        if (!selected)
            return results;
        for (const selection of selected) {
            let match;
            if (this.options) {
                match = this.options.find(option => {
                    if (this.identifier) {
                        return selection[this.identifier] === option.value[this.identifier];
                    }
                    return selection === option.value;
                });
            }
            if ((this.tagging || this.allowAdditions) && !match) {
                match = { value: selection, name: selection };
            }
            if (match)
                results.push(match);
        }
        return results;
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], SelectInputComponent.prototype, "placeholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SelectInputComponent.prototype, "identifier", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], SelectInputComponent.prototype, "options", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SelectInputComponent.prototype, "label", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SelectInputComponent.prototype, "hint", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SelectInputComponent.prototype, "selectCaret", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SelectInputComponent.prototype, "requiredIndicator", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], SelectInputComponent.prototype, "autofocus", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], SelectInputComponent.prototype, "allowClear", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], SelectInputComponent.prototype, "multiple", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], SelectInputComponent.prototype, "tagging", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], SelectInputComponent.prototype, "allowAdditions", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], SelectInputComponent.prototype, "disableDropdown", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], SelectInputComponent.prototype, "selected", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], SelectInputComponent.prototype, "toggle", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], SelectInputComponent.prototype, "selection", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], SelectInputComponent.prototype, "activate", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], SelectInputComponent.prototype, "keyup", void 0);
__decorate([
    ViewChild('tagInput'),
    __metadata("design:type", ElementRef)
], SelectInputComponent.prototype, "inputElement", void 0);
SelectInputComponent = __decorate([
    Component({
        exportAs: 'ngxSelectInput',
        selector: 'ngx-select-input',
        template: "<div tabindex=\"-1\" (keydown)=\"onKeyDown($event)\" class=\"ngx-select-input-box\" (click)=\"onClick($event)\">\n  <span *ngIf=\"label !== undefined\" class=\"ngx-select-label\">\n    <span [innerHTML]=\"label\"></span>\n    <span [innerHTML]=\"requiredIndicator\"></span>\n  </span>\n  <span\n    *ngIf=\"!selected?.length && placeholder !== undefined\"\n    class=\"ngx-select-placeholder\"\n    [innerHTML]=\"placeholder\"\n  >\n  </span>\n  <ul class=\"horizontal-list ngx-select-input-list\">\n    <li *ngFor=\"let option of selectedOptions\" class=\"ngx-select-input-option\" [class.disabled]=\"option.disabled\">\n      <ng-template\n        *ngIf=\"option.inputTemplate\"\n        [ngTemplateOutlet]=\"option.inputTemplate\"\n        [ngTemplateOutletContext]=\"{ option: option }\"\n      >\n      </ng-template>\n      <span *ngIf=\"!option.inputTemplate\" class=\"ngx-select-input-name\" [innerHTML]=\"option.name || option.value\">\n      </span>\n      <span\n        *ngIf=\"allowClear && (multiple || tagging) && !option.disabled\"\n        title=\"Remove Selection\"\n        class=\"ngx-select-clear icon-x\"\n        (click)=\"onOptionRemove($event, option)\"\n      >\n      </span>\n    </li>\n    <li *ngIf=\"tagging\" class=\"ngx-select-input-box-wrapper\">\n      <input\n        #tagInput\n        type=\"search\"\n        class=\"ng-select-text-box\"\n        tabindex=\"\"\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        spellcheck=\"off\"\n        (keyup)=\"onKeyUp($event)\"\n      />\n    </li>\n  </ul>\n</div>\n<div class=\"ngx-select-input-underline\">\n  <div class=\"underline-fill\"></div>\n</div>\n<div class=\"ngx-select-hint\">\n  <span *ngIf=\"hint !== undefined\" [innerHTML]=\"hint\"></span>\n  <ng-content select=\"ngx-input-hint\"></ng-content>\n</div>\n<span\n  *ngIf=\"allowClear && !multiple && !tagging && selectedOptions?.length\"\n  title=\"Clear Selections\"\n  class=\"ngx-select-clear icon-x\"\n  (click)=\"selection.emit([])\"\n>\n</span>\n<span\n  *ngIf=\"caretVisible\"\n  class=\"ngx-select-caret icon-arrow-down\"\n  [class.icon-arrow-down]=\"!selectCaret\"\n  (click)=\"toggle.emit()\"\n>\n  <span *ngIf=\"isNotTemplate; else tpl\" [innerHTML]=\"selectCaret\"> </span>\n  <ng-template #tpl>\n    <ng-container *ngTemplateOutlet=\"selectCaret\"></ng-container>\n  </ng-template>\n</span>\n",
        host: { class: 'ngx-select-input' },
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], SelectInputComponent);
export { SelectInputComponent };
//# sourceMappingURL=data:application/json;base64,