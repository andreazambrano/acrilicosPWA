import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, EventEmitter, ViewChild, AfterViewInit, ElementRef, TemplateRef, ChangeDetectionStrategy } from '@angular/core';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { KeyboardKeys } from '../../enums';
import { containsFilter } from './contains-filter.util';
let SelectDropdownComponent = class SelectDropdownComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.allowAdditionsText = 'Add Value';
        this.keyup = new EventEmitter();
        this.selection = new EventEmitter();
        this.close = new EventEmitter();
        this._filterCaseSensitive = false;
    }
    get tagging() {
        return this._tagging;
    }
    set tagging(tagging) {
        this._tagging = coerceBooleanProperty(tagging);
    }
    get allowAdditions() {
        return this._allowAdditions;
    }
    set allowAdditions(allowAdditions) {
        this._allowAdditions = coerceBooleanProperty(allowAdditions);
    }
    get filterable() {
        return this._filterable;
    }
    set filterable(filterable) {
        this._filterable = coerceBooleanProperty(filterable);
    }
    get filterCaseSensitive() {
        return this._filterCaseSensitive;
    }
    set filterCaseSensitive(filterCaseSensitive) {
        this._filterCaseSensitive = coerceBooleanProperty(filterCaseSensitive);
    }
    get focusIndex() {
        return this._focusIndex;
    }
    set focusIndex(val) {
        this._focusIndex = coerceNumberProperty(val);
        this.focusElement(this._focusIndex);
    }
    get filterQuery() {
        return this._filterQuery;
    }
    set filterQuery(val) {
        this._filterQuery = val;
        this.groups = this.calculateGroups(this.groupBy, this.options, val);
    }
    get groupBy() {
        return this._groupBy;
    }
    set groupBy(val) {
        this._groupBy = val;
        this.groups = this.calculateGroups(val, this.options);
    }
    get options() {
        return this._options;
    }
    set options(val) {
        this.groups = this.calculateGroups(this.groupBy, val);
        this._options = val;
    }
    get element() {
        return this.elementRef.nativeElement;
    }
    get isNotTemplate() {
        return !(typeof this.allowAdditionsText === 'object' && this.allowAdditionsText instanceof TemplateRef);
    }
    ngAfterViewInit() {
        if (this.filterable && !this.tagging) {
            setTimeout(() => {
                this.filterInput.nativeElement.focus();
            }, 5);
        }
    }
    isSelected(option) {
        if (!this.selected || !this.selected.length)
            return false;
        const idx = this.selected.findIndex(o => {
            if (this.identifier)
                return o[this.identifier] === option.value[this.identifier];
            return o === option.value;
        });
        return idx > -1;
    }
    onInputKeyUp(event) {
        event.preventDefault();
        event.stopPropagation();
        const key = event.key;
        const value = event.target.value;
        if (key === KeyboardKeys.ESCAPE) {
            this.close.emit(true);
        }
        else if (event.key === KeyboardKeys.ARROW_DOWN) {
            ++this.focusIndex;
        }
        if (this.filterQuery !== value) {
            this.filterQuery = value;
        }
        this.keyup.emit({ event, value });
    }
    onOptionKeyDown(event) {
        event.preventDefault();
        event.stopPropagation();
        const key = event.key;
        if (key === KeyboardKeys.ARROW_DOWN) {
            if (this.focusIndex < this.options.length - 1)
                ++this.focusIndex;
        }
        else if (key === KeyboardKeys.ARROW_UP) {
            if (this.focusIndex > 0)
                --this.focusIndex;
        }
        else if (key === KeyboardKeys.ENTER) {
            this.selection.emit(this.options[this.focusIndex]);
        }
    }
    onAddClicked(event, value) {
        event.preventDefault();
        event.stopPropagation();
        this.selection.emit({ value, name: value });
        event.target.value = '';
        this.close.emit();
    }
    focusElement(index) {
        const elements = this.element.getElementsByClassName('ngx-select-dropdown-option');
        const element = elements[index];
        if (element) {
            setTimeout(() => element.focus(), 5);
        }
    }
    calculateGroups(groupBy, options, filter) {
        if (!options)
            return [];
        const filterOptions = { filterCaseSensitive: this.filterCaseSensitive };
        // no group by defined, skip and just return
        // empty group object...
        if (!groupBy) {
            if (filter) {
                // filter options
                options = options.filter(o => {
                    return containsFilter({ name: o.name, value: o.value }, filter, filterOptions);
                });
            }
            // need to map indexes
            options = options.map((option, index) => {
                return { option, index };
            });
            return [{ options }];
        }
        const map = new Map();
        let i = 0;
        for (const option of options) {
            // only show items in filter criteria
            if (filter && !containsFilter({ name: option.name, value: option.value }, filter, filterOptions)) {
                continue;
            }
            const group = option.value[groupBy];
            const opt = map.get(group);
            // need to map the true indexes
            const kv = { option, index: i++ };
            if (!opt) {
                map.set(group, [kv]);
            }
            else {
                opt.push(kv);
            }
        }
        const result = [];
        map.forEach((value, key) => {
            result.push({ name: key, options: value });
        });
        return result;
    }
};
SelectDropdownComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", Array)
], SelectDropdownComponent.prototype, "selected", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SelectDropdownComponent.prototype, "identifier", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SelectDropdownComponent.prototype, "filterPlaceholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SelectDropdownComponent.prototype, "filterEmptyPlaceholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SelectDropdownComponent.prototype, "emptyPlaceholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], SelectDropdownComponent.prototype, "allowAdditionsText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], SelectDropdownComponent.prototype, "tagging", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], SelectDropdownComponent.prototype, "allowAdditions", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], SelectDropdownComponent.prototype, "filterable", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], SelectDropdownComponent.prototype, "filterCaseSensitive", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], SelectDropdownComponent.prototype, "focusIndex", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], SelectDropdownComponent.prototype, "filterQuery", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], SelectDropdownComponent.prototype, "groupBy", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], SelectDropdownComponent.prototype, "options", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], SelectDropdownComponent.prototype, "keyup", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], SelectDropdownComponent.prototype, "selection", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], SelectDropdownComponent.prototype, "close", void 0);
__decorate([
    ViewChild('filterInput'),
    __metadata("design:type", ElementRef)
], SelectDropdownComponent.prototype, "filterInput", void 0);
SelectDropdownComponent = __decorate([
    Component({
        exportAs: 'ngxSelectDropdown',
        selector: 'ngx-select-dropdown',
        template: "<div>\n  <div class=\"ngx-select-filter\" *ngIf=\"filterable && !tagging\">\n    <input\n      #filterInput\n      type=\"search\"\n      tabindex=\"\"\n      autocomplete=\"off\"\n      autocorrect=\"off\"\n      spellcheck=\"off\"\n      class=\"ngx-select-filter-input\"\n      [placeholder]=\"filterPlaceholder\"\n      (keyup)=\"onInputKeyUp($event)\"\n    />\n  </div>\n  <ul class=\"vertical-list ngx-select-dropdown-options\">\n    <li *ngFor=\"let group of groups\" class=\"ngx-select-option-group\">\n      <span class=\"ngx-select-option-group-name\" *ngIf=\"group.name\" [innerHTML]=\"group.name\"> </span>\n      <ul class=\"vertical-list ngx-select-dropdown-options\">\n        <li\n          *ngFor=\"let kv of group.options\"\n          class=\"ngx-select-dropdown-option\"\n          [class.disabled]=\"kv.option.disabled\"\n          [class.active]=\"kv.index === focusIndex\"\n          [class.selected]=\"isSelected(kv.option)\"\n          [hidden]=\"kv.option.hidden\"\n          tabindex=\"-1\"\n          (click)=\"selection.emit(kv.option)\"\n          (keydown)=\"onOptionKeyDown($event)\"\n        >\n          <ng-template\n            *ngIf=\"kv.option.optionTemplate\"\n            [ngTemplateOutlet]=\"kv.option.optionTemplate\"\n            [ngTemplateOutletContext]=\"{ option: kv.option }\"\n          >\n          </ng-template>\n          <span *ngIf=\"!kv.option.optionTemplate\" [innerHTML]=\"kv.option.name\"> </span>\n        </li>\n        <li\n          *ngIf=\"filterQuery && filterEmptyPlaceholder && !group.options?.length\"\n          class=\"ngx-select-empty-placeholder\"\n        >\n          <span class=\"ngx-select-empty-placeholder-text\" [innerHTML]=\"filterEmptyPlaceholder\"> </span>\n          <a\n            *ngIf=\"allowAdditions\"\n            href=\"#\"\n            class=\"ngx-select-empty-placeholder-add\"\n            (click)=\"onAddClicked($event, filterQuery)\"\n          >\n            <span *ngIf=\"isNotTemplate; else tpl\" [innerHTML]=\"allowAdditionsText\"> </span>\n            <ng-template #tpl>\n              <ng-container *ngTemplateOutlet=\"allowAdditionsText\"></ng-container>\n            </ng-template>\n          </a>\n        </li>\n        <li\n          *ngIf=\"!filterQuery && emptyPlaceholder && !group.options?.length\"\n          class=\"ngx-select-empty-placeholder\"\n          [innerHTML]=\"emptyPlaceholder\"\n        ></li>\n      </ul>\n    </li>\n  </ul>\n</div>\n",
        host: {
            class: 'ngx-select-dropdown',
            '[class.groupings]': 'groupBy'
        },
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    __metadata("design:paramtypes", [ElementRef])
], SelectDropdownComponent);
export { SelectDropdownComponent };
//# sourceMappingURL=data:application/json;base64,