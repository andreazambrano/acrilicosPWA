import { __decorate, __metadata } from "tslib";
import { Component, Input, EventEmitter, Output, ViewEncapsulation, TemplateRef, ChangeDetectionStrategy } from '@angular/core';
let TreeNodeComponent = class TreeNodeComponent {
    constructor() {
        this.icons = {
            collapse: 'icon-tree-collapse',
            expand: 'icon-tree-expand'
        };
        this.activate = new EventEmitter();
        this.deactivate = new EventEmitter();
        this.selectNode = new EventEmitter();
        // backwards compatibility. Use selectNode
        this.select = this.selectNode;
        this.expand = new EventEmitter();
        this.collapse = new EventEmitter();
    }
    ngOnChanges() {
        this.data = {
            $implicit: this.node,
            label: this.label,
            children: this.children,
            model: this.model
        };
    }
    onExpandClick(event) {
        if (this.disabled || !this.expandable)
            return;
        event.stopPropagation();
        this.expanded = !this.expanded;
        if (this.expanded) {
            this.expand.emit(this.data);
        }
        else {
            this.collapse.emit(this.data);
        }
    }
    onClick() {
        if (!this.selectable || this.disabled)
            return;
        this.selectNode.emit(this.data);
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], TreeNodeComponent.prototype, "label", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TreeNodeComponent.prototype, "model", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TreeNodeComponent.prototype, "node", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], TreeNodeComponent.prototype, "children", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeNodeComponent.prototype, "disabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeNodeComponent.prototype, "expandable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeNodeComponent.prototype, "expanded", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TreeNodeComponent.prototype, "selectable", void 0);
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], TreeNodeComponent.prototype, "template", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TreeNodeComponent.prototype, "icons", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TreeNodeComponent.prototype, "activate", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TreeNodeComponent.prototype, "deactivate", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TreeNodeComponent.prototype, "selectNode", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TreeNodeComponent.prototype, "select", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TreeNodeComponent.prototype, "expand", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TreeNodeComponent.prototype, "collapse", void 0);
TreeNodeComponent = __decorate([
    Component({
        exportAs: 'ngxTreeNode',
        selector: 'ngx-tree-node',
        template: "<li\n  class=\"ngx-tree-node\"\n  [class.selectable]=\"selectable\"\n  (focus)=\"activate.emit(this.data)\"\n  (blur)=\"deactivate.emit(this.data)\"\n  tabindex=\"-1\"\n>\n  <span\n    *ngIf=\"expandable\"\n    class=\"ngx-expander\"\n    (click)=\"onExpandClick($event)\"\n    [class.disabled]=\"disabled\"\n    [ngClass]=\"expanded ? icons.collapse : icons.expand\"\n    >\n  </span>\n  <span *ngIf=\"!template\" [innerHTML]=\"label\" [class.disabled]=\"disabled\" class=\"ngx-node-label\" (click)=\"onClick()\"> </span>\n  <ng-template *ngIf=\"template\" [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"data\"> </ng-template>  \n  <ng-content *ngIf=\"expanded\"></ng-content>\n  <ngx-tree\n    *ngIf=\"children?.length && expandable && expanded\"\n    class=\"ngx-sub-tree\"\n    [nodes]=\"children\"\n    [template]=\"template\"\n    [icons]=\"icons\"\n    (selectNode)=\"selectNode.emit($event)\"\n  >\n  </ngx-tree>\n</li>\n",
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], TreeNodeComponent);
export { TreeNodeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90cmVlL3RyZWUtbm9kZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLFlBQVksRUFDWixNQUFNLEVBRU4saUJBQWlCLEVBQ2pCLFdBQVcsRUFDWCx1QkFBdUIsRUFDeEIsTUFBTSxlQUFlLENBQUM7QUFXdkIsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7SUFBOUI7UUFVVyxVQUFLLEdBQUc7WUFDZixRQUFRLEVBQUUsb0JBQW9CO1lBQzlCLE1BQU0sRUFBRSxrQkFBa0I7U0FDM0IsQ0FBQztRQUVRLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzlCLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2hDLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzFDLDBDQUEwQztRQUNoQyxXQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN6QixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM1QixhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQStCMUMsQ0FBQztJQTNCQyxXQUFXO1FBQ1QsSUFBSSxDQUFDLElBQUksR0FBRztZQUNWLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNwQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztTQUNsQixDQUFDO0lBQ0osQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFZO1FBQ3hCLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVO1lBQUUsT0FBTztRQUU5QyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFFL0IsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3QjthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsUUFBUTtZQUFFLE9BQU87UUFDOUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDRixDQUFBO0FBbkRVO0lBQVIsS0FBSyxFQUFFOztnREFBZTtBQUNkO0lBQVIsS0FBSyxFQUFFOztnREFBWTtBQUNYO0lBQVIsS0FBSyxFQUFFOzsrQ0FBZ0I7QUFDZjtJQUFSLEtBQUssRUFBRTs7bURBQWlCO0FBQ2hCO0lBQVIsS0FBSyxFQUFFOzttREFBbUI7QUFDbEI7SUFBUixLQUFLLEVBQUU7O3FEQUFxQjtBQUNwQjtJQUFSLEtBQUssRUFBRTs7bURBQW1CO0FBQ2xCO0lBQVIsS0FBSyxFQUFFOztxREFBcUI7QUFDcEI7SUFBUixLQUFLLEVBQUU7OEJBQVcsV0FBVzttREFBTTtBQUMzQjtJQUFSLEtBQUssRUFBRTs7Z0RBR047QUFFUTtJQUFULE1BQU0sRUFBRTs7bURBQStCO0FBQzlCO0lBQVQsTUFBTSxFQUFFOztxREFBaUM7QUFDaEM7SUFBVCxNQUFNLEVBQUU7O3FEQUFpQztBQUVoQztJQUFULE1BQU0sRUFBRTs7aURBQTBCO0FBQ3pCO0lBQVQsTUFBTSxFQUFFOztpREFBNkI7QUFDNUI7SUFBVCxNQUFNLEVBQUU7O21EQUErQjtBQXJCN0IsaUJBQWlCO0lBUDdCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxhQUFhO1FBQ3ZCLFFBQVEsRUFBRSxlQUFlO1FBQ3pCLDA3QkFBeUM7UUFDekMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7UUFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07S0FDaEQsQ0FBQztHQUNXLGlCQUFpQixDQW9EN0I7U0FwRFksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBPdXRwdXQsXG4gIE9uQ2hhbmdlcyxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIFRlbXBsYXRlUmVmLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgVHJlZU5vZGUgfSBmcm9tICcuL3RyZWUtbm9kZS5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBleHBvcnRBczogJ25neFRyZWVOb2RlJyxcbiAgc2VsZWN0b3I6ICduZ3gtdHJlZS1ub2RlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RyZWUtbm9kZS5jb21wb25lbnQuaHRtbCcsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFRyZWVOb2RlQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgbW9kZWw6IGFueTtcbiAgQElucHV0KCkgbm9kZTogVHJlZU5vZGU7XG4gIEBJbnB1dCgpIGNoaWxkcmVuOiBhbnlbXTtcbiAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGV4cGFuZGFibGU6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGV4cGFuZGVkOiBib29sZWFuO1xuICBASW5wdXQoKSBzZWxlY3RhYmxlOiBib29sZWFuO1xuICBASW5wdXQoKSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgQElucHV0KCkgaWNvbnMgPSB7XG4gICAgY29sbGFwc2U6ICdpY29uLXRyZWUtY29sbGFwc2UnLFxuICAgIGV4cGFuZDogJ2ljb24tdHJlZS1leHBhbmQnXG4gIH07XG5cbiAgQE91dHB1dCgpIGFjdGl2YXRlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgZGVhY3RpdmF0ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIHNlbGVjdE5vZGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiBVc2Ugc2VsZWN0Tm9kZVxuICBAT3V0cHV0KCkgc2VsZWN0ID0gdGhpcy5zZWxlY3ROb2RlO1xuICBAT3V0cHV0KCkgZXhwYW5kID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgY29sbGFwc2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgZGF0YTogYW55O1xuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHRoaXMuZGF0YSA9IHtcbiAgICAgICRpbXBsaWNpdDogdGhpcy5ub2RlLFxuICAgICAgbGFiZWw6IHRoaXMubGFiZWwsXG4gICAgICBjaGlsZHJlbjogdGhpcy5jaGlsZHJlbixcbiAgICAgIG1vZGVsOiB0aGlzLm1vZGVsXG4gICAgfTtcbiAgfVxuXG4gIG9uRXhwYW5kQ2xpY2soZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQgfHwgIXRoaXMuZXhwYW5kYWJsZSkgcmV0dXJuO1xuXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICB0aGlzLmV4cGFuZGVkID0gIXRoaXMuZXhwYW5kZWQ7XG5cbiAgICBpZiAodGhpcy5leHBhbmRlZCkge1xuICAgICAgdGhpcy5leHBhbmQuZW1pdCh0aGlzLmRhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbGxhcHNlLmVtaXQodGhpcy5kYXRhKTtcbiAgICB9XG4gIH1cblxuICBvbkNsaWNrKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5zZWxlY3RhYmxlIHx8IHRoaXMuZGlzYWJsZWQpIHJldHVybjtcbiAgICB0aGlzLnNlbGVjdE5vZGUuZW1pdCh0aGlzLmRhdGEpO1xuICB9XG59XG4iXX0=