import { __decorate, __metadata } from "tslib";
import { Component, Input, EventEmitter, Output, ContentChild, ViewEncapsulation, ContentChildren, TemplateRef, QueryList, ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy, AfterContentInit } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TreeNodeComponent } from './tree-node.component';
let TreeComponent = class TreeComponent {
    constructor(_cdr) {
        this._cdr = _cdr;
        this.icons = {
            collapse: 'icon-tree-collapse',
            expand: 'icon-tree-expand'
        };
        this.expand = new EventEmitter();
        this.collapse = new EventEmitter();
        this.activate = new EventEmitter();
        this.deactivate = new EventEmitter();
        this.selectNode = new EventEmitter();
        this._destroy$ = new Subject();
    }
    get hasOneLeaf() {
        return (this.nodes && this.nodes.length === 1) || this.nodeElms.length === 1;
    }
    get template() {
        return this._templateInput || this._templateQuery;
    }
    ngAfterContentInit() {
        this.nodeElms.changes.pipe(takeUntil(this._destroy$)).subscribe(() => this._cdr.markForCheck());
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
};
TreeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", Array)
], TreeComponent.prototype, "nodes", void 0);
__decorate([
    Input('template'),
    __metadata("design:type", TemplateRef)
], TreeComponent.prototype, "_templateInput", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TreeComponent.prototype, "icons", void 0);
__decorate([
    ContentChild(TemplateRef, { static: true }),
    __metadata("design:type", TemplateRef)
], TreeComponent.prototype, "_templateQuery", void 0);
__decorate([
    ContentChildren(TreeNodeComponent),
    __metadata("design:type", QueryList)
], TreeComponent.prototype, "nodeElms", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TreeComponent.prototype, "expand", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TreeComponent.prototype, "collapse", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TreeComponent.prototype, "activate", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TreeComponent.prototype, "deactivate", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TreeComponent.prototype, "selectNode", void 0);
TreeComponent = __decorate([
    Component({
        selector: 'ngx-tree',
        template: "<div class=\"ngx-tree\" [class.one-leaf]=\"hasOneLeaf\">\n  <ul class=\"vertical-list\">\n    <ngx-tree-node\n      *ngFor=\"let node of nodes\"\n      [node]=\"node\"\n      [disabled]=\"node.disabled\"\n      [expandable]=\"node.expandable\"\n      [expanded]=\"node.expanded\"\n      [selectable]=\"node.selectable\"\n      [icons]=\"icons\"\n      [label]=\"node.label\"\n      [model]=\"node.model\"\n      [children]=\"node.children\"\n      [template]=\"template\"\n      (expand)=\"expand.emit($event)\"\n      (collapse)=\"collapse.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      (selectNode)=\"selectNode.emit($event)\"\n    >\n    </ngx-tree-node>\n    <ng-content *ngIf=\"!nodes\"></ng-content>\n  </ul>\n  <div class=\"ngx-tree-vr\" *ngIf=\"nodes?.length || nodeElms?.length\"></div>\n</div>\n",
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [".ngx-tree{position:relative}.ngx-tree .ngx-tree-node{position:relative;padding-left:20px;line-height:25px;min-height:25px}.ngx-tree .ngx-tree-node .ngx-expander{font-size:.75rem;color:#b3b6bd;position:absolute;left:0;top:3px;z-index:1;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-tree .ngx-tree-node .ngx-expander:not(.disabled){cursor:pointer}.ngx-tree .ngx-tree-node .ngx-expander.icon-tree-collapse::before,.ngx-tree .ngx-tree-node .ngx-expander.icon-tree-expand::before{background:#1c2029;border-radius:50%}.ngx-tree .ngx-tree-node .ngx-node-label{color:#b3b6bd;font-size:.9rem}.ngx-tree .ngx-tree-node .ngx-tree{margin-left:5px}.ngx-tree .ngx-tree-node.selectable>.ngx-node-label:not(.disabled){cursor:pointer}.ngx-tree.one-leaf>.ngx-tree-vr::before{display:none}.ngx-tree .ngx-tree-vr{position:absolute;top:17px;bottom:12px;left:5px;border-left:1px dashed #667080;width:1px}.ngx-tree .ngx-tree-vr::after{content:' ';width:5px;height:5px;border-radius:5px;background:#667080;position:absolute;bottom:-3px;left:-3px}.ngx-tree .ngx-tree-vr::before{content:' ';width:5px;height:5px;border-radius:5px;background:0 0;border:1px solid #667080;position:absolute;top:-5px;left:-3px}"]
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef])
], TreeComponent);
export { TreeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdHJlZS90cmVlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsWUFBWSxFQUNaLE1BQU0sRUFDTixZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLGVBQWUsRUFDZixXQUFXLEVBQ1gsU0FBUyxFQUNULHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULGdCQUFnQixFQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQVUxRCxJQUFhLGFBQWEsR0FBMUIsTUFBYSxhQUFhO0lBZ0N4QixZQUE2QixJQUF1QjtRQUF2QixTQUFJLEdBQUosSUFBSSxDQUFtQjtRQTFCM0MsVUFBSyxHQUFHO1lBQ2YsUUFBUSxFQUFFLG9CQUFvQjtZQUM5QixNQUFNLEVBQUUsa0JBQWtCO1NBQzNCLENBQUM7UUFPUSxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM1QixhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM5QixhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM5QixlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNoQyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQVV6QixjQUFTLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQUVNLENBQUM7SUFWeEQsSUFBSSxVQUFVO1FBQ1osT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUNwRCxDQUFDO0lBTUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUNsRyxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM1QixDQUFDO0NBQ0YsQ0FBQTs7WUFWb0MsaUJBQWlCOztBQS9CM0M7SUFBUixLQUFLLEVBQUU7OzRDQUFtQjtBQUczQjtJQURDLEtBQUssQ0FBQyxVQUFVLENBQUM7OEJBQ0YsV0FBVztxREFBTTtBQUV4QjtJQUFSLEtBQUssRUFBRTs7NENBR047QUFHRjtJQURDLFlBQVksQ0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7OEJBQzVCLFdBQVc7cURBQU07QUFFRztJQUFuQyxlQUFlLENBQUMsaUJBQWlCLENBQUM7OEJBQW9CLFNBQVM7K0NBQW9CO0FBRTFFO0lBQVQsTUFBTSxFQUFFOzs2Q0FBNkI7QUFDNUI7SUFBVCxNQUFNLEVBQUU7OytDQUErQjtBQUM5QjtJQUFULE1BQU0sRUFBRTs7K0NBQStCO0FBQzlCO0lBQVQsTUFBTSxFQUFFOztpREFBaUM7QUFDaEM7SUFBVCxNQUFNLEVBQUU7O2lEQUFpQztBQXBCL0IsYUFBYTtJQVB6QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsVUFBVTtRQUNwQixvM0JBQW9DO1FBRXBDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO1FBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztLQUNoRCxDQUFDO3FDQWlDbUMsaUJBQWlCO0dBaEN6QyxhQUFhLENBMEN6QjtTQTFDWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBPdXRwdXQsXG4gIENvbnRlbnRDaGlsZCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgVGVtcGxhdGVSZWYsXG4gIFF1ZXJ5TGlzdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBPbkRlc3Ryb3ksXG4gIEFmdGVyQ29udGVudEluaXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFRyZWVOb2RlQ29tcG9uZW50IH0gZnJvbSAnLi90cmVlLW5vZGUuY29tcG9uZW50JztcbmltcG9ydCB7IFRyZWVOb2RlIH0gZnJvbSAnLi90cmVlLW5vZGUubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtdHJlZScsXG4gIHRlbXBsYXRlVXJsOiAnLi90cmVlLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdHJlZS5jb21wb25lbnQuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBUcmVlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgQElucHV0KCkgbm9kZXM6IFRyZWVOb2RlW107XG5cbiAgQElucHV0KCd0ZW1wbGF0ZScpXG4gIF90ZW1wbGF0ZUlucHV0OiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBJbnB1dCgpIGljb25zID0ge1xuICAgIGNvbGxhcHNlOiAnaWNvbi10cmVlLWNvbGxhcHNlJyxcbiAgICBleHBhbmQ6ICdpY29uLXRyZWUtZXhwYW5kJ1xuICB9O1xuXG4gIEBDb250ZW50Q2hpbGQoVGVtcGxhdGVSZWYsIHsgc3RhdGljOiB0cnVlIH0pXG4gIF90ZW1wbGF0ZVF1ZXJ5OiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oVHJlZU5vZGVDb21wb25lbnQpIHJlYWRvbmx5IG5vZGVFbG1zOiBRdWVyeUxpc3Q8VHJlZU5vZGVDb21wb25lbnQ+O1xuXG4gIEBPdXRwdXQoKSBleHBhbmQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBjb2xsYXBzZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIGFjdGl2YXRlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgZGVhY3RpdmF0ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIHNlbGVjdE5vZGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgZ2V0IGhhc09uZUxlYWYoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh0aGlzLm5vZGVzICYmIHRoaXMubm9kZXMubGVuZ3RoID09PSAxKSB8fCB0aGlzLm5vZGVFbG1zLmxlbmd0aCA9PT0gMTtcbiAgfVxuXG4gIGdldCB0ZW1wbGF0ZSgpOiBUZW1wbGF0ZVJlZjxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fdGVtcGxhdGVJbnB1dCB8fCB0aGlzLl90ZW1wbGF0ZVF1ZXJ5O1xuICB9XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgX2NkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIHRoaXMubm9kZUVsbXMuY2hhbmdlcy5waXBlKHRha2VVbnRpbCh0aGlzLl9kZXN0cm95JCkpLnN1YnNjcmliZSgoKSA9PiB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCkpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fZGVzdHJveSQubmV4dCgpO1xuICAgIHRoaXMuX2Rlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdfQ==