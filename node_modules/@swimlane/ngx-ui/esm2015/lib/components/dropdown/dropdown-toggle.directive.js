import { __decorate, __metadata } from "tslib";
import { Directive, Input, ElementRef, HostListener, EventEmitter, Output } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
let DropdownToggleDirective = class DropdownToggleDirective {
    constructor(el) {
        this.el = el;
        this.showEvent = "click" /* Click */;
        this.toggle = new EventEmitter();
        this._disabled = false;
        this.element = this.el.nativeElement;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(disabled) {
        this._disabled = coerceBooleanProperty(disabled);
    }
    onClick(event) {
        if (this.showEvent === "click" /* Click */ && !this.disabled) {
            event.preventDefault();
            this.toggle.emit(event);
        }
    }
    onContextmenu(event) {
        if (this.showEvent === "contextmenu" /* Contextmenu */ && !this.disabled) {
            event.preventDefault();
            this.toggle.emit(event);
        }
    }
    onDblclick(event) {
        if (this.showEvent === "dblclick" /* Dblclick */ && !this.disabled) {
            event.preventDefault();
            this.toggle.emit(event);
        }
    }
};
DropdownToggleDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], DropdownToggleDirective.prototype, "showEvent", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DropdownToggleDirective.prototype, "disabled", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], DropdownToggleDirective.prototype, "toggle", void 0);
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Event]),
    __metadata("design:returntype", void 0)
], DropdownToggleDirective.prototype, "onClick", null);
__decorate([
    HostListener('contextmenu', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Event]),
    __metadata("design:returntype", void 0)
], DropdownToggleDirective.prototype, "onContextmenu", null);
__decorate([
    HostListener('dblclick', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Event]),
    __metadata("design:returntype", void 0)
], DropdownToggleDirective.prototype, "onDblclick", null);
DropdownToggleDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        exportAs: 'ngxDropdownToggle',
        selector: 'ngx-dropdown-toggle',
        host: {
            class: 'ngx-dropdown-toggle',
            '[class.disabled]': 'disabled'
        }
    }),
    __metadata("design:paramtypes", [ElementRef])
], DropdownToggleDirective);
export { DropdownToggleDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tdG9nZ2xlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9kcm9wZG93bi9kcm9wZG93bi10b2dnbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFhOUQsSUFBYSx1QkFBdUIsR0FBcEMsTUFBYSx1QkFBdUI7SUFnQmxDLFlBQTZCLEVBQTJCO1FBQTNCLE9BQUUsR0FBRixFQUFFLENBQXlCO1FBZi9DLGNBQVMsdUJBQThDO1FBVXRELFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBUyxDQUFDO1FBR3JDLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFHeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQztJQUN2QyxDQUFDO0lBZEQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFDRCxJQUFJLFFBQVEsQ0FBQyxRQUFpQjtRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFZRCxPQUFPLENBQUMsS0FBWTtRQUNsQixJQUFJLElBQUksQ0FBQyxTQUFTLHdCQUE0QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNoRSxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBR0QsYUFBYSxDQUFDLEtBQVk7UUFDeEIsSUFBSSxJQUFJLENBQUMsU0FBUyxvQ0FBa0MsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDdEUsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUdELFVBQVUsQ0FBQyxLQUFZO1FBQ3JCLElBQUksSUFBSSxDQUFDLFNBQVMsOEJBQStCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ25FLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6QjtJQUNILENBQUM7Q0FDRixDQUFBOztZQTNCa0MsVUFBVTs7QUFmbEM7SUFBUixLQUFLLEVBQUU7OzBEQUF3RDtBQUdoRTtJQURDLEtBQUssRUFBRTs7O3VEQUdQO0FBS1M7SUFBVCxNQUFNLEVBQUU7O3VEQUFvQztBQVU3QztJQURDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7cUNBQ25CLEtBQUs7O3NEQUtuQjtBQUdEO0lBREMsWUFBWSxDQUFDLGFBQWEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztxQ0FDbkIsS0FBSzs7NERBS3pCO0FBR0Q7SUFEQyxZQUFZLENBQUMsVUFBVSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7O3FDQUNuQixLQUFLOzt5REFLdEI7QUExQ1UsdUJBQXVCO0lBVG5DLFNBQVMsQ0FBQztRQUNULDhDQUE4QztRQUM5QyxRQUFRLEVBQUUsbUJBQW1CO1FBQzdCLFFBQVEsRUFBRSxxQkFBcUI7UUFDL0IsSUFBSSxFQUFFO1lBQ0osS0FBSyxFQUFFLHFCQUFxQjtZQUM1QixrQkFBa0IsRUFBRSxVQUFVO1NBQy9CO0tBQ0YsQ0FBQztxQ0FpQmlDLFVBQVU7R0FoQmhDLHVCQUF1QixDQTJDbkM7U0EzQ1ksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyLCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcblxuaW1wb3J0IHsgRHJvcGRvd25TaG93VHlwZXMgfSBmcm9tICcuL2Ryb3Bkb3duLnNob3ctdHlwZXMuZW51bSc7XG5cbkBEaXJlY3RpdmUoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gIGV4cG9ydEFzOiAnbmd4RHJvcGRvd25Ub2dnbGUnLFxuICBzZWxlY3RvcjogJ25neC1kcm9wZG93bi10b2dnbGUnLFxuICBob3N0OiB7XG4gICAgY2xhc3M6ICduZ3gtZHJvcGRvd24tdG9nZ2xlJyxcbiAgICAnW2NsYXNzLmRpc2FibGVkXSc6ICdkaXNhYmxlZCdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBEcm9wZG93blRvZ2dsZURpcmVjdGl2ZSB7XG4gIEBJbnB1dCgpIHNob3dFdmVudDogRHJvcGRvd25TaG93VHlwZXMgPSBEcm9wZG93blNob3dUeXBlcy5DbGljaztcblxuICBASW5wdXQoKVxuICBnZXQgZGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG4gIHNldCBkaXNhYmxlZChkaXNhYmxlZDogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KGRpc2FibGVkKTtcbiAgfVxuXG4gIEBPdXRwdXQoKSB0b2dnbGUgPSBuZXcgRXZlbnRFbWl0dGVyPEV2ZW50PigpO1xuXG4gIHJlYWRvbmx5IGVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIF9kaXNhYmxlZCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICBvbkNsaWNrKGV2ZW50OiBFdmVudCkge1xuICAgIGlmICh0aGlzLnNob3dFdmVudCA9PT0gRHJvcGRvd25TaG93VHlwZXMuQ2xpY2sgJiYgIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnRvZ2dsZS5lbWl0KGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjb250ZXh0bWVudScsIFsnJGV2ZW50J10pXG4gIG9uQ29udGV4dG1lbnUoZXZlbnQ6IEV2ZW50KSB7XG4gICAgaWYgKHRoaXMuc2hvd0V2ZW50ID09PSBEcm9wZG93blNob3dUeXBlcy5Db250ZXh0bWVudSAmJiAhdGhpcy5kaXNhYmxlZCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMudG9nZ2xlLmVtaXQoZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2RibGNsaWNrJywgWyckZXZlbnQnXSlcbiAgb25EYmxjbGljayhldmVudDogRXZlbnQpIHtcbiAgICBpZiAodGhpcy5zaG93RXZlbnQgPT09IERyb3Bkb3duU2hvd1R5cGVzLkRibGNsaWNrICYmICF0aGlzLmRpc2FibGVkKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy50b2dnbGUuZW1pdChldmVudCk7XG4gICAgfVxuICB9XG59XG4iXX0=