var NotificationService_1;
import { __decorate, __metadata, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { InjectionService } from '../../services/injection/injection.service';
import { InjectionRegistryService } from '../../services/injection-registry/injection-registry.service';
import { NotificationType } from './notification-type.enum';
import { NotificationStyleType } from './notification-style-type.enum';
import { NotificationPermissionType } from './notification-permission-type.enum';
import { NotificationComponent } from './notification.component';
import { NotificationContainerComponent } from './notification-container.component';
/** adding dynamic to suppress `Document` type metadata error  */
/** @dynamic */
let NotificationService = NotificationService_1 = class NotificationService extends InjectionRegistryService {
    constructor(injectionService, document) {
        super(injectionService);
        this.injectionService = injectionService;
        this.document = document;
        this.defaults = {
            inputs: {
                timeout: 3000,
                rateLimit: true,
                pauseOnHover: true,
                type: NotificationType.html,
                styleType: NotificationStyleType.none,
                showClose: true,
                sound: false
            }
        };
        this.type = NotificationComponent;
    }
    get isNativeSupported() {
        return 'Notification' in window;
    }
    create(bindings) {
        // verify flood not happening
        if (bindings.rateLimit && this.isFlooded(bindings)) {
            return;
        }
        // if limit reached, remove the first one
        const compsByType = this.getByType();
        if (compsByType && compsByType.length >= NotificationService_1.limit) {
            this.destroy(compsByType[0]);
        }
        // native notifications need to be invoked
        let component;
        if (bindings.type === NotificationType.native) {
            component = this.showNative(bindings);
        }
        else {
            component = super.create(bindings);
            this.createSubscriptions(component);
            this.startTimer(component);
        }
        return component;
    }
    startTimer(component) {
        if (component.instance && component.instance.timeout !== false) {
            clearTimeout(component.instance.timer);
            component.instance.timer = setTimeout(() => {
                this.destroy(component);
            }, component.instance.timeout);
        }
    }
    pauseTimer(component) {
        clearTimeout(component.instance.timer);
    }
    requestPermissions() {
        if (this.isNativeSupported) {
            Notification.requestPermission(/* istanbul ignore next */ /* istanbul ignore next */ status => (this.permission = status));
        }
    }
    assignDefaults(options) {
        const bindings = super.assignDefaults(options);
        if (bindings.inputs && bindings.inputs.timeout === true) {
            bindings.inputs.timeout = this.defaults.inputs.timeout;
        }
        // add a timestamp for flood checks
        bindings.inputs.timestamp = +new Date();
        return bindings;
    }
    injectComponent(type, options) {
        if (!this.container || !this.document.contains(this.container.location.nativeElement)) {
            this.container = this.injectionService.appendComponent(NotificationContainerComponent);
        }
        return this.injectionService.appendComponent(type, options, this.container);
    }
    createSubscriptions(component) {
        let pauseSub;
        let resumeSub;
        let closeSub;
        const kill = () => {
            closeSub.unsubscribe();
            resumeSub.unsubscribe();
            pauseSub.unsubscribe();
            this.destroy(component);
        };
        const pause = () => {
            this.pauseTimer(component);
        };
        const resume = () => {
            this.startTimer(component);
        };
        pauseSub = component.instance.pause.subscribe(pause);
        resumeSub = component.instance.resume.subscribe(resume);
        closeSub = component.instance.close.subscribe(kill);
    }
    isFlooded(options) {
        const compsByType = this.getByType();
        for (const notification of compsByType) {
            const instance = notification.instance;
            if (instance.title === options.title &&
                instance.body === options.body &&
                instance.timestamp + 1000 > options.timestamp) {
                return true;
            }
        }
        return false;
    }
    showNative(options) {
        if (!this.isNativeSupported)
            return;
        if (!this.permission)
            this.requestPermissions();
        if (this.permission === NotificationPermissionType.denied)
            return;
        const note = new Notification(options.title, options);
        note.onerror = () => {
            console.error('Notification failed!', options);
        };
        // manually do this
        if (options && typeof options.timeout === 'number') {
            setTimeout(note.close.bind(note), options.timeout);
        }
        return note;
    }
};
NotificationService.limit = 10;
NotificationService.ctorParameters = () => [
    { type: InjectionService },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
NotificationService = NotificationService_1 = __decorate([
    Injectable(),
    __param(1, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [InjectionService, Document])
], NotificationService);
export { NotificationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbm90aWZpY2F0aW9uL25vdGlmaWNhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxFQUFRLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUczQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUM5RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUd4RyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM1RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUNqRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUdwRixpRUFBaUU7QUFDakUsZUFBZTtBQUVmLElBQWEsbUJBQW1CLDJCQUFoQyxNQUFhLG1CQUFvQixTQUFRLHdCQUErQztJQXNCdEYsWUFBcUIsZ0JBQWtDLEVBQXFDLFFBQWtCO1FBQzVHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBREwscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUFxQyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBcEJyRyxhQUFRLEdBQXdCO1lBQ3ZDLE1BQU0sRUFBRTtnQkFDTixPQUFPLEVBQUUsSUFBSTtnQkFDYixTQUFTLEVBQUUsSUFBSTtnQkFDZixZQUFZLEVBQUUsSUFBSTtnQkFDbEIsSUFBSSxFQUFFLGdCQUFnQixD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T0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQTtBQTdKaUIseUJBQUssR0FBcUIsRUFBRSxDQUFDOztZQXFCTixnQkFBZ0I7WUFBK0MsUUFBUSx1QkFBcEQsTUFBTSxTQUFDLFFBQVE7O0FBdEI5RCxtQkFBbUI7SUFEL0IsVUFBVSxFQUFFO0lBdUIrQyxXQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtxQ0FBbkMsZ0JBQWdCLEVBQStDLFFBQVE7R0F0Qm5HLG1CQUFtQixDQThKL0I7U0E5SlksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgQ29tcG9uZW50UmVmLCBJbmplY3QsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBJbmplY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvaW5qZWN0aW9uL2luamVjdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEluamVjdGlvblJlZ2lzdHJ5U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2luamVjdGlvbi1yZWdpc3RyeS9pbmplY3Rpb24tcmVnaXN0cnkuc2VydmljZSc7XG5pbXBvcnQgeyBQYXJ0aWFsQmluZGluZ3MgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9pbmplY3Rpb24tcmVnaXN0cnkvcGFydGlhbC1iaW5kaW5ncy5pbnRlcmZhY2UnO1xuXG5pbXBvcnQgeyBOb3RpZmljYXRpb25UeXBlIH0gZnJvbSAnLi9ub3RpZmljYXRpb24tdHlwZS5lbnVtJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvblN0eWxlVHlwZSB9IGZyb20gJy4vbm90aWZpY2F0aW9uLXN0eWxlLXR5cGUuZW51bSc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25QZXJtaXNzaW9uVHlwZSB9IGZyb20gJy4vbm90aWZpY2F0aW9uLXBlcm1pc3Npb24tdHlwZS5lbnVtJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vbm90aWZpY2F0aW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25Db250YWluZXJDb21wb25lbnQgfSBmcm9tICcuL25vdGlmaWNhdGlvbi1jb250YWluZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE5vdGlmaWNhdGlvbk9wdGlvbnMgfSBmcm9tICcuL25vdGlmaWNhdGlvbi1vcHRpb25zLmludGVyZmFjZSc7XG5cbi8qKiBhZGRpbmcgZHluYW1pYyB0byBzdXBwcmVzcyBgRG9jdW1lbnRgIHR5cGUgbWV0YWRhdGEgZXJyb3IgICovXG4vKiogQGR5bmFtaWMgKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25TZXJ2aWNlIGV4dGVuZHMgSW5qZWN0aW9uUmVnaXN0cnlTZXJ2aWNlPE5vdGlmaWNhdGlvbkNvbXBvbmVudD4ge1xuICBzdGF0aWMgcmVhZG9ubHkgbGltaXQ6IG51bWJlciB8IGJvb2xlYW4gPSAxMDtcbiAgcmVhZG9ubHkgZGVmYXVsdHM6IE5vdGlmaWNhdGlvbk9wdGlvbnMgPSB7XG4gICAgaW5wdXRzOiB7XG4gICAgICB0aW1lb3V0OiAzMDAwLFxuICAgICAgcmF0ZUxpbWl0OiB0cnVlLFxuICAgICAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICAgICAgdHlwZTogTm90aWZpY2F0aW9uVHlwZS5odG1sLFxuICAgICAgc3R5bGVUeXBlOiBOb3RpZmljYXRpb25TdHlsZVR5cGUubm9uZSxcbiAgICAgIHNob3dDbG9zZTogdHJ1ZSxcbiAgICAgIHNvdW5kOiBmYWxzZVxuICAgIH1cbiAgfTtcblxuICBwZXJtaXNzaW9uOiBOb3RpZmljYXRpb25QZXJtaXNzaW9uO1xuICBjb250YWluZXI/OiBDb21wb25lbnRSZWY8Tm90aWZpY2F0aW9uQ29udGFpbmVyQ29tcG9uZW50PjtcbiAgdHlwZSA9IE5vdGlmaWNhdGlvbkNvbXBvbmVudDtcblxuICBnZXQgaXNOYXRpdmVTdXBwb3J0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICdOb3RpZmljYXRpb24nIGluIHdpbmRvdztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGluamVjdGlvblNlcnZpY2U6IEluamVjdGlvblNlcnZpY2UsIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgcmVhZG9ubHkgZG9jdW1lbnQ6IERvY3VtZW50KSB7XG4gICAgc3VwZXIoaW5qZWN0aW9uU2VydmljZSk7XG4gIH1cblxuICBjcmVhdGUoYmluZGluZ3M6IFBhcnRpYWw8Tm90aWZpY2F0aW9uT3B0aW9ucz4pOiBDb21wb25lbnRSZWY8Tm90aWZpY2F0aW9uQ29tcG9uZW50PiB7XG4gICAgLy8gdmVyaWZ5IGZsb29kIG5vdCBoYXBwZW5pbmdcbiAgICBpZiAoYmluZGluZ3MucmF0ZUxpbWl0ICYmIHRoaXMuaXNGbG9vZGVkKGJpbmRpbmdzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGlmIGxpbWl0IHJlYWNoZWQsIHJlbW92ZSB0aGUgZmlyc3Qgb25lXG4gICAgY29uc3QgY29tcHNCeVR5cGUgPSB0aGlzLmdldEJ5VHlwZSgpO1xuXG4gICAgaWYgKGNvbXBzQnlUeXBlICYmIGNvbXBzQnlUeXBlLmxlbmd0aCA+PSBOb3RpZmljYXRpb25TZXJ2aWNlLmxpbWl0KSB7XG4gICAgICB0aGlzLmRlc3Ryb3koY29tcHNCeVR5cGVbMF0pO1xuICAgIH1cblxuICAgIC8vIG5hdGl2ZSBub3RpZmljYXRpb25zIG5lZWQgdG8gYmUgaW52b2tlZFxuICAgIGxldCBjb21wb25lbnQ6IENvbXBvbmVudFJlZjxOb3RpZmljYXRpb25Db21wb25lbnQ+IHwgTm90aWZpY2F0aW9uO1xuXG4gICAgaWYgKGJpbmRpbmdzLnR5cGUgPT09IE5vdGlmaWNhdGlvblR5cGUubmF0aXZlKSB7XG4gICAgICBjb21wb25lbnQgPSB0aGlzLnNob3dOYXRpdmUoYmluZGluZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wb25lbnQgPSBzdXBlci5jcmVhdGUoYmluZGluZ3MpO1xuICAgICAgdGhpcy5jcmVhdGVTdWJzY3JpcHRpb25zKGNvbXBvbmVudCk7XG4gICAgICB0aGlzLnN0YXJ0VGltZXIoY29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tcG9uZW50IGFzIGFueTtcbiAgfVxuXG4gIHN0YXJ0VGltZXIoY29tcG9uZW50OiBDb21wb25lbnRSZWY8Tm90aWZpY2F0aW9uQ29tcG9uZW50Pik6IHZvaWQge1xuICAgIGlmIChjb21wb25lbnQuaW5zdGFuY2UgJiYgY29tcG9uZW50Lmluc3RhbmNlLnRpbWVvdXQgIT09IGZhbHNlKSB7XG4gICAgICBjbGVhclRpbWVvdXQoY29tcG9uZW50Lmluc3RhbmNlLnRpbWVyKTtcblxuICAgICAgY29tcG9uZW50Lmluc3RhbmNlLnRpbWVyID0gc2V0VGltZW91dChcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuZGVzdHJveShjb21wb25lbnQpO1xuICAgICAgICB9LFxuICAgICAgICBjb21wb25lbnQuaW5zdGFuY2UudGltZW91dCBhcyBudW1iZXJcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcGF1c2VUaW1lcihjb21wb25lbnQ6IENvbXBvbmVudFJlZjxOb3RpZmljYXRpb25Db21wb25lbnQ+KTogdm9pZCB7XG4gICAgY2xlYXJUaW1lb3V0KGNvbXBvbmVudC5pbnN0YW5jZS50aW1lcik7XG4gIH1cblxuICByZXF1ZXN0UGVybWlzc2lvbnMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNOYXRpdmVTdXBwb3J0ZWQpIHtcbiAgICAgIE5vdGlmaWNhdGlvbi5yZXF1ZXN0UGVybWlzc2lvbigvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBzdGF0dXMgPT4gKHRoaXMucGVybWlzc2lvbiA9IHN0YXR1cykpO1xuICAgIH1cbiAgfVxuXG4gIGFzc2lnbkRlZmF1bHRzKG9wdGlvbnM6IFBhcnRpYWw8Tm90aWZpY2F0aW9uT3B0aW9ucz4pOiBQYXJ0aWFsQmluZGluZ3Mge1xuICAgIGNvbnN0IGJpbmRpbmdzID0gc3VwZXIuYXNzaWduRGVmYXVsdHMob3B0aW9ucyBhcyBhbnkpO1xuXG4gICAgaWYgKGJpbmRpbmdzLmlucHV0cyAmJiBiaW5kaW5ncy5pbnB1dHMudGltZW91dCA9PT0gdHJ1ZSkge1xuICAgICAgYmluZGluZ3MuaW5wdXRzLnRpbWVvdXQgPSB0aGlzLmRlZmF1bHRzLmlucHV0cy50aW1lb3V0O1xuICAgIH1cblxuICAgIC8vIGFkZCBhIHRpbWVzdGFtcCBmb3IgZmxvb2QgY2hlY2tzXG4gICAgYmluZGluZ3MuaW5wdXRzLnRpbWVzdGFtcCA9ICtuZXcgRGF0ZSgpO1xuICAgIHJldHVybiBiaW5kaW5ncztcbiAgfVxuXG4gIGluamVjdENvbXBvbmVudCh0eXBlOiBUeXBlPE5vdGlmaWNhdGlvbkNvbnRhaW5lckNvbXBvbmVudD4sIG9wdGlvbnM6IFBhcnRpYWxCaW5kaW5ncyk6IENvbXBvbmVudFJlZjxhbnk+IHtcbiAgICBpZiAoIXRoaXMuY29udGFpbmVyIHx8ICF0aGlzLmRvY3VtZW50LmNvbnRhaW5zKHRoaXMuY29udGFpbmVyLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQpKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuaW5qZWN0aW9uU2VydmljZS5hcHBlbmRDb21wb25lbnQoTm90aWZpY2F0aW9uQ29udGFpbmVyQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5pbmplY3Rpb25TZXJ2aWNlLmFwcGVuZENvbXBvbmVudCh0eXBlLCBvcHRpb25zLCB0aGlzLmNvbnRhaW5lcik7XG4gIH1cblxuICBjcmVhdGVTdWJzY3JpcHRpb25zKGNvbXBvbmVudDogQ29tcG9uZW50UmVmPE5vdGlmaWNhdGlvbkNvbXBvbmVudD4pOiBhbnkge1xuICAgIGxldCBwYXVzZVN1YjogU3Vic2NyaXB0aW9uO1xuICAgIGxldCByZXN1bWVTdWI6IFN1YnNjcmlwdGlvbjtcbiAgICBsZXQgY2xvc2VTdWI6IFN1YnNjcmlwdGlvbjtcblxuICAgIGNvbnN0IGtpbGwgPSAoKSA9PiB7XG4gICAgICBjbG9zZVN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgcmVzdW1lU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICBwYXVzZVN1Yi51bnN1YnNjcmliZSgpO1xuXG4gICAgICB0aGlzLmRlc3Ryb3koY29tcG9uZW50KTtcbiAgICB9O1xuXG4gICAgY29uc3QgcGF1c2UgPSAoKSA9PiB7XG4gICAgICB0aGlzLnBhdXNlVGltZXIoY29tcG9uZW50KTtcbiAgICB9O1xuXG4gICAgY29uc3QgcmVzdW1lID0gKCkgPT4ge1xuICAgICAgdGhpcy5zdGFydFRpbWVyKGNvbXBvbmVudCk7XG4gICAgfTtcblxuICAgIHBhdXNlU3ViID0gY29tcG9uZW50Lmluc3RhbmNlLnBhdXNlLnN1YnNjcmliZShwYXVzZSk7XG4gICAgcmVzdW1lU3ViID0gY29tcG9uZW50Lmluc3RhbmNlLnJlc3VtZS5zdWJzY3JpYmUocmVzdW1lKTtcbiAgICBjbG9zZVN1YiA9IGNvbXBvbmVudC5pbnN0YW5jZS5jbG9zZS5zdWJzY3JpYmUoa2lsbCk7XG4gIH1cblxuICBpc0Zsb29kZWQob3B0aW9uczogUGFydGlhbDxOb3RpZmljYXRpb25PcHRpb25zPik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNvbXBzQnlUeXBlID0gdGhpcy5nZXRCeVR5cGUoKTtcblxuICAgIGZvciAoY29uc3Qgbm90aWZpY2F0aW9uIG9mIGNvbXBzQnlUeXBlKSB7XG4gICAgICBjb25zdCBpbnN0YW5jZSA9IG5vdGlmaWNhdGlvbi5pbnN0YW5jZTtcblxuICAgICAgaWYgKFxuICAgICAgICBpbnN0YW5jZS50aXRsZSA9PT0gb3B0aW9ucy50aXRsZSAmJlxuICAgICAgICBpbnN0YW5jZS5ib2R5ID09PSBvcHRpb25zLmJvZHkgJiZcbiAgICAgICAgaW5zdGFuY2UudGltZXN0YW1wICsgMTAwMCA+IG9wdGlvbnMudGltZXN0YW1wXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc2hvd05hdGl2ZShvcHRpb25zOiBQYXJ0aWFsPE5vdGlmaWNhdGlvbk9wdGlvbnM+KTogYW55IHtcbiAgICBpZiAoIXRoaXMuaXNOYXRpdmVTdXBwb3J0ZWQpIHJldHVybjtcbiAgICBpZiAoIXRoaXMucGVybWlzc2lvbikgdGhpcy5yZXF1ZXN0UGVybWlzc2lvbnMoKTtcbiAgICBpZiAodGhpcy5wZXJtaXNzaW9uID09PSBOb3RpZmljYXRpb25QZXJtaXNzaW9uVHlwZS5kZW5pZWQpIHJldHVybjtcblxuICAgIGNvbnN0IG5vdGUgPSBuZXcgTm90aWZpY2F0aW9uKG9wdGlvbnMudGl0bGUsIG9wdGlvbnMpO1xuXG4gICAgbm90ZS5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcignTm90aWZpY2F0aW9uIGZhaWxlZCEnLCBvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgLy8gbWFudWFsbHkgZG8gdGhpc1xuICAgIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLnRpbWVvdXQgPT09ICdudW1iZXInKSB7XG4gICAgICBzZXRUaW1lb3V0KG5vdGUuY2xvc2UuYmluZChub3RlKSwgb3B0aW9ucy50aW1lb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm90ZTtcbiAgfVxufVxuIl19