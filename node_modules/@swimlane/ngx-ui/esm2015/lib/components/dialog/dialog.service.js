import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { InjectionService } from '../../services/injection/injection.service';
import { InjectionRegistryService } from '../../services/injection-registry/injection-registry.service';
import { OverlayService } from '../overlay/overlay.service';
import { DialogComponent } from './dialog.component';
let DialogService = class DialogService extends InjectionRegistryService {
    constructor(injectionService, overlayService) {
        super(injectionService);
        this.injectionService = injectionService;
        this.overlayService = overlayService;
        this.defaults = {
            inputs: {
                zIndex: 991,
                closeOnBlur: true,
                closeOnEscape: true,
                closeButton: true,
                showOverlay: true,
                visible: true
            }
        };
        this.type = DialogComponent;
        this.zIndex = 995;
    }
    create(options) {
        const component = super.create(options);
        this.createSubscriptions(component);
        return component;
    }
    destroy(component) {
        const hasOverlay = component.instance.showOverlay;
        this.zIndex = this.zIndex - 2;
        if (hasOverlay) {
            this.overlayService.removeTriggerComponent(component);
        }
        setTimeout(() => {
            super.destroy(component);
        });
    }
    createSubscriptions(triggerComponent) {
        let closeSub;
        let overlaySub;
        const kill = (c) => {
            /* istanbul ignore if */
            if (c !== triggerComponent) {
                return;
            }
            closeSub.unsubscribe();
            if (overlaySub)
                overlaySub.unsubscribe();
            this.destroy(triggerComponent);
        };
        closeSub = triggerComponent.instance.close.subscribe(kill.bind(this, triggerComponent));
        const zIndex = this.zIndex;
        if (triggerComponent.instance.showOverlay) {
            setTimeout(() => {
                this.overlayService.show({
                    triggerComponent,
                    zIndex
                });
                if (triggerComponent.instance.closeOnBlur) {
                    overlaySub = this.overlayService.click.subscribe(kill);
                }
            });
        }
    }
    assignDefaults(options) {
        options = super.assignDefaults(options);
        /* istanbul ignore else */
        if (!options.zIndex) {
            this.zIndex = this.overlayService.instance ? this.overlayService.instance.zIndex + 3 : this.zIndex + 2;
            options.inputs.zIndex = this.zIndex;
        }
        return options;
    }
};
DialogService.ctorParameters = () => [
    { type: InjectionService },
    { type: OverlayService }
];
DialogService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [InjectionService, OverlayService])
], DialogService);
export { DialogService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZGlhbG9nL2RpYWxvZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzlFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhEQUE4RCxDQUFDO0FBQ3hHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJckQsSUFBYSxhQUFhLEdBQTFCLE1BQWEsYUFBbUMsU0FBUSx3QkFBMkI7SUFlakYsWUFBcUIsZ0JBQWtDLEVBQVcsY0FBOEI7UUFDOUYsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFETCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQVcsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBZHZGLGFBQVEsR0FBa0I7WUFDakMsTUFBTSxFQUFFO2dCQUNOLE1BQU0sRUFBRSxHQUFHO2dCQUNYLFdBQVcsRUFBRSxJQUFJO2dCQUNqQixhQUFhLEVBQUUsSUFBSTtnQkFDbkIsV0FBVyxFQUFFLElBQUk7Z0JBQ2pCLFdBQVcsRUFBRSxJQUFJO2dCQUNqQixPQUFPLEVBQUUsSUFBSTthQUNkO1NBQ0YsQ0FBQztRQUVRLFNBQUksR0FBUSxlQUFlLENBQUM7UUFDOUIsV0FBTSxHQUFXLEdBQUcsQ0FBQztJQUk3QixDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQXNCO1FBQzNCLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCxPQUFPLENBQUMsU0FBYztRQUNwQixNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztRQUNsRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksVUFBVSxFQUFFO1lBQ2QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN2RDtRQUVELFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELG1CQUFtQixDQUFDLGdCQUFxQjtRQUN2QyxJQUFJLFFBQXNCLENBQUM7UUFDM0IsSUFBSSxVQUF3QixDQUFDO1FBRTdCLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBTSxFQUFFLEVBQUU7WUFDdEIsd0JBQXdCO1lBQ3hCLElBQUksQ0FBQyxLQUFLLGdCQUFnQixFQUFFO2dCQUMxQixPQUFPO2FBQ1I7WUFFRCxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDdkIsSUFBSSxVQUFVO2dCQUFFLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDO1FBRUYsUUFBUSxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUN4RixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRTNCLElBQUksZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRTtZQUN6QyxVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNkLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO29CQUN2QixnQkFBZ0I7b0JBQ2hCLE1BQU07aUJBQ1AsQ0FBQyxDQUFDO2dCQUNILElBQUksZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRTtvQkFDekMsVUFBVSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDeEQ7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVELGNBQWMsQ0FBQyxPQUFzQjtRQUNuQyxPQUFPLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV4QywwQkFBMEI7UUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFFdkcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNyQztRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7Q0FDRixDQUFBOztZQWxFd0MsZ0JBQWdCO1lBQTJCLGNBQWM7O0FBZnJGLGFBQWE7SUFEekIsVUFBVSxFQUFFO3FDQWdCNEIsZ0JBQWdCLEVBQTJCLGNBQWM7R0FmckYsYUFBYSxDQWlGekI7U0FqRlksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBJbmplY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvaW5qZWN0aW9uL2luamVjdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEluamVjdGlvblJlZ2lzdHJ5U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2luamVjdGlvbi1yZWdpc3RyeS9pbmplY3Rpb24tcmVnaXN0cnkuc2VydmljZSc7XG5pbXBvcnQgeyBPdmVybGF5U2VydmljZSB9IGZyb20gJy4uL292ZXJsYXkvb3ZlcmxheS5zZXJ2aWNlJztcbmltcG9ydCB7IERpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4vZGlhbG9nLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEaWFsb2dPcHRpb25zIH0gZnJvbSAnLi9kaWFsb2ctb3B0aW9ucy5pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGlhbG9nU2VydmljZTxUID0gRGlhbG9nQ29tcG9uZW50PiBleHRlbmRzIEluamVjdGlvblJlZ2lzdHJ5U2VydmljZTxUPiB7XG4gIHJlYWRvbmx5IGRlZmF1bHRzOiBEaWFsb2dPcHRpb25zID0ge1xuICAgIGlucHV0czoge1xuICAgICAgekluZGV4OiA5OTEsXG4gICAgICBjbG9zZU9uQmx1cjogdHJ1ZSxcbiAgICAgIGNsb3NlT25Fc2NhcGU6IHRydWUsXG4gICAgICBjbG9zZUJ1dHRvbjogdHJ1ZSxcbiAgICAgIHNob3dPdmVybGF5OiB0cnVlLFxuICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgIH1cbiAgfTtcblxuICBwcm90ZWN0ZWQgdHlwZTogYW55ID0gRGlhbG9nQ29tcG9uZW50O1xuICBwcml2YXRlIHpJbmRleDogbnVtYmVyID0gOTk1O1xuXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGluamVjdGlvblNlcnZpY2U6IEluamVjdGlvblNlcnZpY2UsIHJlYWRvbmx5IG92ZXJsYXlTZXJ2aWNlOiBPdmVybGF5U2VydmljZSkge1xuICAgIHN1cGVyKGluamVjdGlvblNlcnZpY2UpO1xuICB9XG5cbiAgY3JlYXRlKG9wdGlvbnM6IERpYWxvZ09wdGlvbnMpIHtcbiAgICBjb25zdCBjb21wb25lbnQgPSBzdXBlci5jcmVhdGUob3B0aW9ucyk7XG4gICAgdGhpcy5jcmVhdGVTdWJzY3JpcHRpb25zKGNvbXBvbmVudCk7XG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgfVxuXG4gIGRlc3Ryb3koY29tcG9uZW50OiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCBoYXNPdmVybGF5ID0gY29tcG9uZW50Lmluc3RhbmNlLnNob3dPdmVybGF5O1xuICAgIHRoaXMuekluZGV4ID0gdGhpcy56SW5kZXggLSAyO1xuXG4gICAgaWYgKGhhc092ZXJsYXkpIHtcbiAgICAgIHRoaXMub3ZlcmxheVNlcnZpY2UucmVtb3ZlVHJpZ2dlckNvbXBvbmVudChjb21wb25lbnQpO1xuICAgIH1cblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc3VwZXIuZGVzdHJveShjb21wb25lbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlU3Vic2NyaXB0aW9ucyh0cmlnZ2VyQ29tcG9uZW50OiBhbnkpOiB2b2lkIHtcbiAgICBsZXQgY2xvc2VTdWI6IFN1YnNjcmlwdGlvbjtcbiAgICBsZXQgb3ZlcmxheVN1YjogU3Vic2NyaXB0aW9uO1xuXG4gICAgY29uc3Qga2lsbCA9IChjOiBhbnkpID0+IHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGMgIT09IHRyaWdnZXJDb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjbG9zZVN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgaWYgKG92ZXJsYXlTdWIpIG92ZXJsYXlTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMuZGVzdHJveSh0cmlnZ2VyQ29tcG9uZW50KTtcbiAgICB9O1xuXG4gICAgY2xvc2VTdWIgPSB0cmlnZ2VyQ29tcG9uZW50Lmluc3RhbmNlLmNsb3NlLnN1YnNjcmliZShraWxsLmJpbmQodGhpcywgdHJpZ2dlckNvbXBvbmVudCkpO1xuICAgIGNvbnN0IHpJbmRleCA9IHRoaXMuekluZGV4O1xuXG4gICAgaWYgKHRyaWdnZXJDb21wb25lbnQuaW5zdGFuY2Uuc2hvd092ZXJsYXkpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLm92ZXJsYXlTZXJ2aWNlLnNob3coe1xuICAgICAgICAgIHRyaWdnZXJDb21wb25lbnQsXG4gICAgICAgICAgekluZGV4XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodHJpZ2dlckNvbXBvbmVudC5pbnN0YW5jZS5jbG9zZU9uQmx1cikge1xuICAgICAgICAgIG92ZXJsYXlTdWIgPSB0aGlzLm92ZXJsYXlTZXJ2aWNlLmNsaWNrLnN1YnNjcmliZShraWxsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYXNzaWduRGVmYXVsdHMob3B0aW9uczogRGlhbG9nT3B0aW9ucyk6IERpYWxvZ09wdGlvbnMge1xuICAgIG9wdGlvbnMgPSBzdXBlci5hc3NpZ25EZWZhdWx0cyhvcHRpb25zKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKCFvcHRpb25zLnpJbmRleCkge1xuICAgICAgdGhpcy56SW5kZXggPSB0aGlzLm92ZXJsYXlTZXJ2aWNlLmluc3RhbmNlID8gdGhpcy5vdmVybGF5U2VydmljZS5pbnN0YW5jZS56SW5kZXggKyAzIDogdGhpcy56SW5kZXggKyAyO1xuXG4gICAgICBvcHRpb25zLmlucHV0cy56SW5kZXggPSB0aGlzLnpJbmRleDtcbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxufVxuIl19