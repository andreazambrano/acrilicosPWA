import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { InjectionService } from '../../../services/injection/injection.service';
import { OverlayService } from '../../overlay/overlay.service';
import { DialogService } from '../dialog.service';
import { AlertComponent } from './alert.component';
import { AlertTypes } from './alert-types.enum';
import { AlertStyles } from './alert-styles.enum';
let AlertService = class AlertService extends DialogService {
    constructor(injectionService, overlayService) {
        super(injectionService, overlayService);
        this.injectionService = injectionService;
        this.overlayService = overlayService;
        this.defaults = {
            inputs: {
                zIndex: 991,
                closeOnBlur: false,
                closeOnEscape: false,
                closeButton: false,
                showOverlay: true,
                visible: true
            }
        };
        this.type = AlertComponent;
        this.clsMap = {
            [AlertStyles.Danger]: 'ngx-alert-danger',
            [AlertStyles.Warning]: 'ngx-alert-warning',
            [AlertStyles.Info]: 'ngx-alert-info'
        };
    }
    alert(options) {
        return this.createDialog(options, AlertTypes.Alert);
    }
    confirm(options) {
        return this.createDialog(options, AlertTypes.Confirm);
    }
    prompt(options) {
        return this.createDialog(options, AlertTypes.Prompt);
    }
    createDialog(options, type) {
        const subject = new Subject();
        const { title, content, longPress } = options;
        const cssClass = 'ngx-alert-dialog ' + this.clsMap[options.style];
        const component = this.create({
            title,
            content,
            longPress,
            type,
            cssClass
        });
        const list = component.instance.ok.subscribe((data) => {
            subject.next({
                type: 'ok',
                data
            });
            subject.complete();
            list.unsubscribe();
            list2.unsubscribe();
        });
        const list2 = component.instance.cancel.subscribe((data) => {
            subject.next({
                type: 'cancel',
                data
            });
            subject.complete();
            list.unsubscribe();
            list2.unsubscribe();
        });
        return subject;
    }
};
AlertService.ctorParameters = () => [
    { type: InjectionService },
    { type: OverlayService }
];
AlertService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [InjectionService, OverlayService])
], AlertService);
export { AlertService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9kaWFsb2cvYWxlcnQvYWxlcnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRS9CLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFJbEQsSUFBYSxZQUFZLEdBQXpCLE1BQWEsWUFBYSxTQUFRLGFBQTZCO0lBbUI3RCxZQUFxQixnQkFBa0MsRUFBVyxjQUE4QjtRQUM5RixLQUFLLENBQUMsZ0JBQWdCLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFEckIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUFXLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQWxCdkYsYUFBUSxHQUFrQjtZQUNqQyxNQUFNLEVBQUU7Z0JBQ04sTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsV0FBVyxFQUFFLEtBQUs7Z0JBQ2xCLGFBQWEsRUFBRSxLQUFLO2dCQUNwQixXQUFXLEVBQUUsS0FBSztnQkFDbEIsV0FBVyxFQUFFLElBQUk7Z0JBQ2pCLE9BQU8sRUFBRSxJQUFJO2FBQ2Q7U0FDRixDQUFDO1FBRVEsU0FBSSxHQUFRLGNBQWMsQ0FBQztRQUNwQixXQUFNLEdBQUc7WUFDeEIsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsa0JBQWtCO1lBQ3hDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFLG1CQUFtQjtZQUMxQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxnQkFBZ0I7U0FDckMsQ0FBQztJQUlGLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBc0I7UUFDMUIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUFzQjtRQUM1QixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQXNCO1FBQzNCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFTyxZQUFZLENBQUMsT0FBc0IsRUFBRSxJQUFnQjtRQUMzRCxNQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBK0IsQ0FBQztRQUMzRCxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDOUMsTUFBTSxRQUFRLEdBQUcsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFbEUsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUM1QixLQUFLO1lBQ0wsT0FBTztZQUNQLFNBQVM7WUFDVCxJQUFJO1lBQ0osUUFBUTtTQUNULENBQUMsQ0FBQztRQUVILE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQW1CLEVBQUUsRUFBRTtZQUNuRSxPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUNYLElBQUksRUFBRSxJQUFJO2dCQUNWLElBQUk7YUFDTCxDQUFDLENBQUM7WUFFSCxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ25CLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQW1CLEVBQUUsRUFBRTtZQUN4RSxPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUNYLElBQUksRUFBRSxRQUFRO2dCQUNkLElBQUk7YUFDTCxDQUFDLENBQUM7WUFFSCxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ25CLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7Q0FDRixDQUFBOztZQXJEd0MsZ0JBQWdCO1lBQTJCLGNBQWM7O0FBbkJyRixZQUFZO0lBRHhCLFVBQVUsRUFBRTtxQ0FvQjRCLGdCQUFnQixFQUEyQixjQUFjO0dBbkJyRixZQUFZLENBd0V4QjtTQXhFWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBJbmplY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvaW5qZWN0aW9uL2luamVjdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IE92ZXJsYXlTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vb3ZlcmxheS9vdmVybGF5LnNlcnZpY2UnO1xuaW1wb3J0IHsgRGlhbG9nU2VydmljZSB9IGZyb20gJy4uL2RpYWxvZy5zZXJ2aWNlJztcbmltcG9ydCB7IEFsZXJ0Q29tcG9uZW50IH0gZnJvbSAnLi9hbGVydC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQWxlcnRUeXBlcyB9IGZyb20gJy4vYWxlcnQtdHlwZXMuZW51bSc7XG5pbXBvcnQgeyBBbGVydFN0eWxlcyB9IGZyb20gJy4vYWxlcnQtc3R5bGVzLmVudW0nO1xuaW1wb3J0IHsgRGlhbG9nT3B0aW9ucyB9IGZyb20gJy4uL2RpYWxvZy1vcHRpb25zLmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBbGVydFNlcnZpY2UgZXh0ZW5kcyBEaWFsb2dTZXJ2aWNlPEFsZXJ0Q29tcG9uZW50PiB7XG4gIHJlYWRvbmx5IGRlZmF1bHRzOiBEaWFsb2dPcHRpb25zID0ge1xuICAgIGlucHV0czoge1xuICAgICAgekluZGV4OiA5OTEsXG4gICAgICBjbG9zZU9uQmx1cjogZmFsc2UsXG4gICAgICBjbG9zZU9uRXNjYXBlOiBmYWxzZSxcbiAgICAgIGNsb3NlQnV0dG9uOiBmYWxzZSxcbiAgICAgIHNob3dPdmVybGF5OiB0cnVlLFxuICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgIH1cbiAgfTtcblxuICBwcm90ZWN0ZWQgdHlwZTogYW55ID0gQWxlcnRDb21wb25lbnQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2xzTWFwID0ge1xuICAgIFtBbGVydFN0eWxlcy5EYW5nZXJdOiAnbmd4LWFsZXJ0LWRhbmdlcicsXG4gICAgW0FsZXJ0U3R5bGVzLldhcm5pbmddOiAnbmd4LWFsZXJ0LXdhcm5pbmcnLFxuICAgIFtBbGVydFN0eWxlcy5JbmZvXTogJ25neC1hbGVydC1pbmZvJ1xuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGluamVjdGlvblNlcnZpY2U6IEluamVjdGlvblNlcnZpY2UsIHJlYWRvbmx5IG92ZXJsYXlTZXJ2aWNlOiBPdmVybGF5U2VydmljZSkge1xuICAgIHN1cGVyKGluamVjdGlvblNlcnZpY2UsIG92ZXJsYXlTZXJ2aWNlKTtcbiAgfVxuXG4gIGFsZXJ0KG9wdGlvbnM6IERpYWxvZ09wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVEaWFsb2cob3B0aW9ucywgQWxlcnRUeXBlcy5BbGVydCk7XG4gIH1cblxuICBjb25maXJtKG9wdGlvbnM6IERpYWxvZ09wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVEaWFsb2cob3B0aW9ucywgQWxlcnRUeXBlcy5Db25maXJtKTtcbiAgfVxuXG4gIHByb21wdChvcHRpb25zOiBEaWFsb2dPcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlRGlhbG9nKG9wdGlvbnMsIEFsZXJ0VHlwZXMuUHJvbXB0KTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlRGlhbG9nKG9wdGlvbnM6IERpYWxvZ09wdGlvbnMsIHR5cGU6IEFsZXJ0VHlwZXMpIHtcbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3IFN1YmplY3Q8eyB0eXBlOiBzdHJpbmc7IGRhdGE6IGFueSB9PigpO1xuICAgIGNvbnN0IHsgdGl0bGUsIGNvbnRlbnQsIGxvbmdQcmVzcyB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBjc3NDbGFzcyA9ICduZ3gtYWxlcnQtZGlhbG9nICcgKyB0aGlzLmNsc01hcFtvcHRpb25zLnN0eWxlXTtcblxuICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuY3JlYXRlKHtcbiAgICAgIHRpdGxlLFxuICAgICAgY29udGVudCxcbiAgICAgIGxvbmdQcmVzcyxcbiAgICAgIHR5cGUsXG4gICAgICBjc3NDbGFzc1xuICAgIH0pO1xuXG4gICAgY29uc3QgbGlzdCA9IGNvbXBvbmVudC5pbnN0YW5jZS5vay5zdWJzY3JpYmUoKGRhdGE6IHsgZGF0YTogYW55IH0pID0+IHtcbiAgICAgIHN1YmplY3QubmV4dCh7XG4gICAgICAgIHR5cGU6ICdvaycsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pO1xuXG4gICAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgICBsaXN0LnVuc3Vic2NyaWJlKCk7XG4gICAgICBsaXN0Mi51bnN1YnNjcmliZSgpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgbGlzdDIgPSBjb21wb25lbnQuaW5zdGFuY2UuY2FuY2VsLnN1YnNjcmliZSgoZGF0YTogeyBkYXRhOiBhbnkgfSkgPT4ge1xuICAgICAgc3ViamVjdC5uZXh0KHtcbiAgICAgICAgdHlwZTogJ2NhbmNlbCcsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pO1xuXG4gICAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgICBsaXN0LnVuc3Vic2NyaWJlKCk7XG4gICAgICBsaXN0Mi51bnN1YnNjcmliZSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHN1YmplY3Q7XG4gIH1cbn1cbiJdfQ==