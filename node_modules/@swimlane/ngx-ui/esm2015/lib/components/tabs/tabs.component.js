import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, ContentChildren, QueryList, EventEmitter, ViewEncapsulation, AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TabComponent } from './tab.component';
let TabsComponent = class TabsComponent {
    constructor(_cdr) {
        this._cdr = _cdr;
        this.selectTab = new EventEmitter();
        // For backwards compat... user selectTab instead.
        this.select = this.selectTab;
        this._destroy$ = new Subject();
    }
    get index() {
        const tabs = this.tabs.toArray();
        return tabs.findIndex(tab => tab.active);
    }
    ngAfterContentInit() {
        const tabs = this.tabs.toArray();
        const actives = this.tabs.filter(t => t.active);
        if (actives.length > 1) {
            console.error(`Multiple active tabs set 'active'`);
        }
        else if (!actives.length && tabs.length) {
            setTimeout(() => {
                tabs[0].active = true;
                tabs[0].detectChanges();
                this._cdr.markForCheck();
            });
        }
        this.tabs.changes.pipe(takeUntil(this._destroy$)).subscribe(() => this._cdr.markForCheck());
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    tabClicked(activeTab) {
        this.tabs.forEach(tab => (tab.active = false));
        activeTab.active = true;
        this.tabs.forEach(tab => tab.detectChanges());
        this._cdr.markForCheck();
        this.selectTab.emit(activeTab);
    }
    move(offset) {
        const tabs = this.tabs.toArray();
        for (let i = this.index + offset; i < tabs.length && i >= 0; i += offset) {
            const tab = tabs[i];
            if (tab && !tab.disabled) {
                this.tabClicked(tabs[i]);
                return;
            }
        }
    }
    next() {
        this.move(1);
    }
    prev() {
        this.move(-1);
    }
};
TabsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TabsComponent.prototype, "vertical", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TabsComponent.prototype, "selectTab", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TabsComponent.prototype, "select", void 0);
__decorate([
    ContentChildren(TabComponent),
    __metadata("design:type", QueryList)
], TabsComponent.prototype, "tabs", void 0);
TabsComponent = __decorate([
    Component({
        exportAs: 'ngxTabs',
        selector: 'ngx-tabs',
        template: "<section>\n  <ul class=\"ngx-tabs-list list-reset\" [class.tabs-vertical]=\"vertical\" [class.tabs-horizontal]=\"!vertical\">\n    <li *ngFor=\"let tab of tabs\" class=\"ngx-tab\" [class.disabled]=\"tab.disabled\" [class.active]=\"tab.active\">\n      <button (click)=\"tabClicked(tab)\" [disabled]=\"tab.disabled\">\n        <ng-container *ngTemplateOutlet=\"tab.labelTemplate; context: { $implicit: tab }\"> </ng-container>\n      </button>\n    </li>\n  </ul>\n  <div class=\"ngx-tab-content\">\n    <ng-content></ng-content>\n  </div>\n</section>\n",
        host: {
            class: 'ngx-tabs'
        },
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [".ngx-tabs{margin-bottom:2em;display:block}.ngx-tabs .ngx-tabs-list{display:block;border-bottom:2px solid #313847}.ngx-tabs .ngx-tabs-list li{display:inline-block}.ngx-tabs .ngx-tabs-list li.active button,.ngx-tabs .ngx-tabs-list li.active button:focus,.ngx-tabs .ngx-tabs-list li.active button:hover{color:#cfcfcf;border-width:0}.ngx-tabs .ngx-tabs-list li.active button:not([disabled])::after,.ngx-tabs .ngx-tabs-list li:hover button:not([disabled])::after{-webkit-transform:scale(1);transform:scale(1)}.ngx-tabs .ngx-tabs-list li button{border:none;color:#cdd2dd;background:0 0;outline:0;box-shadow:none;box-sizing:border-box;display:inline-block;margin:0;padding:.35em .75em;position:relative;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;font:inherit;font-size:1em;bottom:-1px}.ngx-tabs .ngx-tabs-list li button:not([disabled]):hover{border:none;color:#cfcfcf;background:0 0;opacity:1}.ngx-tabs .ngx-tabs-list li button::after{content:'';background:#1483ff;height:2px;position:absolute;width:100%;left:0;bottom:-1px;-webkit-transition:250ms;transition:250ms;-webkit-transform:scale(0);transform:scale(0);color:#cfcfcf}.ngx-tabs .ngx-tab-content{padding:10px}"]
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef])
], TabsComponent);
export { TabsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFicy90YWJzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLGVBQWUsRUFDZixTQUFTLEVBQ1QsWUFBWSxFQUNaLGlCQUFpQixFQUNqQixnQkFBZ0IsRUFDaEIsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBYS9DLElBQWEsYUFBYSxHQUExQixNQUFhLGFBQWE7SUFnQnhCLFlBQTZCLElBQXVCO1FBQXZCLFNBQUksR0FBSixJQUFJLENBQW1CO1FBYjFDLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3pDLGtEQUFrRDtRQUN4QyxXQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQVNqQixjQUFTLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQUVNLENBQUM7SUFQeEQsSUFBSSxLQUFLO1FBQ1AsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNqQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQU1ELGtCQUFrQjtRQUNoQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJ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U0FDbEI7UUFDRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtRQUVyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7S0FDaEQsQ0FBQztxQ0FpQm1DLGlCQUFpQjtHQWhCekMsYUFBYSxDQW9FekI7U0FwRVksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBRdWVyeUxpc3QsXG4gIEV2ZW50RW1pdHRlcixcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgT25EZXN0cm95XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBUYWJDb21wb25lbnQgfSBmcm9tICcuL3RhYi5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgZXhwb3J0QXM6ICduZ3hUYWJzJyxcbiAgc2VsZWN0b3I6ICduZ3gtdGFicycsXG4gIHRlbXBsYXRlVXJsOiAnLi90YWJzLmNvbXBvbmVudC5odG1sJyxcbiAgaG9zdDoge1xuICAgIGNsYXNzOiAnbmd4LXRhYnMnXG4gIH0sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIHN0eWxlVXJsczogWycuL3RhYnMuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgVGFic0NvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIHZlcnRpY2FsOiBib29sZWFuO1xuXG4gIEBPdXRwdXQoKSBzZWxlY3RUYWIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIC8vIEZvciBiYWNrd2FyZHMgY29tcGF0Li4uIHVzZXIgc2VsZWN0VGFiIGluc3RlYWQuXG4gIEBPdXRwdXQoKSBzZWxlY3QgPSB0aGlzLnNlbGVjdFRhYjtcblxuICBAQ29udGVudENoaWxkcmVuKFRhYkNvbXBvbmVudCkgcmVhZG9ubHkgdGFiczogUXVlcnlMaXN0PFRhYkNvbXBvbmVudD47XG5cbiAgZ2V0IGluZGV4KCk6IG51bWJlciB7XG4gICAgY29uc3QgdGFicyA9IHRoaXMudGFicy50b0FycmF5KCk7XG4gICAgcmV0dXJuIHRhYnMuZmluZEluZGV4KHRhYiA9PiB0YWIuYWN0aXZlKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2Rlc3Ryb3kkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9jZHI6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICBjb25zdCB0YWJzID0gdGhpcy50YWJzLnRvQXJyYXkoKTtcbiAgICBjb25zdCBhY3RpdmVzID0gdGhpcy50YWJzLmZpbHRlcih0ID0+IHQuYWN0aXZlKTtcblxuICAgIGlmIChhY3RpdmVzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE11bHRpcGxlIGFjdGl2ZSB0YWJzIHNldCAnYWN0aXZlJ2ApO1xuICAgIH0gZWxzZSBpZiAoIWFjdGl2ZXMubGVuZ3RoICYmIHRhYnMubGVuZ3RoKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGFic1swXS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0YWJzWzBdLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy50YWJzLmNoYW5nZXMucGlwZSh0YWtlVW50aWwodGhpcy5fZGVzdHJveSQpKS5zdWJzY3JpYmUoKCkgPT4gdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2Rlc3Ryb3kkLm5leHQoKTtcbiAgICB0aGlzLl9kZXN0cm95JC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgdGFiQ2xpY2tlZChhY3RpdmVUYWI6IFRhYkNvbXBvbmVudCk6IHZvaWQge1xuICAgIHRoaXMudGFicy5mb3JFYWNoKHRhYiA9PiAodGFiLmFjdGl2ZSA9IGZhbHNlKSk7XG5cbiAgICBhY3RpdmVUYWIuYWN0aXZlID0gdHJ1ZTtcbiAgICB0aGlzLnRhYnMuZm9yRWFjaCh0YWIgPT4gdGFiLmRldGVjdENoYW5nZXMoKSk7XG4gICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuXG4gICAgdGhpcy5zZWxlY3RUYWIuZW1pdChhY3RpdmVUYWIpO1xuICB9XG5cbiAgbW92ZShvZmZzZXQ6IG51bWJlcikge1xuICAgIGNvbnN0IHRhYnMgPSB0aGlzLnRhYnMudG9BcnJheSgpO1xuICAgIGZvciAobGV0IGkgPSB0aGlzLmluZGV4ICsgb2Zmc2V0OyBpIDwgdGFicy5sZW5ndGggJiYgaSA+PSAwOyBpICs9IG9mZnNldCkge1xuICAgICAgY29uc3QgdGFiID0gdGFic1tpXTtcbiAgICAgIGlmICh0YWIgJiYgIXRhYi5kaXNhYmxlZCkge1xuICAgICAgICB0aGlzLnRhYkNsaWNrZWQodGFic1tpXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuZXh0KCk6IHZvaWQge1xuICAgIHRoaXMubW92ZSgxKTtcbiAgfVxuXG4gIHByZXYoKTogdm9pZCB7XG4gICAgdGhpcy5tb3ZlKC0xKTtcbiAgfVxufVxuIl19