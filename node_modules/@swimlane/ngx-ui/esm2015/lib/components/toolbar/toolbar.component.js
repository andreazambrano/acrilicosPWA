import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, EventEmitter, ViewChild, ViewEncapsulation, Renderer2, ElementRef, ChangeDetectionStrategy } from '@angular/core';
import { ToolbarTitleDirective } from './toolbar-title.directive';
import { ToolbarContentDirective } from './toolbar-content.directive';
let ToolbarComponent = class ToolbarComponent {
    constructor(renderer, elRef) {
        this.renderer = renderer;
        this.elRef = elRef;
        this.menu = [];
        this.menuClick = new EventEmitter();
    }
    get toolbarItems() {
        return this.menu.filter(m => {
            return !m.dropdown;
        });
    }
    get dropdownItems() {
        return this.menu.filter(m => {
            return m.dropdown;
        });
    }
    onMenuClicked(item, $event) {
        if (item.click) {
            item.click($event);
        }
    }
    ngOnInit() {
        // backwards compatibility
        if (this.title) {
            this.mainTitle = this.title;
            this.renderer.removeAttribute(this.elRef.nativeElement, 'title');
        }
    }
};
ToolbarComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], ToolbarComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ToolbarComponent.prototype, "mainTitle", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ToolbarComponent.prototype, "subtitle", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], ToolbarComponent.prototype, "menu", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], ToolbarComponent.prototype, "menuClick", void 0);
__decorate([
    ViewChild(ToolbarTitleDirective),
    __metadata("design:type", ToolbarTitleDirective)
], ToolbarComponent.prototype, "toolbarTitle", void 0);
__decorate([
    ViewChild(ToolbarContentDirective),
    __metadata("design:type", ToolbarContentDirective)
], ToolbarComponent.prototype, "toolbarContent", void 0);
ToolbarComponent = __decorate([
    Component({
        selector: 'ngx-toolbar',
        template: "<header class=\"flex-container\" fxLayout=\"row\" fxLayoutWrap=\"nowrap\" fxFill fxLayoutGap=\"5px\">\n  <div class=\"ngx-toolbar-title-col\" fxFlex>\n    <ng-content *ngIf=\"!mainTitle\" select=\"ngx-toolbar-title\"></ng-content>\n    <h2 class=\"ngx-toolbar-title\" *ngIf=\"mainTitle\">\n      {{ mainTitle }}\n      <small *ngIf=\"subtitle\">{{ subtitle }}</small>\n    </h2>\n  </div>\n  <div class=\"ngx-toolbar-content-col\" fxFlex>\n    <ng-content *ngIf=\"!menu.length\" select=\"ngx-toolbar-content\"></ng-content>\n    <ul class=\"horizontal-list ngx-toolbar-menu\" *ngIf=\"menu.length\">\n      <li *ngFor=\"let item of toolbarItems\">\n        <button type=\"button\" [disabled]=\"item.disabled\" (click)=\"onMenuClicked(item, $event)\">\n          {{ item.label }}\n        </button>\n      </li>\n      <li *ngIf=\"dropdownItems.length\">\n        <ngx-dropdown>\n          <ngx-dropdown-toggle>\n            <button type=\"button\">\n              ...\n            </button>\n          </ngx-dropdown-toggle>\n          <ngx-dropdown-menu class=\"align-right\">\n            <ul class=\"vertical-list\">\n              <li *ngFor=\"let item of dropdownItems\">\n                <button type=\"button\" (click)=\"onMenuClicked(item, $event)\">\n                  {{ item.label }}\n                </button>\n              </li>\n            </ul>\n          </ngx-dropdown-menu>\n        </ngx-dropdown>\n      </li>\n    </ul>\n  </div>\n</header>\n",
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        host: {
            class: 'ngx-toolbar'
        },
        styles: [".ngx-toolbar{display:block;height:50px;line-height:50px;color:#a0aabe;background:#1c2029;width:100%;font-size:.8rem;padding:0 20px!important}.ngx-toolbar a{color:#a0aabe}.ngx-toolbar .ngx-toolbar-title-col{overflow:hidden}.ngx-toolbar .ngx-toolbar-title{margin:0;font-weight:500;text-overflow:ellipsis;overflow:hidden;width:100%;white-space:nowrap}.ngx-toolbar .ngx-toolbar-title small{color:#5a6884;font-size:.9rem;line-height:50px;vertical-align:top}.ngx-toolbar .ngx-toolbar-menu button{color:#a0aabe}.ngx-toolbar .ngx-toolbar-content-col{text-align:right}.ngx-toolbar.page-toolbar{box-shadow:0 1px 5px 0 rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.12)}"]
    }),
    __metadata("design:paramtypes", [Renderer2, ElementRef])
], ToolbarComponent);
export { ToolbarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdG9vbGJhci90b29sYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixTQUFTLEVBQ1QsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsdUJBQXVCLEVBQ3hCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBYXRFLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0lBdUIzQixZQUFvQixRQUFtQixFQUFVLEtBQWlCO1FBQTlDLGFBQVEsR0FBUixRQUFRLENBQVc7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFZO1FBbkJ6RCxTQUFJLEdBQXNCLEVBQUUsQ0FBQztRQUU1QixjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQWlCNEIsQ0FBQztJQVp0RSxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzFCLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELElBQUksYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDMUIsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUlELGFBQWEsQ0FBQyxJQUFxQixFQUFFLE1BQWE7UUFDaEQsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwQjtJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sMEJBQTBCO1FBQzFCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUNsRTtJQUNILENBQUM7Q0FDRixDQUFBOztZQWYrQixTQUFTO1lBQWlCLFVBQVU7O0FBdEJ6RDtJQUFSLEtBQUssRUFBRTs7K0NBQWU7QUFDZDtJQUFSLEtBQUssRUFBRTs7bURBQW1CO0FBQ2xCO0lBQVIsS0FBSyxFQUFFOztrREFBa0I7QUFDakI7SUFBUixLQUFLLEVBQUU7OzhDQUE4QjtBQUU1QjtJQUFULE1BQU0sRUFBRTs7bURBQWdDO0FBRVA7SUFBakMsU0FBUyxDQUFDLHFCQUFxQixDQUFDOzhCQUFlLHFCQUFxQjtzREFBQztBQUNsQztJQUFuQyxTQUFTLENBQUMsdUJBQXVCLENBQUM7OEJBQWlCLHVCQUF1Qjt3REFBQztBQVRqRSxnQkFBZ0I7SUFWNUIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGFBQWE7UUFDdkIsbzhDQUF1QztRQUN2QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtRQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtRQUUvQyxJQUFJLEVBQUU7WUFDSixLQUFLLEVBQUUsYUFBYTtTQUNyQjs7S0FDRixDQUFDO3FDQXdCOEIsU0FBUyxFQUFpQixVQUFVO0dBdkJ2RCxnQkFBZ0IsQ0FzQzVCO1NBdENZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBWaWV3Q2hpbGQsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBSZW5kZXJlcjIsXG4gIEVsZW1lbnRSZWYsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBUb29sYmFyVGl0bGVEaXJlY3RpdmUgfSBmcm9tICcuL3Rvb2xiYXItdGl0bGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IFRvb2xiYXJDb250ZW50RGlyZWN0aXZlIH0gZnJvbSAnLi90b29sYmFyLWNvbnRlbnQuZGlyZWN0aXZlJztcbmltcG9ydCB7IFRvb2xiYXJNZW51SXRlbSB9IGZyb20gJy4vdG9vbGJhci1tZW51LWl0ZW0uaW50ZXJmYWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LXRvb2xiYXInLFxuICB0ZW1wbGF0ZVVybDogJy4vdG9vbGJhci5jb21wb25lbnQuaHRtbCcsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZVVybHM6IFsnLi90b29sYmFyLmNvbXBvbmVudC5zY3NzJ10sXG4gIGhvc3Q6IHtcbiAgICBjbGFzczogJ25neC10b29sYmFyJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIFRvb2xiYXJDb21wb25lbnQge1xuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xuICBASW5wdXQoKSBtYWluVGl0bGU6IHN0cmluZztcbiAgQElucHV0KCkgc3VidGl0bGU6IHN0cmluZztcbiAgQElucHV0KCkgbWVudTogVG9vbGJhck1lbnVJdGVtW10gPSBbXTtcblxuICBAT3V0cHV0KCkgbWVudUNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBWaWV3Q2hpbGQoVG9vbGJhclRpdGxlRGlyZWN0aXZlKSB0b29sYmFyVGl0bGU6IFRvb2xiYXJUaXRsZURpcmVjdGl2ZTtcbiAgQFZpZXdDaGlsZChUb29sYmFyQ29udGVudERpcmVjdGl2ZSkgdG9vbGJhckNvbnRlbnQ6IFRvb2xiYXJDb250ZW50RGlyZWN0aXZlO1xuXG4gIGdldCB0b29sYmFySXRlbXMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVudS5maWx0ZXIobSA9PiB7XG4gICAgICByZXR1cm4gIW0uZHJvcGRvd247XG4gICAgfSk7XG4gIH1cblxuICBnZXQgZHJvcGRvd25JdGVtcygpIHtcbiAgICByZXR1cm4gdGhpcy5tZW51LmZpbHRlcihtID0+IHtcbiAgICAgIHJldHVybiBtLmRyb3Bkb3duO1xuICAgIH0pO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBwcml2YXRlIGVsUmVmOiBFbGVtZW50UmVmKSB7fVxuXG4gIG9uTWVudUNsaWNrZWQoaXRlbTogVG9vbGJhck1lbnVJdGVtLCAkZXZlbnQ6IEV2ZW50KSB7XG4gICAgaWYgKGl0ZW0uY2xpY2spIHtcbiAgICAgIGl0ZW0uY2xpY2soJGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICAvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgIGlmICh0aGlzLnRpdGxlKSB7XG4gICAgICB0aGlzLm1haW5UaXRsZSA9IHRoaXMudGl0bGU7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQsICd0aXRsZScpO1xuICAgIH1cbiAgfVxufVxuIl19