import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, EventEmitter, ViewEncapsulation, forwardRef, ViewChild, TemplateRef, ChangeDetectionStrategy } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import moment from 'moment-timezone';
import { DialogService } from '../dialog/dialog.service';
import { DateTimeType } from './date-time-type.enum';
import { InputComponent } from '../input';
let nextId = 0;
const DATE_TIME_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => DateTimeComponent),
    multi: true
};
let DateTimeComponent = class DateTimeComponent {
    constructor(dialogService) {
        this.dialogService = dialogService;
        this.id = `datetime-${++nextId}`;
        this.placeholder = '';
        this.inputFormats = ['L', `LT`, 'L LT', moment.ISO_8601];
        this.change = new EventEmitter();
        this.displayValue = '';
        this.modes = ['millisecond', 'second', 'minute', 'hour', 'date', 'month', 'year'];
        this._disabled = false;
        this._autofocus = false;
        this.onTouchedCallback = () => {
            // placeholder
        };
        this.onChangeCallback = () => {
            // placeholder
        };
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(disabled) {
        this._disabled = coerceBooleanProperty(disabled);
    }
    get tabindex() {
        return this._tabindex;
    }
    set tabindex(tabindex) {
        this._tabindex = coerceNumberProperty(tabindex);
    }
    get autofocus() {
        return this._autofocus;
    }
    set autofocus(autofocus) {
        this._autofocus = coerceBooleanProperty(autofocus);
    }
    get inputType() {
        if (!this._inputType) {
            return DateTimeType.date;
        }
        return this._inputType;
    }
    set inputType(val) {
        this._inputType = val;
        this.displayValue = this.getDisplayValue();
    }
    get format() {
        if (!this._format) {
            if (this.inputType === DateTimeType.date) {
                return 'L';
            }
            else if (this.inputType === DateTimeType.datetime) {
                return 'L LT';
            }
            else {
                return 'LT';
            }
        }
        return this._format;
    }
    set format(val) {
        this._format = val;
        this.displayValue = this.getDisplayValue();
    }
    get value() {
        return this._value;
    }
    set value(val) {
        let date;
        let isSame;
        if (val) {
            date = this.parseDate(val);
            let sameDiff;
            if (this.precision) {
                sameDiff = this.precision;
            }
            else {
                sameDiff = this.inputType === DateTimeType.date ? 'day' : 'second';
            }
            isSame = this._value && date.isSame(this._value, sameDiff);
        }
        else {
            // if we have a val and had no val before, ensure
            // we set the property correctly even if its same
            isSame = val === this._value;
        }
        if (val && date) {
            this.validate(date);
        }
        this._value = date && date.isValid() ? date.toDate() : val;
        if (!isSame) {
            this.onChangeCallback(val);
            this.change.emit(val);
        }
    }
    ngOnDestroy() {
        this.close();
    }
    writeValue(val) {
        this.value = val;
        this.displayValue = this.getDisplayValue();
    }
    onBlur() {
        this.onTouchedCallback();
        const value = this.parseDate(this.value);
        if (this.validate(value)) {
            const displayValue = this.getDisplayValue();
            if (this.input.value !== displayValue) {
                this.input.value = displayValue;
            }
        }
    }
    open() {
        const value = moment(this._value);
        const isValid = value.isValid();
        this.setDialogDate(isValid ? value : new Date());
        this.dialog = this.dialogService.create({
            cssClass: 'ngx-date-time-dialog',
            template: this.calendarTpl,
            closeButton: false
        });
    }
    apply() {
        this.value = this.dialogModel.toDate();
        this.displayValue = this.getDisplayValue();
        this.close();
    }
    setDialogDate(date) {
        this.dialogModel = this.createMoment(date);
        this.hour = +this.dialogModel.format('hh');
        this.minute = this.dialogModel.format('mm');
        this.amPmVal = this.dialogModel.format('A');
    }
    minuteChanged(newVal) {
        this.dialogModel = this.dialogModel.clone().minute(newVal);
        this.minute = this.dialogModel.format('mm');
    }
    hourChanged(newVal) {
        newVal = +newVal % 12;
        if (this.amPmVal === 'PM') {
            newVal = 12 + newVal;
        }
        this.dialogModel = this.dialogModel.clone().hour(newVal);
        this.hour = +this.dialogModel.format('hh');
    }
    selectCurrent() {
        this.setDialogDate(new Date());
    }
    isCurrent() {
        const now = this.createMoment(new Date());
        if (this.inputType === 'time') {
            return now.hour() === this.dialogModel.hour() && now.minute() === this.dialogModel.minute();
        }
        return now.isSame(this.dialogModel, 'minute');
    }
    clear() {
        this.value = undefined;
        this.displayValue = this.getDisplayValue();
        this.close();
    }
    onAmPmChange(newVal) {
        const clone = this.dialogModel.clone();
        if (newVal === 'AM' && this.amPmVal === 'PM') {
            this.dialogModel = clone.subtract(12, 'h');
        }
        else if (newVal === 'PM' && this.amPmVal === 'AM') {
            this.dialogModel = clone.add(12, 'h');
        }
        this.amPmVal = this.dialogModel.format('A');
    }
    getDayDisabled(date) {
        if (!date)
            return false;
        const isBeforeMin = this.minDate && date.isBefore(this.parseDate(this.minDate));
        const isAfterMax = this.maxDate && date.isAfter(this.parseDate(this.maxDate));
        return isBeforeMin || isAfterMax;
    }
    isTimeDisabled(mode) {
        return this.modes.indexOf(`${this.precision}`) > this.modes.indexOf(`${mode}`);
    }
    inputChanged(val) {
        const date = this.parseDate(val);
        this.value = date.isValid() ? date.toDate() : val;
    }
    close() {
        if (!this.dialog)
            return;
        // tear down the dialog instance
        this.dialogService.destroy(this.dialog);
        const date = this.parseDate(this.value);
        this.validate(date);
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    roundTo(val, key) {
        /* istanbul ignore if */
        if (!key || !val) {
            return val;
        }
        val = val.clone();
        const idx = this.modes.indexOf(key);
        if (idx > 0) {
            this.modes.forEach((mode, index) => {
                if (index < idx) {
                    val = val[mode](mode === 'date' ? 1 : 0);
                }
            });
        }
        return val;
    }
    validate(date) {
        const isValid = date.isValid();
        const outOfRange = this.getDayDisabled(date);
        let errorMsg = '';
        if (!isValid)
            errorMsg = 'Invalid Date';
        if (outOfRange)
            errorMsg = 'Date out of range';
        this.errorMsg = errorMsg;
        return isValid && !outOfRange;
    }
    getDisplayValue() {
        // note same as {{ value | amTimeZone: timezone | amDateFormat: format }}
        if (!this.value) {
            return '';
        }
        const m = this.createMoment(this.value);
        return m.isValid() ? m.format(this.format) : '' + String(this.value);
    }
    parseDate(date) {
        if (date instanceof Date) {
            /* istanbul ignore next */
            date = isNaN(date.getTime()) ? date.toString() : date.toISOString();
        }
        const inputFormats = [...this.inputFormats];
        if (this.format && !inputFormats.includes(this.format)) {
            inputFormats.unshift(this.format);
        }
        let m = this.timezone ? moment.tz(date, inputFormats, this.timezone) : moment(date, inputFormats);
        m = this.precision ? this.roundTo(m, this.precision) : m;
        return m;
    }
    createMoment(date) {
        let m = moment(date).clone();
        m = this.timezone ? m.tz(this.timezone) : m;
        m = this.precision ? this.roundTo(m, this.precision) : m;
        return m;
    }
};
DateTimeComponent.ctorParameters = () => [
    { type: DialogService }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], DateTimeComponent.prototype, "id", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateTimeComponent.prototype, "name", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateTimeComponent.prototype, "label", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateTimeComponent.prototype, "hint", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateTimeComponent.prototype, "placeholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateTimeComponent.prototype, "minDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateTimeComponent.prototype, "maxDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DateTimeComponent.prototype, "precision", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DateTimeComponent.prototype, "timezone", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], DateTimeComponent.prototype, "inputFormats", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DateTimeComponent.prototype, "disabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DateTimeComponent.prototype, "tabindex", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DateTimeComponent.prototype, "autofocus", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DateTimeComponent.prototype, "inputType", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DateTimeComponent.prototype, "format", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], DateTimeComponent.prototype, "change", void 0);
__decorate([
    ViewChild('dialogTpl', { static: true }),
    __metadata("design:type", TemplateRef)
], DateTimeComponent.prototype, "calendarTpl", void 0);
__decorate([
    ViewChild('input', { static: true }),
    __metadata("design:type", InputComponent)
], DateTimeComponent.prototype, "input", void 0);
DateTimeComponent = __decorate([
    Component({
        exportAs: 'ngxDateTime',
        selector: 'ngx-date-time',
        template: "<div class=\"ngx-date-time\">\n  <ng-template #dialogTpl>\n    <div class=\"selected-header text-center\">\n      <h1>\n        <span *ngIf=\"dialogModel && (inputType === 'datetime' || inputType === 'date')\">\n          {{ dialogModel | amTimeZone: timezone | amDateFormat: 'ddd, MMM D YYYY' }}\n          <small *ngIf=\"inputType === 'datetime'\">\n            {{ dialogModel | amTimeZone: timezone | amDateFormat: 'h:mm a' }}\n          </small>\n        </span>\n        <span *ngIf=\"dialogModel && inputType === 'time'\">\n          {{ dialogModel | amTimeZone: timezone | amDateFormat: 'h:mm a' }}\n        </span>\n        <span *ngIf=\"!dialogModel\">No value</span>\n      </h1>\n    </div>\n    <ngx-calendar\n      [id]=\"id + '-cal'\"\n      *ngIf=\"inputType === 'date' || inputType === 'datetime'\"\n      (change)=\"setDialogDate($event)\"\n      [minDate]=\"minDate\"\n      [maxDate]=\"maxDate\"\n      [ngModel]=\"dialogModel\"\n      [timezone]=\"timezone\"\n      [minView]=\"precision\"\n      name=\"calendar\"\n    >\n    </ngx-calendar>\n    <div class=\"time-row\" *ngIf=\"inputType === 'time' || inputType === 'datetime'\">\n      <div fxLayout=\"row\" fxLayoutGap=\"10px\" fxLayoutWrap=\"nowrap\" fxLayoutAlign=\"center baseline\">\n        <div fxFlex>\n          <ngx-input\n            type=\"number\"\n            hint=\"Hour\"\n            [id]=\"id + '-hour'\"\n            [ngModel]=\"hour\"\n            min=\"1\"\n            max=\"12\"\n            (change)=\"hourChanged($event)\"\n            [disabled]=\"isTimeDisabled('hour')\"\n          >\n          </ngx-input>\n        </div>\n        <div fxFlex>\n          <ngx-input\n            type=\"number\"\n            hint=\"Minute\"\n            [id]=\"id + '-minute'\"\n            [ngModel]=\"minute\"\n            min=\"0\"\n            max=\"59\"\n            (change)=\"minuteChanged($event)\"\n            [disabled]=\"isTimeDisabled('minute')\"\n          >\n          </ngx-input>\n        </div>\n        <div fxFlex>\n          <button\n            class=\"ampm\"\n            type=\"button\"\n            [class.selected]=\"amPmVal === 'AM'\"\n            (click)=\"onAmPmChange('AM')\"\n            [disabled]=\"isTimeDisabled('hour')\"\n          >\n            AM\n          </button>\n          <button\n            class=\"ampm\"\n            type=\"button\"\n            [class.selected]=\"amPmVal === 'PM'\"\n            (click)=\"onAmPmChange('PM')\"\n            [disabled]=\"isTimeDisabled('hour')\"\n          >\n            PM\n          </button>\n        </div>\n      </div>\n    </div>\n    <nav role=\"navigation\" class=\"ngx-dialog-footer\">\n      <div fxLayout=\"row\" fxLayoutWrap=\"nowrap\">\n        <div class=\"text-left\" fxFlex=\"1 1 50%\">\n          <button type=\"button\" class=\"btn btn-link today-btn\" (click)=\"selectCurrent()\" [hidden]=\"isCurrent()\">\n            Current\n          </button>\n        </div>\n        <div class=\"text-right\" fxFlex=\"1 1 50%\">\n          <button type=\"button\" class=\"btn btn-link clear-btn\" (click)=\"clear()\">Clear</button>\n          <button type=\"button\" class=\"btn btn-link apply-btn\" (click)=\"apply()\">Apply</button>\n        </div>\n      </div>\n    </nav>\n  </ng-template>\n  <ngx-input\n    #input\n    [id]=\"id + '-input'\"\n    [autocorrect]=\"false\"\n    [autocomplete]=\"false\"\n    [spellcheck]=\"false\"\n    [disabled]=\"disabled\"\n    [placeholder]=\"placeholder\"\n    [autofocus]=\"autofocus\"\n    [tabindex]=\"tabindex\"\n    [label]=\"label\"\n    [ngModel]=\"displayValue\"\n    (ngModelChange)=\"inputChanged($event)\"\n    (blur)=\"onBlur()\"\n  >\n    <ngx-input-hint>\n      <div fxLayout=\"row\" fxLayoutGap=\"10px\" fxLayoutWrap=\"nowrap\">\n        <div fxFlex *ngIf=\"hint\" class=\"text-left\">{{ hint }}</div>\n        <div *ngIf=\"errorMsg\" fxFlex class=\"text-right input-error\">{{ errorMsg }}</div>\n      </div>\n    </ngx-input-hint>\n  </ngx-input>\n  <button\n    title=\"Show date/time selector\"\n    type=\"button\"\n    [disabled]=\"disabled\"\n    (click)=\"open()\"\n    [ngClass]=\"{\n      'icon-calendar': inputType === 'date',\n      'icon-calendar-clock': inputType === 'datetime',\n      'icon-clock': inputType === 'time'\n    }\"\n    class=\"calendar-dialog-btn\"\n  ></button>\n</div>\n",
        providers: [DATE_TIME_VALUE_ACCESSOR],
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: ["input[type=number],input[type=password],input[type=tel],input[type=text],textarea{display:inline-block;box-sizing:border-box;outline:0}.form-input{background:#313847;border:1px solid #455066;color:#b6b6b6;-webkit-transition:box-shadow .2s;transition:box-shadow .2s;border-radius:0;font-size:13px;height:32px;line-height:32px;width:100%;padding:6px;margin-bottom:1em}.form-input::-webkit-input-placeholder{color:#647493}.form-input::-moz-placeholder{color:#647493}.form-input::-ms-input-placeholder{color:#647493}.form-input::placeholder{color:#647493}.form-input:focus{box-shadow:0 1px 5px 0 rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.12)}.form-input[disabled]{cursor:not-allowed;color:#363636}textarea.form-input{min-height:120px;line-height:1.3em}.ngx-date-time{position:relative}.ngx-date-time .calendar-dialog-btn{position:absolute;right:5px;height:30px;line-height:30px;top:-5px;color:#afb7c8;padding:20px 0;padding-top:calc(.7em + 8px);padding-bottom:calc(.7em + 8px)}.ngx-date-time .input-error{color:#ff4514}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog{padding:0!important;width:auto}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog h1{font-size:1.2rem;white-space:nowrap}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog h1 small{color:#cfcfcf}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .selected-header{padding:5px 20px;background:#1483ff;color:#cfcfcf}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .time-row{background:#1c2029;border:1px solid #2d3544;padding:8px 15px;margin-top:0}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .time-row .ngx-input{margin-top:0;padding-top:0}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .time-row .ngx-input .ngx-input-underline{background-color:#b6b6b6}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .time-row button.ampm{color:#5a6884}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .time-row button.ampm.selected{color:#fff}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-calendar{box-shadow:none}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-calendar .title-row{background:0 0}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-calendar .day-name-row{margin-top:0}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-dialog-footer{border:1px solid #2d3544;border-top:0;padding:.5rem 0}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-dialog-footer .btn{font-size:1em;color:#72819f;margin:0;padding:0}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-dialog-footer .today-btn{margin-left:15px;opacity:1;-webkit-transition:opacity .2s;transition:opacity .2s}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-dialog-footer .today-btn[hidden]{display:inline-block!important;opacity:0}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-dialog-footer .apply-btn{margin-right:15px;color:#479eff}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-dialog-footer .clear-btn{margin-right:15px}"]
    }),
    __metadata("design:paramtypes", [DialogService])
], DateTimeComponent);
export { DateTimeComponent };
//# sourceMappingURL=data:application/json;base64,