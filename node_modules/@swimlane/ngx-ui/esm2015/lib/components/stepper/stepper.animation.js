import { animate, state, style, transition, trigger } from '@angular/animations';
import { StepperAnimationStates } from './stepper-animation-states.enum';
import { StepperBarAnimationStates } from './stepper-bar-animation-states.enum';
const BAR_SIZE = 40;
const BAR_THICKNESS = 2;
const STEP_SIZE = 28;
export const stepperAnimations = {
    horizontalStepTransition: trigger('stepHorizontalTransition', [
        state(StepperAnimationStates.Left, style({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),
        state(StepperAnimationStates.Right, style({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),
        state(StepperAnimationStates.Current, style({ transform: 'none', visibility: 'visible' })),
        transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))
    ]),
    verticalStepTransition: trigger('stepVerticalTransition', [
        state(StepperAnimationStates.Up, style({ transform: 'translate3d(0, -100%, 0)', visibility: 'hidden' })),
        state(StepperAnimationStates.Down, style({ transform: 'translate3d(0, 100%, 0)', visibility: 'hidden' })),
        state(StepperAnimationStates.Current, style({ transform: 'none', visibility: 'visible' })),
        transition(`* <=> ${StepperAnimationStates.Current}`, animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))
    ]),
    horizontalBarTransition: trigger('stepperBarHorizontalTransition', [
        state(StepperBarAnimationStates.Stay, style({
            transition: '500ms cubic-bezier(0.35, 0, 0.25, 1)',
            transform: 'translateX({{ width }}px)',
            height: `${BAR_THICKNESS}px`,
            width: `${BAR_SIZE}px`,
            margin: `0 0 0 -${(BAR_SIZE - STEP_SIZE) / 2}px`
        }), { params: { width: 0 } }),
        state(StepperBarAnimationStates.Move, style({
            transition: '500ms cubic-bezier(0.35, 0, 0.25, 1)',
            transform: 'translateX({{ width }}px)',
            height: `${BAR_THICKNESS}px`,
            width: `${BAR_SIZE / 2}px`,
            margin: `0 ${BAR_SIZE / 4}px 0 ${BAR_SIZE / 4 - (BAR_SIZE - STEP_SIZE) / 2}px`
        }), { params: { width: 0 } })
    ]),
    verticalBarTransition: trigger('stepperBarVerticalTransition', [
        state(StepperBarAnimationStates.Stay, style({
            transition: '500ms cubic-bezier(0.35, 0, 0.25, 1)',
            transform: 'translateY({{ height }}px)',
            width: `${BAR_THICKNESS}px`,
            height: `${BAR_SIZE}px`,
            margin: `-${(BAR_SIZE - STEP_SIZE) / 2}px 0 0 0`
        }), { params: { height: 0 } }),
        state(StepperBarAnimationStates.Move, style({
            transition: '500ms cubic-bezier(0.35, 0, 0.25, 1)',
            transform: 'translateY({{ height }}px)',
            width: `${BAR_THICKNESS}px`,
            height: `${BAR_SIZE / 2}px`,
            margin: `${BAR_SIZE / 4 - (BAR_SIZE - STEP_SIZE) / 2}px 0 ${BAR_SIZE / 4}px`
        }), { params: { height: 0 } })
    ])
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5hbmltYXRpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvc3RlcHBlci9zdGVwcGVyLmFuaW1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWpGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRWhGLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUNwQixNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUM7QUFDeEIsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBRXJCLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHO0lBQy9CLHdCQUF3QixFQUFFLE9BQU8sQ0FBQywwQkFBMEIsRUFBRTtRQUM1RCxLQUFLLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSwwQkFBMEIsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUMxRyxLQUFLLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSx5QkFBeUIsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUMxRyxLQUFLLENBQUMsc0JBQXNCLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDMUYsVUFBVSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsc0NBQXNDLENBQUMsQ0FBQztLQUN0RSxDQUFDO0lBRUYsc0JBQXNCLEVBQUUsT0FBTyxD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LCBzdHlsZSwgdHJhbnNpdGlvbiwgdHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5pbXBvcnQgeyBTdGVwcGVyQW5pbWF0aW9uU3RhdGVzIH0gZnJvbSAnLi9zdGVwcGVyLWFuaW1hdGlvbi1zdGF0ZXMuZW51bSc7XG5pbXBvcnQgeyBTdGVwcGVyQmFyQW5pbWF0aW9uU3RhdGVzIH0gZnJvbSAnLi9zdGVwcGVyLWJhci1hbmltYXRpb24tc3RhdGVzLmVudW0nO1xuXG5jb25zdCBCQVJfU0laRSA9IDQwO1xuY29uc3QgQkFSX1RISUNLTkVTUyA9IDI7XG5jb25zdCBTVEVQX1NJWkUgPSAyODtcblxuZXhwb3J0IGNvbnN0IHN0ZXBwZXJBbmltYXRpb25zID0ge1xuICBob3Jpem9udGFsU3RlcFRyYW5zaXRpb246IHRyaWdnZXIoJ3N0ZXBIb3Jpem9udGFsVHJhbnNpdGlvbicsIFtcbiAgICBzdGF0ZShTdGVwcGVyQW5pbWF0aW9uU3RhdGVzLkxlZnQsIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoLTEwMCUsIDAsIDApJywgdmlzaWJpbGl0eTogJ2hpZGRlbicgfSkpLFxuICAgIHN0YXRlKFN0ZXBwZXJBbmltYXRpb25TdGF0ZXMuUmlnaHQsIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTAwJSwgMCwgMCknLCB2aXNpYmlsaXR5OiAnaGlkZGVuJyB9KSksXG4gICAgc3RhdGUoU3RlcHBlckFuaW1hdGlvblN0YXRlcy5DdXJyZW50LCBzdHlsZSh7IHRyYW5zZm9ybTogJ25vbmUnLCB2aXNpYmlsaXR5OiAndmlzaWJsZScgfSkpLFxuICAgIHRyYW5zaXRpb24oJyogPT4gKicsIGFuaW1hdGUoJzUwMG1zIGN1YmljLWJlemllcigwLjM1LCAwLCAwLjI1LCAxKScpKVxuICBdKSxcblxuICB2ZXJ0aWNhbFN0ZXBUcmFuc2l0aW9uOiB0cmlnZ2VyKCdzdGVwVmVydGljYWxUcmFuc2l0aW9uJywgW1xuICAgIHN0YXRlKFN0ZXBwZXJBbmltYXRpb25TdGF0ZXMuVXAsIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwgLTEwMCUsIDApJywgdmlzaWJpbGl0eTogJ2hpZGRlbicgfSkpLFxuICAgIHN0YXRlKFN0ZXBwZXJBbmltYXRpb25TdGF0ZXMuRG93biwgc3R5bGUoeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAxMDAlLCAwKScsIHZpc2liaWxpdHk6ICdoaWRkZW4nIH0pKSxcbiAgICBzdGF0ZShTdGVwcGVyQW5pbWF0aW9uU3RhdGVzLkN1cnJlbnQsIHN0eWxlKHsgdHJhbnNmb3JtOiAnbm9uZScsIHZpc2liaWxpdHk6ICd2aXNpYmxlJyB9KSksXG4gICAgdHJhbnNpdGlvbihgKiA8PT4gJHtTdGVwcGVyQW5pbWF0aW9uU3RhdGVzLkN1cnJlbnR9YCwgYW5pbWF0ZSgnMjI1bXMgY3ViaWMtYmV6aWVyKDAuNCwgMC4wLCAwLjIsIDEpJykpXG4gIF0pLFxuXG4gIGhvcml6b250YWxCYXJUcmFuc2l0aW9uOiB0cmlnZ2VyKCdzdGVwcGVyQmFySG9yaXpvbnRhbFRyYW5zaXRpb24nLCBbXG4gICAgc3RhdGUoXG4gICAgICBTdGVwcGVyQmFyQW5pbWF0aW9uU3RhdGVzLlN0YXksXG4gICAgICBzdHlsZSh7XG4gICAgICAgIHRyYW5zaXRpb246ICc1MDBtcyBjdWJpYy1iZXppZXIoMC4zNSwgMCwgMC4yNSwgMSknLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKHt7IHdpZHRoIH19cHgpJyxcbiAgICAgICAgaGVpZ2h0OiBgJHtCQVJfVEhJQ0tORVNTfXB4YCxcbiAgICAgICAgd2lkdGg6IGAke0JBUl9TSVpFfXB4YCxcbiAgICAgICAgbWFyZ2luOiBgMCAwIDAgLSR7KEJBUl9TSVpFIC0gU1RFUF9TSVpFKSAvIDJ9cHhgXG4gICAgICB9KSxcbiAgICAgIHsgcGFyYW1zOiB7IHdpZHRoOiAwIH0gfVxuICAgICksXG4gICAgc3RhdGUoXG4gICAgICBTdGVwcGVyQmFyQW5pbWF0aW9uU3RhdGVzLk1vdmUsXG4gICAgICBzdHlsZSh7XG4gICAgICAgIHRyYW5zaXRpb246ICc1MDBtcyBjdWJpYy1iZXppZXIoMC4zNSwgMCwgMC4yNSwgMSknLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKHt7IHdpZHRoIH19cHgpJyxcbiAgICAgICAgaGVpZ2h0OiBgJHtCQVJfVEhJQ0tORVNTfXB4YCxcbiAgICAgICAgd2lkdGg6IGAke0JBUl9TSVpFIC8gMn1weGAsXG4gICAgICAgIG1hcmdpbjogYDAgJHtCQVJfU0laRSAvIDR9cHggMCAke0JBUl9TSVpFIC8gNCAtIChCQVJfU0laRSAtIFNURVBfU0laRSkgLyAyfXB4YFxuICAgICAgfSksXG4gICAgICB7IHBhcmFtczogeyB3aWR0aDogMCB9IH1cbiAgICApXG4gIF0pLFxuXG4gIHZlcnRpY2FsQmFyVHJhbnNpdGlvbjogdHJpZ2dlcignc3RlcHBlckJhclZlcnRpY2FsVHJhbnNpdGlvbicsIFtcbiAgICBzdGF0ZShcbiAgICAgIFN0ZXBwZXJCYXJBbmltYXRpb25TdGF0ZXMuU3RheSxcbiAgICAgIHN0eWxlKHtcbiAgICAgICAgdHJhbnNpdGlvbjogJzUwMG1zIGN1YmljLWJlemllcigwLjM1LCAwLCAwLjI1LCAxKScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoe3sgaGVpZ2h0IH19cHgpJyxcbiAgICAgICAgd2lkdGg6IGAke0JBUl9USElDS05FU1N9cHhgLFxuICAgICAgICBoZWlnaHQ6IGAke0JBUl9TSVpFfXB4YCxcbiAgICAgICAgbWFyZ2luOiBgLSR7KEJBUl9TSVpFIC0gU1RFUF9TSVpFKSAvIDJ9cHggMCAwIDBgXG4gICAgICB9KSxcbiAgICAgIHsgcGFyYW1zOiB7IGhlaWdodDogMCB9IH1cbiAgICApLFxuICAgIHN0YXRlKFxuICAgICAgU3RlcHBlckJhckFuaW1hdGlvblN0YXRlcy5Nb3ZlLFxuICAgICAgc3R5bGUoe1xuICAgICAgICB0cmFuc2l0aW9uOiAnNTAwbXMgY3ViaWMtYmV6aWVyKDAuMzUsIDAsIDAuMjUsIDEpJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSh7eyBoZWlnaHQgfX1weCknLFxuICAgICAgICB3aWR0aDogYCR7QkFSX1RISUNLTkVTU31weGAsXG4gICAgICAgIGhlaWdodDogYCR7QkFSX1NJWkUgLyAyfXB4YCxcbiAgICAgICAgbWFyZ2luOiBgJHtCQVJfU0laRSAvIDQgLSAoQkFSX1NJWkUgLSBTVEVQX1NJWkUpIC8gMn1weCAwICR7QkFSX1NJWkUgLyA0fXB4YFxuICAgICAgfSksXG4gICAgICB7IHBhcmFtczogeyBoZWlnaHQ6IDAgfSB9XG4gICAgKVxuICBdKVxufTtcbiJdfQ==