import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone } from '@angular/core';
import * as Mousetrap from 'mousetrap';
import { Subject } from 'rxjs';
import { HotkeyStatus } from './hotkey-status.enum';
let hotkeys = {};
const hotkeyChangedSource = new Subject();
const isMac = /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
const tags = ['INPUT', 'SELECT', 'TEXTAREA'];
/*tslint:disable*/
const map = {
    command: '\u2318',
    shift: '\u21E7',
    left: '\u2190',
    right: '\u2192',
    up: '\u2191',
    down: '\u2193',
    return: '\u23CE',
    backspace: '\u232B' // âŒ«
};
/*tslint:enable*/
function _getDisplay(combo) {
    const keys = combo.split('+');
    const result = [];
    for (const k of keys) {
        if (k === 'mod') {
            result.push(isMac ? map.command : /* istanbul ignore next */ 'ctrl');
            continue;
        }
        const mapped = map[k];
        result.push(mapped || k);
    }
    return result;
}
export function _add(combo, opts) {
    opts.status = opts.status || HotkeyStatus.Active;
    opts.keys = _getDisplay(combo);
    opts.visible = opts.visible !== undefined ? opts.visible : true;
    opts.allowIn = Array.isArray(opts.allowIn) ? opts.allowIn.map(tag => tag.toUpperCase()) : [];
    const mousetrap = new Mousetrap();
    if (opts.allowIn.length) {
        /* istanbul ignore next */
        mousetrap.stopCallback = function (_, element) {
            if (!tags.includes(element.tagName) || opts.allowIn.includes(element.tagName)) {
                return false;
            }
            return true;
        };
    }
    mousetrap.bind(combo, callback);
    if (hotkeys[combo] === undefined) {
        hotkeys[combo] = [];
    }
    hotkeys[combo].push(opts);
    hotkeyChangedSource.next(hotkeys);
    /* istanbul ignore next */
    function callback(event) {
        if (event.preventDefault) {
            event.preventDefault();
        }
        else {
            // internet explorer
            event.returnValue = false;
        }
        if (opts && opts.status === HotkeyStatus.Active) {
            opts.zone.run(() => {
                opts.callback(event);
            });
        }
    }
}
export function _suspend(comp) {
    for (const comb in hotkeys) {
        const hotkeyList = hotkeys[comb];
        for (const hotkey of hotkeyList) {
            if (hotkey.component === comp) {
                hotkey.status = HotkeyStatus.Suspended;
            }
        }
    }
    hotkeyChangedSource.next(hotkeys);
}
export function _pauseOthers(comp) {
    for (const comb in hotkeys) {
        const hotkeyList = hotkeys[comb];
        for (const hotkey of hotkeyList) {
            if (hotkey.component !== comp) {
                hotkey.status = `*${hotkey.status}`;
            }
        }
    }
    hotkeyChangedSource.next(hotkeys);
}
export function _unpauseOthers(comp) {
    for (const comb in hotkeys) {
        const hotkeyList = hotkeys[comb];
        for (const hotkey of hotkeyList) {
            if (hotkey.component !== comp && hotkey.status[0] === '*') {
                hotkey.status = hotkey.status.replace('*', '');
            }
        }
    }
    hotkeyChangedSource.next(hotkeys);
}
export function _activate(comp) {
    for (const comb in hotkeys) {
        const hotkeyList = hotkeys[comb];
        for (const hotkey of hotkeyList) {
            if (hotkey.component === comp) {
                hotkey.status = HotkeyStatus.Active;
            }
        }
    }
    hotkeyChangedSource.next(hotkeys);
}
export function _deregister(comp) {
    for (const comb in hotkeys) {
        const hotkeyList = hotkeys[comb];
        for (let i = 0; i < hotkeyList.length; i++) {
            if (hotkeyList[i].component === comp) {
                hotkeyList[i].status = HotkeyStatus.Disabled;
                hotkeyList.splice(hotkeyList.indexOf(hotkeyList[i]), 1);
            }
        }
        if (!hotkeyList.length) {
            Mousetrap.unbind(comb);
        }
    }
    hotkeyChangedSource.next(hotkeys);
}
export function Hotkey(key, description, options) {
    return (target, name) => {
        const oldInit = target.ngOnInit;
        target.ngOnInit = function () {
            if (oldInit)
                oldInit.bind(this)();
            _add(key, Object.assign({ callback: /* istanbul ignore next */ () => {
                    target[name].bind(this)();
                }, description, component: this, zone: new NgZone({ enableLongStackTrace: false }) }, options));
        };
        const oldDestroy = target.ngOnDestroy;
        target.ngOnDestroy = function () {
            if (oldDestroy)
                oldDestroy.bind(this)();
            _deregister(this);
        };
    };
}
let HotkeysService = class HotkeysService {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.suspend = _suspend;
        this.activate = _activate;
        this.deregister = _deregister;
        this.pauseOthers = _pauseOthers;
        this.unpauseOthers = _unpauseOthers;
        this.changeEvent = hotkeyChangedSource.asObservable();
    }
    get hotkeys() {
        return hotkeys;
    }
    add(combo, opts) {
        _add(combo, Object.assign({ zone: this.ngZone }, opts));
    }
    clear() {
        hotkeys = {};
        Mousetrap.reset();
    }
};
HotkeysService.ctorParameters = () => [
    { type: NgZone }
];
HotkeysService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [NgZone])
], HotkeysService);
export { HotkeysService };
//# sourceMappingURL=data:application/json;base64,