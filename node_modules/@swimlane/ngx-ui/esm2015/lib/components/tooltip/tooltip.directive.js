import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, OnDestroy, Output, Renderer2, TemplateRef, ViewContainerRef, ComponentRef } from '@angular/core';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { PlacementTypes, AlignmentTypes } from '../../utils/position';
import { ShowTypes } from './show-types.enum';
import { StyleTypes } from './style-types.enum';
import { TooltipService } from './tooltip.service';
// tslint:disable-next-line:directive-selector
let TooltipDirective = class TooltipDirective {
    constructor(ngZone, tooltipService, viewContainerRef, renderer, element) {
        this.ngZone = ngZone;
        this.tooltipService = tooltipService;
        this.viewContainerRef = viewContainerRef;
        this.renderer = renderer;
        this.element = element;
        this.tooltipCssClass = '';
        this.tooltipTitle = '';
        this.tooltipPlacement = PlacementTypes.top;
        this.tooltipAlignment = AlignmentTypes.center;
        this.tooltipType = StyleTypes.popover;
        this.tooltipShowEvent = ShowTypes.all;
        this.show = new EventEmitter();
        this.hide = new EventEmitter();
        this._tooltipSpacing = 10;
        this._tooltipDisabled = false;
        this._tooltipShowCaret = true;
        this._tooltipCloseOnClickOutside = true;
        this._tooltipCloseOnMouseLeave = true;
        this._tooltipHideTimeout = 300;
        this._tooltipShowTimeout = 100;
    }
    get tooltipSpacing() {
        return this._tooltipSpacing;
    }
    set tooltipSpacing(val) {
        this._tooltipSpacing = coerceNumberProperty(val);
    }
    get tooltipDisabled() {
        return this._tooltipDisabled;
    }
    set tooltipDisabled(val) {
        this._tooltipDisabled = coerceBooleanProperty(val);
    }
    get tooltipShowCaret() {
        return this._tooltipShowCaret;
    }
    set tooltipShowCaret(val) {
        this._tooltipShowCaret = coerceBooleanProperty(val);
    }
    get tooltipCloseOnClickOutside() {
        return this._tooltipCloseOnClickOutside;
    }
    set tooltipCloseOnClickOutside(val) {
        this._tooltipCloseOnClickOutside = coerceBooleanProperty(val);
    }
    get tooltipCloseOnMouseLeave() {
        return this._tooltipCloseOnMouseLeave;
    }
    set tooltipCloseOnMouseLeave(val) {
        this._tooltipCloseOnMouseLeave = coerceBooleanProperty(val);
    }
    get tooltipHideTimeout() {
        return this._tooltipHideTimeout;
    }
    set tooltipHideTimeout(val) {
        this._tooltipHideTimeout = coerceNumberProperty(val);
    }
    get tooltipShowTimeout() {
        return this._tooltipShowTimeout;
    }
    set tooltipShowTimeout(val) {
        this._tooltipShowTimeout = coerceNumberProperty(val);
    }
    get listensForFocus() {
        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;
    }
    get listensForHover() {
        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;
    }
    ngOnDestroy() {
        this.hideTooltip(true);
    }
    onFocus() {
        if (this.listensForFocus) {
            this.showTooltip();
        }
    }
    onBlur() {
        if (this.listensForFocus) {
            this.hideTooltip(true);
        }
    }
    onMouseEnter() {
        if (this.listensForHover) {
            this.showTooltip();
        }
    }
    onMouseLeave(target) {
        if (this.listensForHover && this.tooltipCloseOnMouseLeave) {
            clearTimeout(this.timeout);
            /* istanbul ignore if */
            if (this.component) {
                const contentDom = this.component.instance.element.nativeElement;
                const contains = contentDom.contains(target);
                if (contains)
                    return;
            }
            this.hideTooltip();
        }
    }
    onMouseClick() {
        if (this.tooltipShowEvent === ShowTypes.mouseover) {
            this.hideTooltip(true);
        }
    }
    showTooltip(immediate) {
        if (this.component || this.tooltipDisabled)
            return;
        const time = immediate ? 0 : this.tooltipShowTimeout;
        // ngUpgrade bug
        // https://github.com/angular/angular/issues/12318
        this.ngZone.run(() => {
            clearTimeout(this.timeout);
            this.timeout = setTimeout(() => {
                this.tooltipService.destroyAll();
                const options = this.createBoundOptions();
                this.component = this.tooltipService.create(options);
                // add a tiny timeout to avoid event re-triggers
                setTimeout(() => {
                    if (this.component && this.component.instance && this.component.instance.element) {
                        this.addHideListeners(this.component.instance.element.nativeElement);
                    }
                }, 10);
                this.show.emit(true);
            }, time);
        });
    }
    hideTooltip(immediate) {
        if (!this.component)
            return;
        const destroyFn = () => {
            // remove events
            if (this.mouseLeaveContentEvent)
                this.mouseLeaveContentEvent();
            if (this.mouseEnterContentEvent)
                this.mouseEnterContentEvent();
            if (this.documentClickEvent)
                this.documentClickEvent();
            // emit events
            this.hide.emit(true);
            // destroy component
            this.tooltipService.destroy(this.component);
            this.component = undefined;
        };
        clearTimeout(this.timeout);
        if (!immediate) {
            this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);
        }
        else {
            destroyFn();
        }
    }
    addHideListeners(tooltip) {
        // on mouse enter, cancel the hide triggered by the leave
        this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', 
        /* istanbul ignore next */ () => {
            clearTimeout(this.timeout);
        });
        // content mouse leave listener
        if (this.tooltipCloseOnMouseLeave) {
            this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', 
            /* istanbul ignore next */ () => {
                this.hideTooltip();
            });
        }
        // content close on click outside
        if (this.tooltipCloseOnClickOutside) {
            this.documentClickEvent = this.renderer.listen(document, 'click', 
            /* istanbul ignore next */ event => {
                const tooltipContains = tooltip.contains(event.target);
                const parentContains = this.element.nativeElement.contains(event.target);
                if (!tooltipContains && !parentContains) {
                    this.hideTooltip();
                }
            });
        }
    }
    createBoundOptions() {
        return {
            title: this.tooltipTitle,
            template: this.tooltipTemplate,
            host: this.viewContainerRef.element,
            placement: this.tooltipPlacement,
            alignment: this.tooltipAlignment,
            type: this.tooltipType,
            showCaret: this.tooltipShowCaret,
            cssClass: this.tooltipCssClass,
            spacing: this.tooltipSpacing,
            context: this.tooltipContext
        };
    }
};
TooltipDirective.ctorParameters = () => [
    { type: NgZone },
    { type: TooltipService },
    { type: ViewContainerRef },
    { type: Renderer2 },
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], TooltipDirective.prototype, "tooltipCssClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TooltipDirective.prototype, "tooltipTitle", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TooltipDirective.prototype, "tooltipPlacement", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TooltipDirective.prototype, "tooltipAlignment", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TooltipDirective.prototype, "tooltipType", void 0);
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], TooltipDirective.prototype, "tooltipTemplate", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TooltipDirective.prototype, "tooltipShowEvent", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TooltipDirective.prototype, "tooltipContext", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], TooltipDirective.prototype, "tooltipSpacing", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], TooltipDirective.prototype, "tooltipDisabled", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], TooltipDirective.prototype, "tooltipShowCaret", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], TooltipDirective.prototype, "tooltipCloseOnClickOutside", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], TooltipDirective.prototype, "tooltipCloseOnMouseLeave", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], TooltipDirective.prototype, "tooltipHideTimeout", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], TooltipDirective.prototype, "tooltipShowTimeout", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TooltipDirective.prototype, "show", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TooltipDirective.prototype, "hide", void 0);
__decorate([
    HostListener('focusin'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TooltipDirective.prototype, "onFocus", null);
__decorate([
    HostListener('blur'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TooltipDirective.prototype, "onBlur", null);
__decorate([
    HostListener('mouseenter'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TooltipDirective.prototype, "onMouseEnter", null);
__decorate([
    HostListener('mouseleave', ['$event.target']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [HTMLElement]),
    __metadata("design:returntype", void 0)
], TooltipDirective.prototype, "onMouseLeave", null);
__decorate([
    HostListener('click'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TooltipDirective.prototype, "onMouseClick", null);
TooltipDirective = __decorate([
    Directive({
        selector: '[ngx-tooltip]',
        exportAs: 'ngxTooltip'
    }),
    __metadata("design:paramtypes", [NgZone,
        TooltipService,
        ViewContainerRef,
        Renderer2,
        ElementRef])
], TooltipDirective);
export { TooltipDirective };
//# sourceMappingURL=data:application/json;base64,