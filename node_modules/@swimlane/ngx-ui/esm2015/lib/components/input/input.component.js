import { __decorate, __metadata } from "tslib";
import { AfterViewInit, Component, ElementRef, EventEmitter, HostBinding, Input, Output, ViewChild, ViewEncapsulation, forwardRef, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, NgModel, Validators } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { InputTypes } from './input-types.enum';
import { trigger, state, style, transition, animate } from '@angular/animations';
let nextId = 0;
const INPUT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => InputComponent),
    multi: true
};
const INPUT_VALIDATORS = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => InputComponent),
    multi: true
};
let InputComponent = class InputComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.id = `input-${++nextId}`;
        this.label = '';
        this.placeholder = '';
        this.requiredIndicator = '*';
        this.passwordToggleEnabled = false;
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.keyup = new EventEmitter();
        this.click = new EventEmitter();
        this.select = new EventEmitter();
        this.focused = false;
        this.type$ = new BehaviorSubject(InputTypes.text);
        this._value = '';
        this._type = InputTypes.text;
        this._passwordTextVisible = false;
        this._disabled = false;
        this._required = false;
        this._autoSelect = false;
        this._autofocus = false;
        this._autocomplete = false;
        this._autocorrect = false;
        this._spellcheck = false;
        this.onTouchedCallback = () => {
            // placeholder
        };
        this.onChangeCallback = () => {
            // placeholder
        };
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(disabled) {
        this._disabled = coerceBooleanProperty(disabled);
    }
    get required() {
        return this._required;
    }
    set required(required) {
        this._required = coerceBooleanProperty(required);
    }
    get passwordTextVisible() {
        return this._passwordTextVisible;
    }
    set passwordTextVisible(p) {
        this._passwordTextVisible = coerceBooleanProperty(p);
        this.updateInputType();
    }
    get autoSelect() {
        return this._autoSelect;
    }
    set autoSelect(autoSelect) {
        this._autoSelect = coerceBooleanProperty(autoSelect);
    }
    get autofocus() {
        return this._autofocus;
    }
    set autofocus(autofocus) {
        this._autofocus = coerceBooleanProperty(autofocus);
    }
    get autocomplete() {
        return this._autocomplete;
    }
    set autocomplete(autocomplete) {
        this._autocomplete = coerceBooleanProperty(autocomplete);
    }
    get autocorrect() {
        return this._autocorrect;
    }
    set autocorrect(autocorrect) {
        this._autocorrect = coerceBooleanProperty(autocorrect);
    }
    get spellcheck() {
        return this._spellcheck;
    }
    set spellcheck(spellcheck) {
        this._spellcheck = coerceBooleanProperty(spellcheck);
    }
    get type() {
        return this._type;
    }
    set type(type) {
        this._type = type;
        this.updateInputType();
    }
    get value() {
        return this._value;
    }
    set value(val) {
        if (val !== this._value) {
            this._value = this.type === InputTypes.number ? coerceNumberProperty(val) : val;
            this.onChangeCallback(this._value);
        }
    }
    get focusedOrDirty() {
        if (this.focused) {
            return true;
        }
        if (typeof this.value === 'string') {
            return this.value && this.value.length;
        }
        return typeof this.value !== 'undefined' && this.value !== null;
    }
    get isTouched() {
        return this.inputModel ? this.inputModel.touched : false;
    }
    get labelState() {
        return this.placeholder || this.focusedOrDirty ? 'outside' : 'inside';
    }
    get underlineState() {
        return this.focused ? 'expanded' : 'collapsed';
    }
    get requiredIndicatorView() {
        return !this.requiredIndicator || !this.required ? '' : this.requiredIndicator;
    }
    get element() {
        return this.type === InputTypes.textarea ? this.textareaControl : this.inputControl;
    }
    ngAfterViewInit() {
        if (this.autofocus) {
            setTimeout(() => this.element.nativeElement.focus());
        }
        // sometimes the label doesn't update on load
        setTimeout(() => this.cdr.markForCheck());
    }
    ngOnChanges(changes) {
        if ('max' in changes || 'min' in changes) {
            this.onChangeCallback(this._value);
        }
    }
    onChange(event) {
        event.stopPropagation();
        this.change.emit(this.value);
    }
    onKeyUp(event) {
        event.stopPropagation();
        this.keyup.emit(event);
    }
    onFocus(event) {
        event.stopPropagation();
        this.focused = true;
        if (this.autoSelect) {
            setTimeout(() => this.element.nativeElement.select());
            this.select.emit(event);
        }
        this.focus.emit(event);
        this.onTouchedCallback();
    }
    onBlur(event) {
        event.stopPropagation();
        this.focused = false;
        this.blur.emit(event);
    }
    validate(c) {
        if (this.type !== InputTypes.number) {
            return null;
        }
        return Object.assign(Object.assign({}, Validators.max(this.max)(c)), Validators.min(this.min)(c));
    }
    writeValue(val) {
        if (val !== this._value) {
            this._value = val;
        }
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    togglePassword() {
        this.passwordTextVisible = !this.passwordTextVisible;
        this.element.nativeElement.focus();
    }
    setDisabledState(isDisabled) {
        this.disabled = coerceBooleanProperty(isDisabled);
    }
    updateInputType() {
        this.type$.next(this.passwordTextVisible && this.type === InputTypes.password ? InputTypes.text : this.type);
    }
};
InputComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], InputComponent.prototype, "id", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], InputComponent.prototype, "name", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], InputComponent.prototype, "label", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], InputComponent.prototype, "hint", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], InputComponent.prototype, "placeholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], InputComponent.prototype, "tabindex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], InputComponent.prototype, "min", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], InputComponent.prototype, "max", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], InputComponent.prototype, "minlength", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], InputComponent.prototype, "maxlength", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], InputComponent.prototype, "disabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object)
], InputComponent.prototype, "requiredIndicator", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], InputComponent.prototype, "required", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], InputComponent.prototype, "passwordToggleEnabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], InputComponent.prototype, "passwordTextVisible", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], InputComponent.prototype, "autoSelect", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], InputComponent.prototype, "autofocus", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], InputComponent.prototype, "autocomplete", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], InputComponent.prototype, "autocorrect", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], InputComponent.prototype, "spellcheck", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], InputComponent.prototype, "type", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], InputComponent.prototype, "change", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], InputComponent.prototype, "blur", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], InputComponent.prototype, "focus", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], InputComponent.prototype, "keyup", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], InputComponent.prototype, "click", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], InputComponent.prototype, "select", void 0);
__decorate([
    ViewChild('inputControl'),
    __metadata("design:type", ElementRef)
], InputComponent.prototype, "inputControl", void 0);
__decorate([
    ViewChild('inputModel'),
    __metadata("design:type", NgModel)
], InputComponent.prototype, "inputModel", void 0);
__decorate([
    ViewChild('textareaControl'),
    __metadata("design:type", ElementRef)
], InputComponent.prototype, "textareaControl", void 0);
__decorate([
    HostBinding('class.ng-dirty'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], InputComponent.prototype, "focusedOrDirty", null);
__decorate([
    HostBinding('class.ng-touched'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], InputComponent.prototype, "isTouched", null);
InputComponent = __decorate([
    Component({
        exportAs: 'ngxInput',
        selector: 'ngx-input',
        template: "<div class=\"ngx-input-wrap\">\n  <div class=\"ngx-input-flex-wrap\">\n    <ng-content select=\"ngx-input-prefix\"></ng-content>\n    <div class=\"ngx-input-flex-wrap-inner\">\n      <div class=\"ngx-input-box-wrap\">\n        <textarea\n          *ngIf=\"type === 'textarea'\"\n          class=\"ngx-input-textarea\"\n          rows=\"1\"\n          autosize\n          [(ngModel)]=\"value\"\n          [id]=\"id\"\n          [name]=\"name\"\n          [placeholder]=\"placeholder\"\n          [disabled]=\"disabled\"\n          [attr.tabindex]=\"tabindex\"\n          [attr.autocomplete]=\"autocomplete\"\n          [attr.autocorrect]=\"autocorrect\"\n          [attr.spellcheck]=\"spellcheck\"\n          [minlength]=\"minlength\"\n          [maxlength]=\"maxlength\"\n          [required]=\"required\"\n          (change)=\"onChange($event)\"\n          (keyup)=\"onKeyUp($event)\"\n          (focus)=\"onFocus($event)\"\n          (blur)=\"onBlur($event)\"\n          (click)=\"click.emit($event)\"\n          #inputModel=\"ngModel\"\n          #textareaControl\n        >\n        </textarea>\n        <input\n          *ngIf=\"type !== 'textarea'\"\n          class=\"ngx-input-box\"\n          [(ngModel)]=\"value\"\n          [id]=\"id\"\n          [name]=\"name\"\n          [placeholder]=\"placeholder\"\n          [disabled]=\"disabled\"\n          [type]=\"type$ | async\"\n          [min]=\"'' + min\"\n          [max]=\"'' + max\"\n          [minlength]=\"minlength\"\n          [maxlength]=\"maxlength\"\n          [attr.tabindex]=\"tabindex\"\n          [attr.autocomplete]=\"autocomplete\"\n          [attr.autocorrect]=\"autocorrect\"\n          [attr.spellcheck]=\"spellcheck\"\n          (change)=\"onChange($event)\"\n          (keyup)=\"onKeyUp($event)\"\n          (focus)=\"onFocus($event)\"\n          (blur)=\"onBlur($event)\"\n          (click)=\"click.emit($event)\"\n          [required]=\"required\"\n          #inputModel=\"ngModel\"\n          #inputControl\n        />\n        <span\n          *ngIf=\"type === 'password' && passwordToggleEnabled\"\n          class=\"icon-eye\"\n          title=\"Toggle Text Visibility\"\n          (click)=\"togglePassword()\"\n        >\n        </span>\n      </div>\n      <span class=\"ngx-input-label\" [@labelState]=\"labelState\">\n        <span [innerHTML]=\"label\"></span> <span [innerHTML]=\"requiredIndicatorView\"></span>\n      </span>\n    </div>\n    <ng-content select=\"ngx-input-suffix\"></ng-content>\n  </div>\n  <div class=\"ngx-input-underline\">\n    <div class=\"underline-fill\" [@underlineState]=\"underlineState\"></div>\n  </div>\n  <div class=\"ngx-input-hint\">\n    <ng-content select=\"ngx-input-hint\"></ng-content>\n    <span *ngIf=\"hint\" [innerHTML]=\"hint\"></span>\n  </div>\n</div>\n",
        host: { class: 'ngx-input' },
        providers: [INPUT_VALUE_ACCESSOR, INPUT_VALIDATORS],
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        animations: [
            trigger('labelState', [
                state('inside', style({
                    'font-size': '1em',
                    top: '0'
                })),
                state('outside', style({
                    'font-size': '.7rem',
                    top: '-15px'
                })),
                transition('inside => outside', animate('150ms ease-out')),
                transition('outside => inside', animate('150ms ease-out'))
            ]),
            trigger('underlineState', [
                state('collapsed', style({
                    width: '0%'
                })),
                state('expanded', style({
                    width: '100%'
                })),
                transition('collapsed => expanded', animate('150ms ease-out')),
                transition('expanded => collapsed', animate('150ms ease-out'))
            ])
        ],
        styles: ["input[type=number],input[type=password],input[type=tel],input[type=text],textarea{display:inline-block;box-sizing:border-box;outline:0}.form-input{background:#313847;border:1px solid #455066;color:#b6b6b6;-webkit-transition:box-shadow .2s;transition:box-shadow .2s;border-radius:0;font-size:13px;height:32px;line-height:32px;width:100%;padding:6px;margin-bottom:1em}.form-input::-webkit-input-placeholder{color:#647493}.form-input::-moz-placeholder{color:#647493}.form-input::-ms-input-placeholder{color:#647493}.form-input::placeholder{color:#647493}.form-input:focus{box-shadow:0 1px 5px 0 rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.12)}.form-input[disabled]{cursor:not-allowed;color:#363636}textarea.form-input{min-height:120px;line-height:1.3em}.ngx-input{display:block;margin-top:16px;margin-bottom:8px;padding-top:20px;padding-top:calc(.7em + 8px);padding-bottom:0}.ngx-input input:-webkit-autofill,.ngx-input input:-webkit-autofill:active,.ngx-input input:-webkit-autofill:focus,.ngx-input input:-webkit-autofill:hover{-webkit-transition:background-color 5000s ease-in-out;transition:background-color 5000s ease-in-out;-webkit-text-fill-color:#cfcfcf!important}.ngx-input .ngx-input-flex-wrap{-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;display:-webkit-box;display:flex}.ngx-input .ngx-input-flex-wrap .ngx-input-flex-wrap-inner{display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1}.ngx-input .ngx-input-flex-wrap ngx-input-prefix,.ngx-input .ngx-input-flex-wrap ngx-input-suffix{-webkit-box-flex:0;flex:none;white-space:nowrap;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center}.ngx-input .ngx-input-flex-wrap ngx-input-prefix>*,.ngx-input .ngx-input-flex-wrap ngx-input-suffix>*{display:inline-fflex}.ngx-input ngx-input-prefix{margin-right:8px}.ngx-input ngx-input-suffix{margin-left:8px}.ngx-input .ngx-input-wrap{position:relative;display:block;margin-bottom:0;width:100%}.ngx-input .ngx-input-wrap .ngx-input-box-wrap{position:relative;width:100%}.ngx-input .ngx-input-wrap .ngx-input-box-wrap:focus{outline:0}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box,.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-textarea{-webkit-box-flex:1;flex:auto;background:0 0;border:none;margin-bottom:0;padding-left:0;width:100%;color:#cdd2dd;font-size:1em;min-height:0;font-family:inherit}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box::-webkit-input-placeholder,.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-textarea::-webkit-input-placeholder{color:#647493}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box::-moz-placeholder,.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-textarea::-moz-placeholder{color:#647493}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box::-ms-input-placeholder,.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-textarea::-ms-input-placeholder{color:#647493}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box::placeholder,.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-textarea::placeholder{color:#647493}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box:focus,.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-textarea:focus{box-shadow:none;outline:0}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box[disabled],.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-textarea[disabled]{color:#72819f;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box{margin:3px 0}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-textarea{resize:none}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .icon-eye{line-height:25px;top:0;bottom:0;position:absolute;right:10px;cursor:pointer;font-size:.8rem;color:#9c9c9c;-webkit-transition:color .1s;transition:color .1s}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .icon-eye:hover{color:#b6b6b6}.ngx-input .ngx-input-wrap .ngx-input-label{pointer-events:none;position:absolute;font-size:16px}.ngx-input .ngx-input-wrap .ngx-input-underline{width:100%;height:1px;background-color:#5a6884}.ngx-input .ngx-input-wrap .ngx-input-underline .underline-fill{background-color:#1483ff;width:100%;height:2px;margin:0 auto}.ngx-input .ngx-input-wrap .ngx-input-hint{font-size:12px;color:#909cb4;margin-top:2px;min-height:1em}.ngx-input.invalid.ng-touched .ngx-input-underline,.ngx-input.ng-invalid.ng-dirty .ngx-input-underline,.ngx-input.ng-invalid.ng-touched .ngx-input-underline{background-color:#ff4514}.ngx-input.invalid.ng-touched .ngx-input-label,.ngx-input.ng-invalid.ng-dirty .ngx-input-label,.ngx-input.ng-invalid.ng-touched .ngx-input-label{font-weight:600;color:#ff4514}.ngx-input.invalid.ng-touched .ngx-input-hint,.ngx-input.ng-invalid.ng-dirty .ngx-input-hint,.ngx-input.ng-invalid.ng-touched .ngx-input-hint{color:#ff4514}"]
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef])
], InputComponent);
export { InputComponent };
//# sourceMappingURL=data:application/json;base64,