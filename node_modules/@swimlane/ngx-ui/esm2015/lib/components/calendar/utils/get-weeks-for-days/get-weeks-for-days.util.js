import { getNumberRange } from '../get-number-range';
/**
 * Gets a array of days split by week
 * @param days
 * @param offset
 * @return days by week
 */
export function getWeeksForDays(days, startDay) {
    const weeks = [];
    let offset = 7;
    // fill front row
    if (startDay < 7) {
        offset = 7 - startDay;
    }
    while (days.length) {
        let wk = days.slice(0, offset);
        days.splice(0, offset);
        // fill front row
        if (offset < 7) {
            const firstDay = wk[0].date;
            const fill = getNumberRange(0, startDay).map((_, i) => {
                const date = firstDay.clone().subtract(startDay - i, 'd');
                return {
                    num: date.date(),
                    dayOfWeek: date.day(),
                    date,
                    prevMonth: true
                };
            });
            wk = [...fill, ...wk];
            offset = 7;
        }
        // fill last row
        if (!days.length && wk.length !== 7) {
            const lastDay = wk[wk.length - 1].date;
            const fill = getNumberRange(wk.length, 7).map((_, i) => {
                const date = lastDay.clone().add(i + 1, 'd');
                return {
                    num: date.date(),
                    dayOfWeek: date.day(),
                    date,
                    nextMonth: true
                };
            });
            wk = [...wk, ...fill];
        }
        wk.forEach(day => {
            day.classes = {
                'first-day-of-month': day.num === 1,
                'last-day-of-week': day.dayOfWeek === 6,
                today: day.today,
                'next-month': day.nextMonth,
                'prev-month': day.prevMonth
            };
        });
        weeks.push(wk);
    }
    return weeks;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXdlZWtzLWZvci1kYXlzLnV0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvY2FsZW5kYXIvdXRpbHMvZ2V0LXdlZWtzLWZvci1kYXlzL2dldC13ZWVrcy1mb3ItZGF5cy51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVyRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQUMsSUFBbUIsRUFBRSxRQUFnQjtJQUNuRSxNQUFNLEtBQUssR0FBa0IsRUFBRSxDQUFDO0lBQ2hDLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztJQUVmLGlCQUFpQjtJQUNqQixJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUU7UUFDaEIsTUFBTSxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUM7S0FDdkI7SUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDbEIsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFdkIsaUJBQWlCO1FBQ2pCLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNkLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDNUIsTUFBTSxJQUFJLEdBQUcsY0FBYyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3BELE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDMUQsT0FBTztvQkFDTCxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRTtvQkFDaEIsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7b0JBQ3JCLElBQUk7b0JBQ0osU0FBUyxFQUFFLElBQUk7aUJBQ2hCLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztZQUVILEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDdEIsTUFBTSxHQUFHLENBQUMsQ0FBQztTQUNaO1FBRUQsZ0JBQWdCO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ25DLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN2QyxNQUFNLElBQUksR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3JELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDN0MsT0FBTztvQkFDTCxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRTtvQkFDaEIsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7b0JBQ3JCLElBQUk7b0JBQ0osU0FBUyxFQUFFLElBQUk7aUJBQ2hCLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztZQUVILEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDdkI7UUFFRCxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2YsR0FBRyxDQUFDLE9BQU8sR0FBRztnQkFDWixvQkFBb0IsRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ25DLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxTQUFTLEtBQUssQ0FBQztnQkFDdkMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLO2dCQUNoQixZQUFZLEVBQUUsR0FBRyxDQUFDLFNBQVM7Z0JBQzNCLFlBQVksRUFBRSxHQUFHLENBQUMsU0FBUzthQUM1QixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ2hCO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FsZW5kYXJNb250aCB9IGZyb20gJy4uLy4uL2NhbGVuZGFyLW1vbnRoLnR5cGUnO1xuaW1wb3J0IHsgQ2FsZW5kYXJEYXkgfSBmcm9tICcuLi8uLi9jYWxlbmRhci1kYXkuaW50ZXJmYWNlJztcblxuaW1wb3J0IHsgZ2V0TnVtYmVyUmFuZ2UgfSBmcm9tICcuLi9nZXQtbnVtYmVyLXJhbmdlJztcblxuLyoqXG4gKiBHZXRzIGEgYXJyYXkgb2YgZGF5cyBzcGxpdCBieSB3ZWVrXG4gKiBAcGFyYW0gZGF5c1xuICogQHBhcmFtIG9mZnNldFxuICogQHJldHVybiBkYXlzIGJ5IHdlZWtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFdlZWtzRm9yRGF5cyhkYXlzOiBDYWxlbmRhckRheVtdLCBzdGFydERheTogbnVtYmVyKSB7XG4gIGNvbnN0IHdlZWtzOiBDYWxlbmRhck1vbnRoID0gW107XG4gIGxldCBvZmZzZXQgPSA3O1xuXG4gIC8vIGZpbGwgZnJvbnQgcm93XG4gIGlmIChzdGFydERheSA8IDcpIHtcbiAgICBvZmZzZXQgPSA3IC0gc3RhcnREYXk7XG4gIH1cblxuICB3aGlsZSAoZGF5cy5sZW5ndGgpIHtcbiAgICBsZXQgd2sgPSBkYXlzLnNsaWNlKDAsIG9mZnNldCk7XG4gICAgZGF5cy5zcGxpY2UoMCwgb2Zmc2V0KTtcblxuICAgIC8vIGZpbGwgZnJvbnQgcm93XG4gICAgaWYgKG9mZnNldCA8IDcpIHtcbiAgICAgIGNvbnN0IGZpcnN0RGF5ID0gd2tbMF0uZGF0ZTtcbiAgICAgIGNvbnN0IGZpbGwgPSBnZXROdW1iZXJSYW5nZSgwLCBzdGFydERheSkubWFwKChfLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBmaXJzdERheS5jbG9uZSgpLnN1YnRyYWN0KHN0YXJ0RGF5IC0gaSwgJ2QnKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBudW06IGRhdGUuZGF0ZSgpLFxuICAgICAgICAgIGRheU9mV2VlazogZGF0ZS5kYXkoKSxcbiAgICAgICAgICBkYXRlLFxuICAgICAgICAgIHByZXZNb250aDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIHdrID0gWy4uLmZpbGwsIC4uLndrXTtcbiAgICAgIG9mZnNldCA9IDc7XG4gICAgfVxuXG4gICAgLy8gZmlsbCBsYXN0IHJvd1xuICAgIGlmICghZGF5cy5sZW5ndGggJiYgd2subGVuZ3RoICE9PSA3KSB7XG4gICAgICBjb25zdCBsYXN0RGF5ID0gd2tbd2subGVuZ3RoIC0gMV0uZGF0ZTtcbiAgICAgIGNvbnN0IGZpbGwgPSBnZXROdW1iZXJSYW5nZSh3ay5sZW5ndGgsIDcpLm1hcCgoXywgaSkgPT4ge1xuICAgICAgICBjb25zdCBkYXRlID0gbGFzdERheS5jbG9uZSgpLmFkZChpICsgMSwgJ2QnKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBudW06IGRhdGUuZGF0ZSgpLFxuICAgICAgICAgIGRheU9mV2VlazogZGF0ZS5kYXkoKSxcbiAgICAgICAgICBkYXRlLFxuICAgICAgICAgIG5leHRNb250aDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIHdrID0gWy4uLndrLCAuLi5maWxsXTtcbiAgICB9XG5cbiAgICB3ay5mb3JFYWNoKGRheSA9PiB7XG4gICAgICBkYXkuY2xhc3NlcyA9IHtcbiAgICAgICAgJ2ZpcnN0LWRheS1vZi1tb250aCc6IGRheS5udW0gPT09IDEsXG4gICAgICAgICdsYXN0LWRheS1vZi13ZWVrJzogZGF5LmRheU9mV2VlayA9PT0gNixcbiAgICAgICAgdG9kYXk6IGRheS50b2RheSxcbiAgICAgICAgJ25leHQtbW9udGgnOiBkYXkubmV4dE1vbnRoLFxuICAgICAgICAncHJldi1tb250aCc6IGRheS5wcmV2TW9udGhcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICB3ZWVrcy5wdXNoKHdrKTtcbiAgfVxuXG4gIHJldHVybiB3ZWVrcztcbn1cbiJdfQ==