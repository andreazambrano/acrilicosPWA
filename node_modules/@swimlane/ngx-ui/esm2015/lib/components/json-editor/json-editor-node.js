import { __decorate, __metadata } from "tslib";
import { Input, EventEmitter, Output, TemplateRef, ViewChild } from '@angular/core';
import { createValueForSchema, inferType } from './json-editor.helper';
export class JsonEditorNode {
    constructor(dialogMngr) {
        this.dialogMngr = dialogMngr;
        this.required = false;
        this.inline = false;
        this.path = '';
        this.modelChange = new EventEmitter();
        this.schemaChange = new EventEmitter();
        this.requiredCache = {};
        this.expanded = true;
        this.valid = true;
        this.childrenValid = true;
        this.editorConfig = {
            lineNumbers: true,
            theme: 'dracula',
            mode: {
                label: 'Javascript',
                name: 'javascript',
                json: true
            }
        };
        this.editorModel = '';
        this.editorVisible = true;
        this.editorModes = [
            {
                label: 'Javascript',
                name: 'javascript',
                json: true
            },
            {
                label: 'YAML',
                name: 'yaml'
            },
            {
                label: 'Python',
                name: 'python'
            },
            {
                label: 'Powershell',
                name: 'powershell'
            },
            {
                label: 'HTML',
                name: 'htmlmixed'
            }
        ];
    }
    ngOnInit() {
        if (!this.schema) {
            this.schema = Object.assign({}, inferType(this.model, this.typeCheckOverrides));
        }
        if (this.schema.required) {
            for (const prop of this.schema.required) {
                this.requiredCache[prop] = true;
            }
        }
        if (Array.isArray(this.schema.type) && this.schema.type.length > 0) {
            if (!this.schema.$meta) {
                this.schema.$meta = {};
            }
            this.schema.$meta.type = [...this.schema.type];
            if (this.model !== undefined) {
                this.schema = Object.assign(Object.assign({}, this.schema), inferType(this.model, this.typeCheckOverrides, this.schema.$meta.type));
            }
            else {
                this.schema.type = this.schema.type[0];
                this.schema.$meta.currentType = this.schema.type;
            }
        }
        setTimeout(() => {
            this.initModel();
        });
    }
    ngOnChanges(changes) {
        if (changes.errors) {
            this.processErrors();
        }
    }
    /**
     * Inits the model if it is not defined
     */
    initModel() {
        if (this.model !== undefined) {
            return;
        }
        if (!this.schema) {
            return;
        }
        const value = createValueForSchema(this.schema);
        if (value !== undefined) {
            this.updateModel(value);
        }
    }
    /**
     * Process the errors input to figure out whether it or any of its children are invalid
     */
    processErrors() {
        this.ownErrors = [];
        this.childrenErrors = [];
        if (this.errors && this.errors.length) {
            this.ownErrors = this.errors.filter(e => {
                return e.dataPath === this.path;
            });
            this.childrenErrors = this.errors.filter(e => {
                return e.dataPath.startsWith(this.path);
            });
        }
        this.childrenValid = this.childrenErrors.length === 0;
        this.valid = this.ownErrors.length === 0;
    }
    /**
     * Updates the whole model and emits the change event
     * @param value
     */
    updateModel(value) {
        this.model = value;
        this.modelChange.emit(this.model);
    }
    /**
     * Expand click event
     */
    onExpandClick() {
        this.expanded = !this.expanded;
    }
    /**
     * Opens the code editor dialog
     */
    openCodeEditor() {
        this.editorModel = this.model;
        this.editorDialog = this.dialogMngr.create({ template: this.codeEditorTpl, class: 'code-editor-dialog' });
    }
    /**
     * Closes the code editor dialog
     */
    closeCodeEditor() {
        this.dialogMngr.destroy(this.editorDialog);
    }
    /**
     * Sets the editor mode and refreshes the editor
     */
    selectEditorMode(modeName) {
        this.editorConfig.mode.name = modeName;
        this.editorConfig = Object.assign({}, this.editorConfig);
        this.editorVisible = false;
        setTimeout(() => {
            this.editorVisible = true;
        });
    }
}
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorNode.prototype, "schema", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorNode.prototype, "model", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], JsonEditorNode.prototype, "required", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], JsonEditorNode.prototype, "inline", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], JsonEditorNode.prototype, "path", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], JsonEditorNode.prototype, "errors", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorNode.prototype, "typeCheckOverrides", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], JsonEditorNode.prototype, "modelChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], JsonEditorNode.prototype, "schemaChange", void 0);
__decorate([
    ViewChild('codeEditorTpl'),
    __metadata("design:type", TemplateRef)
], JsonEditorNode.prototype, "codeEditorTpl", void 0);
//# sourceMappingURL=data:application/json;base64,