import { __decorate, __metadata } from "tslib";
import { Input, EventEmitter, Output } from '@angular/core';
import { createValueForSchema, jsonSchemaDataTypes, jsonSchemaDataFormats, inferType, dataTypeMap, getIcon, getCurrentType } from '../json-editor.helper';
export class ObjectNode {
    constructor(cdr) {
        this.cdr = cdr;
        this.required = false;
        this.modelChange = new EventEmitter();
        this.schemaChange = new EventEmitter();
        this.requiredCache = {};
        this.dataTypes = [...jsonSchemaDataTypes, ...jsonSchemaDataFormats];
        this.propertyCounter = 1;
        this.propertyId = 1;
        this.propertyIndex = {};
        this.dataTypeMap = dataTypeMap;
    }
    ngOnInit() {
        this.update();
    }
    ngOnChanges(changes) {
        if (changes.model !== undefined || changes.schema !== undefined) {
            this.update();
        }
    }
    update() {
        setTimeout(() => {
            for (const prop in this.schema.properties) {
                if (Array.isArray(this.schema.properties[prop].type) && this.schema.properties[prop].type.length > 0) {
                    if (!this.schema.properties[prop].$meta) {
                        this.schema.properties[prop].$meta = {};
                    }
                    this.schema.properties[prop].$meta.type = [...this.schema.properties[prop].type];
                    if (this.model[prop] !== undefined) {
                        this.schema.properties[prop] = Object.assign(Object.assign({}, this.schema.properties[prop]), inferType(this.model[prop], this.typeCheckOverrides, this.schema.properties[prop].$meta.type));
                    }
                    else {
                        this.schema.properties[prop].type = this.schema.properties[prop].type[0];
                        this.schema.properties[prop].$meta.currentType = getCurrentType(this.schema.properties[prop]);
                    }
                }
            }
            this.updateRequiredCache();
            this.indexProperties();
            this.addRequiredProperties();
            this.updateIcons();
        });
    }
    /**
     * Updates a property on the model and emits the change event
     * @param propName
     * @param value
     */
    updateProp(id, value) {
        const propName = this.propertyIndex[id].propertyName;
        this.model[propName] = value;
        this.modelChange.emit(this.model);
    }
    /**
     * Updates the name of a property
     * @param id
     * @param name
     */
    updatePropertyName(id, name) {
        const oldName = this.propertyIndex[id].propertyName;
        this.model[name] = this.model[oldName];
        this.propertyIndex[id].propertyName = name;
        delete this.model[oldName];
        this.propertyIndex = Object.assign({}, this.propertyIndex);
        this.modelChange.emit(this.model);
    }
    /**
     * Adds a new property to the model
     */
    addProperty(dataType) {
        const propName = `${dataType.name} ${this.propertyCounter}`;
        this.propertyCounter++;
        const schema = JSON.parse(JSON.stringify(dataType.schema));
        this.model[propName] = createValueForSchema(dataType.schema);
        schema.nameEditable = !this.schemaBuilderMode;
        schema.propertyName = propName;
        schema.id = this.propertyId++;
        this.propertyIndex[schema.id] = schema;
        this.propertyIndex = Object.assign({}, this.propertyIndex);
        this.modelChange.emit(this.model);
        this.updateIcons();
    }
    /**
     * Adds a new property as defined in the schema
     */
    addSchemaProperty(propName) {
        if (this.model[propName] !== undefined) {
            return;
        }
        const schema = JSON.parse(JSON.stringify(this.schema.properties[propName]));
        if (!schema.type) {
            schema.type = 'object';
        }
        const value = createValueForSchema(schema);
        this.model[propName] = value;
        schema.nameEditable = false;
        schema.propertyName = propName;
        schema.id = this.propertyId++;
        this.propertyIndex[schema.id] = schema;
        this.propertyIndex = Object.assign({}, this.propertyIndex);
        this.modelChange.emit(this.model);
        this.updateIcons();
    }
    /**
     * Adds a new patternProperty as defined in the schema
     */
    addSchemaPatternProperty(propName) {
        const newPropName = `new ${this.schema.patternProperties[propName].title} ${this.propertyCounter}`;
        this.propertyCounter++;
        const schema = JSON.parse(JSON.stringify(this.schema.patternProperties[propName]));
        schema.isPatternProperty = true;
        if (!schema.type) {
            schema.type = 'object';
        }
        const value = createValueForSchema(schema);
        this.model[newPropName] = value;
        schema.nameEditable = true;
        schema.propertyName = newPropName;
        schema.id = this.propertyId++;
        this.propertyIndex[schema.id] = schema;
        this.propertyIndex = Object.assign({}, this.propertyIndex);
        this.modelChange.emit(this.model);
        this.updateIcons();
    }
    /**
     * Deletes a property
     */
    deleteProperty(propName) {
        delete this.model[propName];
        for (const id in this.propertyIndex) {
            if (this.propertyIndex[id].propertyName === propName) {
                delete this.propertyIndex[id];
                break;
            }
        }
        this.model = Object.assign({}, this.model);
        this.propertyIndex = Object.assign({}, this.propertyIndex);
        this.modelChange.emit(this.model);
    }
    /**
     * Returns the absolute tree path of the property
     */
    getPath(propName) {
        let propSchema;
        for (const id in this.propertyIndex) {
            if (this.propertyIndex[id].propertyName === propName) {
                propSchema = this.propertyIndex[id];
                break;
            }
        }
        if (propSchema.isPatternProperty) {
            return `['${propName}']`;
        }
        return `.${propName}`;
    }
    /**
     * Updates the required cache
     */
    updateRequiredCache() {
        this.requiredCache = {};
        if (this.schema && this.schema.required) {
            for (const prop of this.schema.required) {
                this.requiredCache[prop] = true;
            }
        }
    }
    /**
     * Creates an index out of all the properties in the model
     */
    indexProperties() {
        const props = this.schemaBuilderMode ? this.schemaRef.properties : this.model;
        for (const prop in props) {
            if (this.isIndexed(prop)) {
                continue;
            }
            let schema;
            if (this.schema.properties && this.schema.properties[prop]) {
                schema = JSON.parse(JSON.stringify(this.schema.properties[prop]));
            }
            else {
                let matchesPattern = false;
                if (this.schema.patternProperties) {
                    for (const pattern in this.schema.patternProperties) {
                        const patternRegex = new RegExp(pattern);
                        if (patternRegex.test(prop)) {
                            schema = JSON.parse(JSON.stringify(this.schema.patternProperties[pattern]));
                            matchesPattern = true;
                        }
                    }
                }
                if (!matchesPattern) {
                    schema = Object.assign({}, inferType(this.model[prop], this.typeCheckOverrides));
                }
            }
            schema.id = this.propertyId++;
            schema.propertyName = prop;
            this.propertyIndex[schema.id] = schema;
            this.propertyIndex = Object.assign({}, this.propertyIndex);
        }
        for (const id in this.propertyIndex) {
            const schema = this.propertyIndex[id];
            if (this.model[schema.propertyName] === undefined) {
                delete this.propertyIndex[id];
            }
        }
        this.propertyIndex = Object.assign({}, this.propertyIndex);
        this.cdr.markForCheck();
    }
    isIndexed(propertyName) {
        return Object.values(this.propertyIndex).findIndex((s) => s.propertyName === propertyName) !== -1;
    }
    /**
     * Inits the required properties on the model
     */
    addRequiredProperties() {
        if (this.schema && this.schema.properties) {
            for (const propName in this.schema.properties) {
                if (this.model[propName] !== undefined) {
                    continue;
                }
                if (this.requiredCache[propName] || this.schemaBuilderMode) {
                    // List all properties not only required if we are in schema builder mode
                    this.addSchemaProperty(propName);
                }
            }
        }
    }
    /**
     *
     * @param property
     * @param type
     */
    changePropertyType(property, type) {
        const dataType = this.dataTypeMap[type];
        if (dataType) {
            delete property.format;
            property.type = dataType.schema.type;
            if (dataType.schema.format) {
                property.format = dataType.schema.format;
            }
            property.$meta.currentType = getCurrentType(property);
            this.schema.properties[property.propertyName] = Object.assign({}, property);
        }
        const value = createValueForSchema(property);
        this.model[property.propertyName] = value;
        this.modelChange.emit(this.model);
        this.updateIcons();
    }
    /**
     * Track By function for the array ittierator
     * @param index
     * @param value
     */
    trackBy(_, value) {
        return value.id;
    }
    /**
     * Updates the icons in the schemas
     */
    updateIcons() {
        for (const id in this.propertyIndex) {
            const schema = this.propertyIndex[id];
            if (!schema.$meta) {
                schema.$meta = {};
            }
            schema.$meta.icon = getIcon(schema);
        }
    }
}
__decorate([
    Input(),
    __metadata("design:type", Object)
], ObjectNode.prototype, "schema", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], ObjectNode.prototype, "model", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ObjectNode.prototype, "required", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ObjectNode.prototype, "expanded", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ObjectNode.prototype, "path", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], ObjectNode.prototype, "errors", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], ObjectNode.prototype, "typeCheckOverrides", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ObjectNode.prototype, "schemaBuilderMode", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], ObjectNode.prototype, "schemaRef", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ObjectNode.prototype, "modelChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ObjectNode.prototype, "schemaChange", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LW5vZGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3aW1sYW5lL25neC11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2pzb24tZWRpdG9yL25vZGUtdHlwZXMvb2JqZWN0LW5vZGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQXVELE1BQU0sZUFBZSxDQUFDO0FBRWpILE9BQU8sRUFDTCxvQkFBb0IsRUFDcEIsbUJBQW1CLEVBQ25CLHFCQUFxQixFQUNyQixTQUFTLEVBQ1QsV0FBVyxFQUNYLE9BQU8sRUFDUCxjQUFjLEVBSWYsTUFBTSx1QkFBdUIsQ0FBQztBQUcvQixNQUFNLE9BQU8sVUFBVTtJQWdDckIsWUFBc0IsR0FBc0I7UUFBdEIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUEzQm5DLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFjekIsZ0JBQVcsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVwRCxpQkFBWSxHQUFtQyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTVFLGtCQUFhLEdBQStCLEVBQUUsQ0FBQztRQUUvQyxjQUFTLEdBQXlCLENBQUMsR0FBRyxtQkFBbUIsRUFBRSxHQUFHLHFCQUFxQixDQUFDLENBQUM7UUFDckYsb0JBQWUsR0FBVyxDQUFDLENBQUM7UUFDNUIsZUFBVSxHQUFXLENBQUMsQ0FBQztRQUN2QixrQkFBYSxHQUFrQixFQUFFLENBQUM7UUFFbEMsZ0JBQVcsR0FBRyxXQUFXLENBQUM7SUFFcUIsQ0FBQztJQUVoRCxRQUFRO1FBQ04sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUMvRCxJQUFJLENBQUMsTUFB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QU0sRUFBRSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDbkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtnQkFDakIsTUFBTSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7YUFDbkI7WUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDckM7SUFDSCxDQUFDO0NBQ0Y7QUEvVVU7SUFBUixLQUFLLEVBQUU7OzBDQUEwQjtBQUV6QjtJQUFSLEtBQUssRUFBRTs7eUNBQVk7QUFFWDtJQUFSLEtBQUssRUFBRTs7NENBQTJCO0FBRTFCO0lBQVIsS0FBSyxFQUFFOzs0Q0FBbUI7QUFFbEI7SUFBUixLQUFLLEVBQUU7O3dDQUFjO0FBRWI7SUFBUixLQUFLLEVBQUU7OzBDQUFlO0FBRWQ7SUFBUixLQUFLLEVBQUU7O3NEQUEwQjtBQUV6QjtJQUFSLEtBQUssRUFBRTs7cURBQTRCO0FBRTNCO0lBQVIsS0FBSyxFQUFFOzs2Q0FBNkI7QUFFM0I7SUFBVCxNQUFNLEVBQUU7OEJBQWMsWUFBWTsrQ0FBMkI7QUFFcEQ7SUFBVCxNQUFNLEVBQUU7OEJBQWUsWUFBWTtnREFBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIE9uSW5pdCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1xuICBjcmVhdGVWYWx1ZUZvclNjaGVtYSxcbiAganNvblNjaGVtYURhdGFUeXBlcyxcbiAganNvblNjaGVtYURhdGFGb3JtYXRzLFxuICBpbmZlclR5cGUsXG4gIGRhdGFUeXBlTWFwLFxuICBnZXRJY29uLFxuICBnZXRDdXJyZW50VHlwZSxcbiAgSnNvblNjaGVtYURhdGFUeXBlLFxuICBKU09ORWRpdG9yU2NoZW1hLFxuICBQcm9wZXJ0eUluZGV4XG59IGZyb20gJy4uL2pzb24tZWRpdG9yLmhlbHBlcic7XG5pbXBvcnQgeyBKU09OU2NoZW1hN1R5cGVOYW1lIH0gZnJvbSAnanNvbi1zY2hlbWEnO1xuXG5leHBvcnQgY2xhc3MgT2JqZWN0Tm9kZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgc2NoZW1hOiBKU09ORWRpdG9yU2NoZW1hO1xuXG4gIEBJbnB1dCgpIG1vZGVsOiBhbnk7XG5cbiAgQElucHV0KCkgcmVxdWlyZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBASW5wdXQoKSBleHBhbmRlZDogYm9vbGVhbjtcblxuICBASW5wdXQoKSBwYXRoOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgZXJyb3JzOiBhbnlbXTtcblxuICBASW5wdXQoKSB0eXBlQ2hlY2tPdmVycmlkZXM/OiBhbnk7XG5cbiAgQElucHV0KCkgc2NoZW1hQnVpbGRlck1vZGU6IGJvb2xlYW47XG5cbiAgQElucHV0KCkgc2NoZW1hUmVmOiBKU09ORWRpdG9yU2NoZW1hO1xuXG4gIEBPdXRwdXQoKSBtb2RlbENoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQE91dHB1dCgpIHNjaGVtYUNoYW5nZTogRXZlbnRFbWl0dGVyPEpTT05FZGl0b3JTY2hlbWE+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHJlcXVpcmVkQ2FjaGU6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9ID0ge307XG5cbiAgZGF0YVR5cGVzOiBKc29uU2NoZW1hRGF0YVR5cGVbXSA9IFsuLi5qc29uU2NoZW1hRGF0YVR5cGVzLCAuLi5qc29uU2NoZW1hRGF0YUZvcm1hdHNdO1xuICBwcm9wZXJ0eUNvdW50ZXI6IG51bWJlciA9IDE7XG4gIHByb3BlcnR5SWQ6IG51bWJlciA9IDE7XG4gIHByb3BlcnR5SW5kZXg6IFByb3BlcnR5SW5kZXggPSB7fTtcblxuICBkYXRhVHlwZU1hcCA9IGRhdGFUeXBlTWFwO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMubW9kZWwgIT09IHVuZGVmaW5lZCB8fCBjaGFuZ2VzLnNjaGVtYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGZvciAoY29uc3QgcHJvcCBpbiB0aGlzLnNjaGVtYS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuc2NoZW1hLnByb3BlcnRpZXNbcHJvcF0udHlwZSkgJiYgdGhpcy5zY2hlbWEucHJvcGVydGllc1twcm9wXS50eXBlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAoIXRoaXMuc2NoZW1hLnByb3BlcnRpZXNbcHJvcF0uJG1ldGEpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hLnByb3BlcnRpZXNbcHJvcF0uJG1ldGEgPSB7fTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnNjaGVtYS5wcm9wZXJ0aWVzW3Byb3BdLiRtZXRhLnR5cGUgPSBbLi4udGhpcy5zY2hlbWEucHJvcGVydGllc1twcm9wXS50eXBlXTtcblxuICAgICAgICAgIGlmICh0aGlzLm1vZGVsW3Byb3BdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hLnByb3BlcnRpZXNbcHJvcF0gPSB7XG4gICAgICAgICAgICAgIC4uLnRoaXMuc2NoZW1hLnByb3BlcnRpZXNbcHJvcF0sXG4gICAgICAgICAgICAgIC4uLmluZmVyVHlwZSh0aGlzLm1vZGVsW3Byb3BdLCB0aGlzLnR5cGVDaGVja092ZXJyaWRlcywgdGhpcy5zY2hlbWEucHJvcGVydGllc1twcm9wXS4kbWV0YS50eXBlKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zY2hlbWEucHJvcGVydGllc1twcm9wXS50eXBlID0gdGhpcy5zY2hlbWEucHJvcGVydGllc1twcm9wXS50eXBlWzBdIGFzIEpTT05TY2hlbWE3VHlwZU5hbWU7XG4gICAgICAgICAgICB0aGlzLnNjaGVtYS5wcm9wZXJ0aWVzW3Byb3BdLiRtZXRhLmN1cnJlbnRUeXBlID0gZ2V0Q3VycmVudFR5cGUodGhpcy5zY2hlbWEucHJvcGVydGllc1twcm9wXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlUmVxdWlyZWRDYWNoZSgpO1xuICAgICAgdGhpcy5pbmRleFByb3BlcnRpZXMoKTtcbiAgICAgIHRoaXMuYWRkUmVxdWlyZWRQcm9wZXJ0aWVzKCk7XG4gICAgICB0aGlzLnVwZGF0ZUljb25zKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyBhIHByb3BlcnR5IG9uIHRoZSBtb2RlbCBhbmQgZW1pdHMgdGhlIGNoYW5nZSBldmVudFxuICAgKiBAcGFyYW0gcHJvcE5hbWVcbiAgICogQHBhcmFtIHZhbHVlXG4gICAqL1xuICB1cGRhdGVQcm9wKGlkOiBudW1iZXIgfCBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCBwcm9wTmFtZSA9IHRoaXMucHJvcGVydHlJbmRleFtpZF0ucHJvcGVydHlOYW1lO1xuICAgIHRoaXMubW9kZWxbcHJvcE5hbWVdID0gdmFsdWU7XG4gICAgdGhpcy5tb2RlbENoYW5nZS5lbWl0KHRoaXMubW9kZWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIG5hbWUgb2YgYSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gaWRcbiAgICogQHBhcmFtIG5hbWVcbiAgICovXG4gIHVwZGF0ZVByb3BlcnR5TmFtZShpZDogbnVtYmVyIHwgc3RyaW5nLCBuYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBvbGROYW1lID0gdGhpcy5wcm9wZXJ0eUluZGV4W2lkXS5wcm9wZXJ0eU5hbWU7XG4gICAgdGhpcy5tb2RlbFtuYW1lXSA9IHRoaXMubW9kZWxbb2xkTmFtZV07XG4gICAgdGhpcy5wcm9wZXJ0eUluZGV4W2lkXS5wcm9wZXJ0eU5hbWUgPSBuYW1lO1xuICAgIGRlbGV0ZSB0aGlzLm1vZGVsW29sZE5hbWVdO1xuICAgIHRoaXMucHJvcGVydHlJbmRleCA9IHsgLi4udGhpcy5wcm9wZXJ0eUluZGV4IH07XG4gICAgdGhpcy5tb2RlbENoYW5nZS5lbWl0KHRoaXMubW9kZWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBuZXcgcHJvcGVydHkgdG8gdGhlIG1vZGVsXG4gICAqL1xuICBhZGRQcm9wZXJ0eShkYXRhVHlwZTogSnNvblNjaGVtYURhdGFUeXBlKTogdm9pZCB7XG4gICAgY29uc3QgcHJvcE5hbWUgPSBgJHtkYXRhVHlwZS5uYW1lfSAke3RoaXMucHJvcGVydHlDb3VudGVyfWA7XG4gICAgdGhpcy5wcm9wZXJ0eUNvdW50ZXIrKztcbiAgICBjb25zdCBzY2hlbWEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRhdGFUeXBlLnNjaGVtYSkpO1xuXG4gICAgdGhpcy5tb2RlbFtwcm9wTmFtZV0gPSBjcmVhdGVWYWx1ZUZvclNjaGVtYShkYXRhVHlwZS5zY2hlbWEgYXMgSlNPTkVkaXRvclNjaGVtYSk7XG4gICAgc2NoZW1hLm5hbWVFZGl0YWJsZSA9ICF0aGlzLnNjaGVtYUJ1aWxkZXJNb2RlO1xuICAgIHNjaGVtYS5wcm9wZXJ0eU5hbWUgPSBwcm9wTmFtZTtcblxuICAgIHNjaGVtYS5pZCA9IHRoaXMucHJvcGVydHlJZCsrO1xuICAgIHRoaXMucHJvcGVydHlJbmRleFtzY2hlbWEuaWRdID0gc2NoZW1hO1xuICAgIHRoaXMucHJvcGVydHlJbmRleCA9IHsgLi4udGhpcy5wcm9wZXJ0eUluZGV4IH07XG5cbiAgICB0aGlzLm1vZGVsQ2hhbmdlLmVtaXQodGhpcy5tb2RlbCk7XG4gICAgdGhpcy51cGRhdGVJY29ucygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBuZXcgcHJvcGVydHkgYXMgZGVmaW5lZCBpbiB0aGUgc2NoZW1hXG4gICAqL1xuICBhZGRTY2hlbWFQcm9wZXJ0eShwcm9wTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubW9kZWxbcHJvcE5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzY2hlbWEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuc2NoZW1hLnByb3BlcnRpZXNbcHJvcE5hbWVdKSk7XG4gICAgaWYgKCFzY2hlbWEudHlwZSkge1xuICAgICAgc2NoZW1hLnR5cGUgPSAnb2JqZWN0JztcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZTogYW55ID0gY3JlYXRlVmFsdWVGb3JTY2hlbWEoc2NoZW1hKTtcbiAgICB0aGlzLm1vZGVsW3Byb3BOYW1lXSA9IHZhbHVlO1xuXG4gICAgc2NoZW1hLm5hbWVFZGl0YWJsZSA9IGZhbHNlO1xuICAgIHNjaGVtYS5wcm9wZXJ0eU5hbWUgPSBwcm9wTmFtZTtcbiAgICBzY2hlbWEuaWQgPSB0aGlzLnByb3BlcnR5SWQrKztcbiAgICB0aGlzLnByb3BlcnR5SW5kZXhbc2NoZW1hLmlkXSA9IHNjaGVtYTtcbiAgICB0aGlzLnByb3BlcnR5SW5kZXggPSB7IC4uLnRoaXMucHJvcGVydHlJbmRleCB9O1xuXG4gICAgdGhpcy5tb2RlbENoYW5nZS5lbWl0KHRoaXMubW9kZWwpO1xuICAgIHRoaXMudXBkYXRlSWNvbnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgbmV3IHBhdHRlcm5Qcm9wZXJ0eSBhcyBkZWZpbmVkIGluIHRoZSBzY2hlbWFcbiAgICovXG4gIGFkZFNjaGVtYVBhdHRlcm5Qcm9wZXJ0eShwcm9wTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgbmV3UHJvcE5hbWUgPSBgbmV3ICR7dGhpcy5zY2hlbWEucGF0dGVyblByb3BlcnRpZXNbcHJvcE5hbWVdLnRpdGxlfSAke3RoaXMucHJvcGVydHlDb3VudGVyfWA7XG4gICAgdGhpcy5wcm9wZXJ0eUNvdW50ZXIrKztcblxuICAgIGNvbnN0IHNjaGVtYSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5zY2hlbWEucGF0dGVyblByb3BlcnRpZXNbcHJvcE5hbWVdKSk7XG4gICAgc2NoZW1hLmlzUGF0dGVyblByb3BlcnR5ID0gdHJ1ZTtcbiAgICBpZiAoIXNjaGVtYS50eXBlKSB7XG4gICAgICBzY2hlbWEudHlwZSA9ICdvYmplY3QnO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlOiBhbnkgPSBjcmVhdGVWYWx1ZUZvclNjaGVtYShzY2hlbWEpO1xuICAgIHRoaXMubW9kZWxbbmV3UHJvcE5hbWVdID0gdmFsdWU7XG5cbiAgICBzY2hlbWEubmFtZUVkaXRhYmxlID0gdHJ1ZTtcbiAgICBzY2hlbWEucHJvcGVydHlOYW1lID0gbmV3UHJvcE5hbWU7XG4gICAgc2NoZW1hLmlkID0gdGhpcy5wcm9wZXJ0eUlkKys7XG4gICAgdGhpcy5wcm9wZXJ0eUluZGV4W3NjaGVtYS5pZF0gPSBzY2hlbWE7XG4gICAgdGhpcy5wcm9wZXJ0eUluZGV4ID0geyAuLi50aGlzLnByb3BlcnR5SW5kZXggfTtcblxuICAgIHRoaXMubW9kZWxDaGFuZ2UuZW1pdCh0aGlzLm1vZGVsKTtcbiAgICB0aGlzLnVwZGF0ZUljb25zKCk7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhIHByb3BlcnR5XG4gICAqL1xuICBkZWxldGVQcm9wZXJ0eShwcm9wTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgZGVsZXRlIHRoaXMubW9kZWxbcHJvcE5hbWVdO1xuICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5wcm9wZXJ0eUluZGV4KSB7XG4gICAgICBpZiAodGhpcy5wcm9wZXJ0eUluZGV4W2lkXS5wcm9wZXJ0eU5hbWUgPT09IHByb3BOYW1lKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnByb3BlcnR5SW5kZXhbaWRdO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5tb2RlbCA9IHsgLi4udGhpcy5tb2RlbCB9O1xuICAgIHRoaXMucHJvcGVydHlJbmRleCA9IHsgLi4udGhpcy5wcm9wZXJ0eUluZGV4IH07XG4gICAgdGhpcy5tb2RlbENoYW5nZS5lbWl0KHRoaXMubW9kZWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFic29sdXRlIHRyZWUgcGF0aCBvZiB0aGUgcHJvcGVydHlcbiAgICovXG4gIGdldFBhdGgocHJvcE5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgbGV0IHByb3BTY2hlbWE7XG5cbiAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMucHJvcGVydHlJbmRleCkge1xuICAgICAgaWYgKHRoaXMucHJvcGVydHlJbmRleFtpZF0ucHJvcGVydHlOYW1lID09PSBwcm9wTmFtZSkge1xuICAgICAgICBwcm9wU2NoZW1hID0gdGhpcy5wcm9wZXJ0eUluZGV4W2lkXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByb3BTY2hlbWEuaXNQYXR0ZXJuUHJvcGVydHkpIHtcbiAgICAgIHJldHVybiBgWycke3Byb3BOYW1lfSddYDtcbiAgICB9XG5cbiAgICByZXR1cm4gYC4ke3Byb3BOYW1lfWA7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgcmVxdWlyZWQgY2FjaGVcbiAgICovXG4gIHVwZGF0ZVJlcXVpcmVkQ2FjaGUoKTogdm9pZCB7XG4gICAgdGhpcy5yZXF1aXJlZENhY2hlID0ge307XG4gICAgaWYgKHRoaXMuc2NoZW1hICYmIHRoaXMuc2NoZW1hLnJlcXVpcmVkKSB7XG4gICAgICBmb3IgKGNvbnN0IHByb3Agb2YgdGhpcy5zY2hlbWEucmVxdWlyZWQpIHtcbiAgICAgICAgdGhpcy5yZXF1aXJlZENhY2hlW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbmRleCBvdXQgb2YgYWxsIHRoZSBwcm9wZXJ0aWVzIGluIHRoZSBtb2RlbFxuICAgKi9cbiAgaW5kZXhQcm9wZXJ0aWVzKCk6IHZvaWQge1xuICAgIGNvbnN0IHByb3BzID0gdGhpcy5zY2hlbWFCdWlsZGVyTW9kZSA/IHRoaXMuc2NoZW1hUmVmLnByb3BlcnRpZXMgOiB0aGlzLm1vZGVsO1xuXG4gICAgZm9yIChjb25zdCBwcm9wIGluIHByb3BzKSB7XG4gICAgICBpZiAodGhpcy5pc0luZGV4ZWQocHJvcCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBzY2hlbWE6IEpTT05FZGl0b3JTY2hlbWE7XG5cbiAgICAgIGlmICh0aGlzLnNjaGVtYS5wcm9wZXJ0aWVzICYmIHRoaXMuc2NoZW1hLnByb3BlcnRpZXNbcHJvcF0pIHtcbiAgICAgICAgc2NoZW1hID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnNjaGVtYS5wcm9wZXJ0aWVzW3Byb3BdKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgbWF0Y2hlc1BhdHRlcm4gPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIGluIHRoaXMuc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBjb25zdCBwYXR0ZXJuUmVnZXggPSBuZXcgUmVnRXhwKHBhdHRlcm4pO1xuICAgICAgICAgICAgaWYgKHBhdHRlcm5SZWdleC50ZXN0KHByb3ApKSB7XG4gICAgICAgICAgICAgIHNjaGVtYSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5zY2hlbWEucGF0dGVyblByb3BlcnRpZXNbcGF0dGVybl0pKTtcbiAgICAgICAgICAgICAgbWF0Y2hlc1BhdHRlcm4gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbWF0Y2hlc1BhdHRlcm4pIHtcbiAgICAgICAgICBzY2hlbWEgPSB7XG4gICAgICAgICAgICAuLi5pbmZlclR5cGUodGhpcy5tb2RlbFtwcm9wXSwgdGhpcy50eXBlQ2hlY2tPdmVycmlkZXMpXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzY2hlbWEuaWQgPSB0aGlzLnByb3BlcnR5SWQrKztcbiAgICAgIHNjaGVtYS5wcm9wZXJ0eU5hbWUgPSBwcm9wO1xuICAgICAgdGhpcy5wcm9wZXJ0eUluZGV4W3NjaGVtYS5pZF0gPSBzY2hlbWE7XG4gICAgICB0aGlzLnByb3BlcnR5SW5kZXggPSB7IC4uLnRoaXMucHJvcGVydHlJbmRleCB9O1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5wcm9wZXJ0eUluZGV4KSB7XG4gICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLnByb3BlcnR5SW5kZXhbaWRdO1xuICAgICAgaWYgKHRoaXMubW9kZWxbc2NoZW1hLnByb3BlcnR5TmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWxldGUgdGhpcy5wcm9wZXJ0eUluZGV4W2lkXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnByb3BlcnR5SW5kZXggPSB7IC4uLnRoaXMucHJvcGVydHlJbmRleCB9O1xuICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgaXNJbmRleGVkKHByb3BlcnR5TmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5wcm9wZXJ0eUluZGV4KS5maW5kSW5kZXgoKHM6IEpTT05FZGl0b3JTY2hlbWEpID0+IHMucHJvcGVydHlOYW1lID09PSBwcm9wZXJ0eU5hbWUpICE9PSAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0cyB0aGUgcmVxdWlyZWQgcHJvcGVydGllcyBvbiB0aGUgbW9kZWxcbiAgICovXG4gIGFkZFJlcXVpcmVkUHJvcGVydGllcygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zY2hlbWEgJiYgdGhpcy5zY2hlbWEucHJvcGVydGllcykge1xuICAgICAgZm9yIChjb25zdCBwcm9wTmFtZSBpbiB0aGlzLnNjaGVtYS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgIGlmICh0aGlzLm1vZGVsW3Byb3BOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5yZXF1aXJlZENhY2hlW3Byb3BOYW1lXSB8fCB0aGlzLnNjaGVtYUJ1aWxkZXJNb2RlKSB7XG4gICAgICAgICAgLy8gTGlzdCBhbGwgcHJvcGVydGllcyBub3Qgb25seSByZXF1aXJlZCBpZiB3ZSBhcmUgaW4gc2NoZW1hIGJ1aWxkZXIgbW9kZVxuICAgICAgICAgIHRoaXMuYWRkU2NoZW1hUHJvcGVydHkocHJvcE5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gdHlwZVxuICAgKi9cbiAgY2hhbmdlUHJvcGVydHlUeXBlKHByb3BlcnR5OiBKU09ORWRpdG9yU2NoZW1hLCB0eXBlOiBzdHJpbmcpIHtcbiAgICBjb25zdCBkYXRhVHlwZSA9IHRoaXMuZGF0YVR5cGVNYXBbdHlwZV07XG4gICAgaWYgKGRhdGFUeXBlKSB7XG4gICAgICBkZWxldGUgcHJvcGVydHkuZm9ybWF0O1xuICAgICAgcHJvcGVydHkudHlwZSA9IGRhdGFUeXBlLnNjaGVtYS50eXBlO1xuICAgICAgaWYgKGRhdGFUeXBlLnNjaGVtYS5mb3JtYXQpIHtcbiAgICAgICAgcHJvcGVydHkuZm9ybWF0ID0gZGF0YVR5cGUuc2NoZW1hLmZvcm1hdDtcbiAgICAgIH1cbiAgICAgIHByb3BlcnR5LiRtZXRhLmN1cnJlbnRUeXBlID0gZ2V0Q3VycmVudFR5cGUocHJvcGVydHkpO1xuICAgICAgdGhpcy5zY2hlbWEucHJvcGVydGllc1twcm9wZXJ0eS5wcm9wZXJ0eU5hbWVdID0geyAuLi5wcm9wZXJ0eSB9O1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlOiBhbnkgPSBjcmVhdGVWYWx1ZUZvclNjaGVtYShwcm9wZXJ0eSk7XG4gICAgdGhpcy5tb2RlbFtwcm9wZXJ0eS5wcm9wZXJ0eU5hbWVdID0gdmFsdWU7XG5cbiAgICB0aGlzLm1vZGVsQ2hhbmdlLmVtaXQodGhpcy5tb2RlbCk7XG4gICAgdGhpcy51cGRhdGVJY29ucygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYWNrIEJ5IGZ1bmN0aW9uIGZvciB0aGUgYXJyYXkgaXR0aWVyYXRvclxuICAgKiBAcGFyYW0gaW5kZXhcbiAgICogQHBhcmFtIHZhbHVlXG4gICAqL1xuICB0cmFja0J5KF8sIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLmlkO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGljb25zIGluIHRoZSBzY2hlbWFzXG4gICAqL1xuICBwcm90ZWN0ZWQgdXBkYXRlSWNvbnMoKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLnByb3BlcnR5SW5kZXgpIHtcbiAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMucHJvcGVydHlJbmRleFtpZF07XG4gICAgICBpZiAoIXNjaGVtYS4kbWV0YSkge1xuICAgICAgICBzY2hlbWEuJG1ldGEgPSB7fTtcbiAgICAgIH1cbiAgICAgIHNjaGVtYS4kbWV0YS5pY29uID0gZ2V0SWNvbihzY2hlbWEpO1xuICAgIH1cbiAgfVxufVxuIl19