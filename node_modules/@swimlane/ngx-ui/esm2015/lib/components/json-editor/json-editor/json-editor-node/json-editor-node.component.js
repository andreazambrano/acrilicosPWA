import { __decorate, __metadata } from "tslib";
import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';
import { JsonEditorNode } from '../../json-editor-node';
import { DialogService } from '../../../dialog/dialog.service';
let JsonEditorNodeComponent = class JsonEditorNodeComponent extends JsonEditorNode {
    constructor(dialogMngr) {
        super(dialogMngr);
        this.dialogMngr = dialogMngr;
        this.placeholder = '';
    }
    ngOnInit() {
        super.ngOnInit();
        if (this.schema.examples && Array.isArray(this.schema.examples)) {
            this.placeholder = this.schema.examples.join(', ');
        }
    }
};
JsonEditorNodeComponent.ctorParameters = () => [
    { type: DialogService }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorNodeComponent.prototype, "model", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorNodeComponent.prototype, "schema", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorNodeComponent.prototype, "typeCheckOverrides", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], JsonEditorNodeComponent.prototype, "errors", void 0);
JsonEditorNodeComponent = __decorate([
    Component({
        selector: 'ngx-json-editor-node',
        template: "<div\n  class=\"json-tree-node\"\n  [class.inline]=\"schema?.type !== 'object' && schema?.type !== 'array'\"\n  [class.invalid]=\"!valid\"\n  [class.children-invalid]=\"!childrenValid\"\n>\n  <span\n    *ngIf=\"schema?.type === 'object' || schema?.type === 'array'\"\n    class=\"ngx-expander\"\n    (click)=\"onExpandClick()\"\n    [class.invalid]=\"!childrenValid\"\n    [ngClass]=\"{\n      'icon-tree-collapse': expanded,\n      'icon-tree-expand': !expanded\n    }\"\n  >\n  </span>\n\n  <ngx-icon\n    fontIcon=\"warning-filled\"\n    *ngIf=\"ownErrors.length > 0\"\n    class=\"error-icon\"\n    ngx-tooltip\n    [tooltipTemplate]=\"errorsTemplate\"\n    tooltipPlacement=\"top\"\n  ></ngx-icon>\n  <ng-template #errorsTemplate>\n    <div *ngFor=\"let error of ownErrors\">{{ error.message }}</div>\n  </ng-template>\n\n  <div *ngIf=\"model !== undefined\" [class.invalid]=\"!valid\">\n    <!-- Object -->\n    <div *ngIf=\"schema?.type === 'object'\">\n      <ngx-json-object-node\n        [schema]=\"schema\"\n        [model]=\"model\"\n        [expanded]=\"expanded\"\n        (modelChange)=\"updateModel($event)\"\n        [path]=\"path\"\n        [errors]=\"childrenErrors\"\n        [typeCheckOverrides]=\"typeCheckOverrides\"\n      ></ngx-json-object-node>\n    </div>\n\n    <!-- Array -->\n    <div *ngIf=\"schema?.type === 'array'\">\n      <ngx-json-array-node\n        [schema]=\"schema\"\n        [model]=\"model\"\n        [expanded]=\"expanded\"\n        (modelChange)=\"updateModel($event)\"\n        [path]=\"path\"\n        [errors]=\"childrenErrors\"\n        [typeCheckOverrides]=\"typeCheckOverrides\"\n      ></ngx-json-array-node>\n    </div>\n\n    <!-- Number | Integer -->\n    <div *ngIf=\"schema?.type === 'number' || schema?.type === 'integer'\">\n      <input\n        class=\"value-input\"\n        type=\"number\"\n        [placeholder]=\"placeholder\"\n        [ngModel]=\"model\"\n        (ngModelChange)=\"updateModel($event)\"\n        [required]=\"required\"\n      />\n    </div>\n\n    <!-- Boolean -->\n    <div *ngIf=\"schema?.type === 'boolean'\">\n      <ngx-toggle class=\"toggle-input\" [ngModel]=\"model\" (ngModelChange)=\"updateModel($event)\" [label]=\"model | json\">\n      </ngx-toggle>\n    </div>\n\n    <!-- String -->\n    <ng-container *ngIf=\"schema?.type === 'string'\">\n      <!-- No format -->\n      <div *ngIf=\"!schema.format\">\n        <input\n          *ngIf=\"!schema?.enum\"\n          class=\"value-input\"\n          type=\"text\"\n          [placeholder]=\"placeholder\"\n          [ngModel]=\"model\"\n          (ngModelChange)=\"updateModel($event)\"\n          [required]=\"required\"\n        />\n        <select *ngIf=\"schema?.enum\" class=\"value-input select\" [ngModel]=\"model\" (ngModelChange)=\"updateModel($event)\">\n          <option *ngFor=\"let option of schema.enum\" [value]=\"option\">{{ option }}</option>\n        </select>\n      </div>\n\n      <!-- Password -->\n      <div *ngIf=\"schema.format === 'password'\">\n        <input\n          class=\"value-input\"\n          type=\"password\"\n          [placeholder]=\"placeholder\"\n          [ngModel]=\"model\"\n          (ngModelChange)=\"updateModel($event)\"\n          [required]=\"required\"\n        />\n      </div>\n\n      <!-- Date -->\n      <div *ngIf=\"schema.format === 'date'\">\n        <input\n          class=\"value-input\"\n          type=\"date\"\n          [placeholder]=\"placeholder\"\n          [ngModel]=\"model\"\n          (ngModelChange)=\"updateModel($event)\"\n          [required]=\"required\"\n        />\n      </div>\n\n      <!-- DateTime -->\n      <div *ngIf=\"schema.format === 'date-time'\">\n        <input\n          class=\"value-input\"\n          type=\"datetime-local\"\n          [placeholder]=\"placeholder\"\n          [ngModel]=\"model\"\n          (ngModelChange)=\"updateModel($event)\"\n          [required]=\"required\"\n        />\n      </div>\n\n      <!-- Code -->\n      <div *ngIf=\"schema.format === 'code'\">\n        <div class=\"value-input code\">\n          <ngx-icon\n            fontIcon=\"edit\"\n            class=\"edit-code-icon\"\n            ngx-tooltip\n            tooltipTitle=\"Edit Code\"\n            (click)=\"openCodeEditor()\"\n          ></ngx-icon>\n          <div class=\"code-display\">{{ model }}</div>\n        </div>\n      </div>\n\n      <ng-template #codeEditorTpl>\n        <div class=\"code-editor\">\n          <ngx-select\n            class=\"mode-select\"\n            label=\"Language Mode\"\n            [ngModel]=\"[editorConfig.mode.name]\"\n            (ngModelChange)=\"selectEditorMode($event[0])\"\n          >\n            <ngx-select-option *ngFor=\"let mode of editorModes\" [name]=\"mode.label\" [value]=\"mode.name\">\n            </ngx-select-option>\n          </ngx-select>\n\n          <ngx-button class=\"btn btn-primary save-code-button\" (click)=\"updateModel(editorModel); closeCodeEditor()\">\n            Save</ngx-button\n          >\n\n          <ngx-codemirror\n            *ngIf=\"editorVisible\"\n            [ngModel]=\"editorModel\"\n            (ngModelChange)=\"editorModel = $event\"\n            [config]=\"editorConfig\"\n            class=\"code-editor\"\n          >\n          </ngx-codemirror>\n        </div>\n      </ng-template>\n    </ng-container>\n  </div>\n\n  <div class=\"ngx-tree-vr\" *ngIf=\"schema?.type === 'object' || schema?.type === 'array'\"></div>\n</div>\n",
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [".json-tree-node{padding:0;margin-left:25px;margin-bottom:0;position:relative;white-space:nowrap}.json-tree-node.inline{display:inline-block;margin-bottom:0;vertical-align:top;width:calc(100% - 290px)}.json-tree-node.inline::before{position:absolute;content:'=';left:-19px;font-size:20px;color:#5a6884}.json-tree-node.inline.inline .error-icon{left:initial;right:-22px;top:5px}.json-tree-node .btn{cursor:pointer}.json-tree-node .ngx-expander{font-size:.75rem;color:#afb7c8;position:absolute;top:-25px;left:-26px;z-index:1;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.json-tree-node .ngx-expander:not(.disabled){cursor:pointer}.json-tree-node .ngx-expander.icon-tree-collapse::before,.json-tree-node .ngx-expander.icon-tree-expand::before{background:#1c2029;border-radius:50%}.json-tree-node .ngx-expander.invalid{color:#e02f00}.json-tree-node .add-button{position:relative;left:20px;width:21px;height:21px;padding:2px 3px;background:#909cb4}.json-tree-node .add-button ngx-icon{color:#1c2029}.json-tree-node .add-button::before{content:' ';width:15px;height:1px;border-radius:5px;background:0 0;border-top:1px dashed #5a6884;position:absolute;top:50%;left:-15px}.json-tree-node .ngx-tree-vr{position:absolute;top:-4px;bottom:14px;left:5px;border-left:1px dashed #5a6884;width:1px}.json-tree-node .property-def{border:1px solid rgba(148,198,255,.07);height:30px;display:inline-block;margin-left:20px;position:relative;background:rgba(148,198,255,.05)}.json-tree-node .property-def::before{content:' ';width:15px;height:1px;border-radius:5px;background:0 0;border-top:1px dashed #5a6884;position:absolute;top:50%;left:-15px}.json-tree-node .property-def .type-icon{width:28px;height:28px;position:relative;background:rgba(148,198,255,.07);margin-left:0;display:inline-block}.json-tree-node .property-def .type-icon ngx-icon{color:#afb7c8;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);width:16px;height:16px}.json-tree-node .property-def .type-icon:hover{background:rgba(148,198,255,.17)}.json-tree-node .property-def .property-name{display:inline-block;width:170px;padding:0 5px;position:relative;-webkit-transform:translateY(-50%);transform:translateY(-50%);vertical-align:middle}.json-tree-node .property-def .property-name .title{display:inline-block;color:#72819f;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;position:relative;top:5px}.json-tree-node .property-def .property-name input{border:none;background:0 0;color:#bec5d3;width:calc(100% - 5px);line-height:20px;font-size:14px}.json-tree-node .error-icon{position:absolute;top:-28px;left:205px;color:#e02f00}.json-tree-node .value-input{border:1px solid rgba(148,198,255,.07);background:rgba(148,198,255,.05);color:#bec5d3;width:100%;height:30px;padding:5px;border-radius:0}.json-tree-node .value-input.select *{background-color:#313847}.json-tree-node .value-input.code{width:100%;overflow:hidden}.json-tree-node .value-input.code .code-display{white-space:pre-wrap;font-family:'Courier New',Courier,monospace;font-size:14px}.json-tree-node .value-input.code .edit-code-icon{position:absolute;right:10px;top:4px;z-index:21;cursor:pointer;display:none}.json-tree-node .value-input.code .edit-code-icon:hover{color:#fff}.json-tree-node .value-input.code:hover{height:auto;overflow:auto;max-height:400px;min-height:30px;position:absolute;z-index:20;background:#212631}.json-tree-node .value-input.code:hover .edit-code-icon{display:inline}.json-tree-node .ngx-toggle{margin:0;line-height:30px}.json-tree-node .ngx-toggle .ngx-toggle-text{color:#bec5d3}.json-tree-node .invalid>div>.value-input{border:1px solid #e02f00}"]
    }),
    __metadata("design:paramtypes", [DialogService])
], JsonEditorNodeComponent);
export { JsonEditorNodeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1lZGl0b3Itbm9kZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvanNvbi1lZGl0b3IvanNvbi1lZGl0b3IvanNvbi1lZGl0b3Itbm9kZS9qc29uLWVkaXRvci1ub2RlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0YsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXhELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQVUvRCxJQUFhLHVCQUF1QixHQUFwQyxNQUFhLHVCQUF3QixTQUFRLGNBQWM7SUFXekQsWUFBbUIsVUFBeUI7UUFDMUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBREQsZUFBVSxHQUFWLFVBQVUsQ0FBZTtRQUY1QyxnQkFBVyxHQUFXLEVBQUUsQ0FBQztJQUl6QixDQUFDO0lBRUQsUUFBUTtRQUNOLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVqQixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUMvRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNwRDtJQUNILENBQUM7Q0FDRixDQUFBOztZQVhnQyxhQUFhOztBQVZuQztJQUFSLEtBQUssRUFBRTs7c0RBQVk7QUFFWDtJQUFSLEtBQUssRUFBRTs7dURBQTBCO0FBRXpCO0lBQVIsS0FBSyxFQUFFOzttRUFBMEI7QUFFekI7SUFBUixLQUFLLEVBQUU7O3VEQUFlO0FBUFosdUJBQXVCO0lBUG5DLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxzQkFBc0I7UUFDaEMsMjJLQUE4QztRQUU5QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtRQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7S0FDaEQsQ0FBQztxQ0FZK0IsYUFBYTtHQVhqQyx1QkFBdUIsQ0FzQm5DO1NBdEJZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVmlld0VuY2Fwc3VsYXRpb24sIElucHV0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSnNvbkVkaXRvck5vZGUgfSBmcm9tICcuLi8uLi9qc29uLWVkaXRvci1ub2RlJztcblxuaW1wb3J0IHsgRGlhbG9nU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2RpYWxvZy9kaWFsb2cuc2VydmljZSc7XG5pbXBvcnQgeyBKU09ORWRpdG9yU2NoZW1hIH0gZnJvbSAnLi4vLi4vanNvbi1lZGl0b3IuaGVscGVyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LWpzb24tZWRpdG9yLW5vZGUnLFxuICB0ZW1wbGF0ZVVybDogJ2pzb24tZWRpdG9yLW5vZGUuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9qc29uLWVkaXRvci1ub2RlLmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIEpzb25FZGl0b3JOb2RlQ29tcG9uZW50IGV4dGVuZHMgSnNvbkVkaXRvck5vZGUge1xuICBASW5wdXQoKSBtb2RlbDogYW55O1xuXG4gIEBJbnB1dCgpIHNjaGVtYTogSlNPTkVkaXRvclNjaGVtYTtcblxuICBASW5wdXQoKSB0eXBlQ2hlY2tPdmVycmlkZXM/OiBhbnk7XG5cbiAgQElucHV0KCkgZXJyb3JzOiBhbnlbXTtcblxuICBwbGFjZWhvbGRlcjogc3RyaW5nID0gJyc7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGRpYWxvZ01uZ3I6IERpYWxvZ1NlcnZpY2UpIHtcbiAgICBzdXBlcihkaWFsb2dNbmdyKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHN1cGVyLm5nT25Jbml0KCk7XG5cbiAgICBpZiAodGhpcy5zY2hlbWEuZXhhbXBsZXMgJiYgQXJyYXkuaXNBcnJheSh0aGlzLnNjaGVtYS5leGFtcGxlcykpIHtcbiAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0aGlzLnNjaGVtYS5leGFtcGxlcy5qb2luKCcsICcpO1xuICAgIH1cbiAgfVxufVxuIl19