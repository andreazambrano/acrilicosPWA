import { __decorate, __metadata } from "tslib";
import { Component, Input, ViewEncapsulation, EventEmitter, Output, ChangeDetectionStrategy } from '@angular/core';
import { JsonEditorNode } from '../../json-editor-node';
import { DialogService } from '../../../dialog/dialog.service';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { requiredIndicatorIcon } from '../../json-editor.helper';
let JsonEditorNodeFlatComponent = class JsonEditorNodeFlatComponent extends JsonEditorNode {
    constructor(dialogMngr, domSanitizer) {
        super(dialogMngr);
        this.dialogMngr = dialogMngr;
        this.domSanitizer = domSanitizer;
        this.arrayItem = false;
        this.hideRoot = false;
        this.arrayName = '';
        this.updatePropertyNameEvent = new EventEmitter();
        this.requiredIndicator = this.domSanitizer.bypassSecurityTrustHtml(requiredIndicatorIcon);
    }
    ngOnInit() {
        if (this.level === undefined) {
            this.level = this.hideRoot ? -1 : 0;
        }
        else {
            this.level += 1;
        }
    }
    updatePropertyName(id, name) {
        this.updatePropertyNameEvent.emit({ id, name });
    }
};
JsonEditorNodeFlatComponent.ctorParameters = () => [
    { type: DialogService },
    { type: DomSanitizer }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorNodeFlatComponent.prototype, "model", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorNodeFlatComponent.prototype, "schema", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorNodeFlatComponent.prototype, "typeCheckOverrides", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], JsonEditorNodeFlatComponent.prototype, "errors", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], JsonEditorNodeFlatComponent.prototype, "label", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], JsonEditorNodeFlatComponent.prototype, "level", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], JsonEditorNodeFlatComponent.prototype, "schemaBuilderMode", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorNodeFlatComponent.prototype, "schemaRef", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], JsonEditorNodeFlatComponent.prototype, "formats", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorNodeFlatComponent.prototype, "arrayItem", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorNodeFlatComponent.prototype, "hideRoot", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorNodeFlatComponent.prototype, "arrayName", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], JsonEditorNodeFlatComponent.prototype, "compressed", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], JsonEditorNodeFlatComponent.prototype, "indentationArray", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], JsonEditorNodeFlatComponent.prototype, "updatePropertyNameEvent", void 0);
JsonEditorNodeFlatComponent = __decorate([
    Component({
        selector: 'ngx-json-editor-node-flat',
        template: "<div *ngIf=\"model !== undefined\" class=\"json-tree-node-flat\">\n  <div class=\"node-container\" *ngIf=\"!(level === -1 && hideRoot)\">\n    <div class=\"indentation\" *ngIf=\"level > 0\" [style.left]=\"-1 * (level * 20) + 'px'\">\n      <span class=\"separator\" *ngFor=\"let separator of indentationArray\"></span>\n    </div>\n    <div class=\"node\" [class.compressed]=\"compressed\">\n      <div class=\"error-box\" *ngIf=\"!valid && !schemaBuilderMode\"></div>\n\n      <div class=\"left-options\">\n        <ng-container *ngIf=\"level > 0 && !arrayItem\">\n          <div class=\"required-indicator\">\n            <span\n              *ngIf=\"required\"\n              [class.invalid]=\"!childrenValid && !schemaBuilderMode\"\n              [innerHtml]=\"requiredIndicator\"\n            ></span>\n            <span *ngIf=\"!required && schemaBuilderMode\" class=\"not-required\" [innerHtml]=\"requiredIndicator\"></span>\n          </div>\n          <ng-content select=\"[cdkDragHandle]\"></ng-content>\n        </ng-container>\n      </div>\n\n      <div class=\"node-content\" [class.extra-margin]=\"schema.nameEditable && !schemaBuilderMode\">\n        <div class=\"node-info\">\n          <!-- Property name/title -->\n          <div\n            class=\"info-name\"\n            *ngIf=\"(!schema.nameEditable || schemaBuilderMode) && (schema?.propertyName || label || arrayItem)\"\n          >\n            <span class=\"name\">\n              {{ schema?.title || label || (arrayItem ? 'Items' : schema?.propertyName) }}\n            </span>\n            <ngx-icon\n              *ngIf=\"schema?.description || schema?.examples\"\n              class=\"info-btn\"\n              fontIcon=\"info-filled\"\n              ngx-tooltip\n              [tooltipContext]=\"schema\"\n              [tooltipType]=\"'popover'\"\n              [tooltipPlacement]=\"'top'\"\n              [tooltipTemplate]=\"popoverTemplate\"\n            ></ngx-icon>\n\n            <ng-template #popoverTemplate let-model=\"model\">\n              <div class=\"popover-template\">\n                <div *ngIf=\"model?.description\">\n                  <div class=\"label\">DESCRIPTION</div>\n                  <div>{{ model?.description }}</div>\n                </div>\n                <div class=\"separator\" *ngIf=\"model?.description && model?.examples\"></div>\n                <div *ngIf=\"model?.examples\">\n                  <div class=\"label\">EXAMPLES</div>\n                  <div *ngFor=\"let example of model?.examples\">{{ example }}</div>\n                </div>\n              </div>\n            </ng-template>\n          </div>\n\n          <!-- Inline text editing-->\n          <ngx-input\n            class=\"editable-name\"\n            type=\"text\"\n            *ngIf=\"schema.nameEditable && !schemaBuilderMode\"\n            [ngModel]=\"schema?.propertyName\"\n            (ngModelChange)=\"updatePropertyName(schema.id, $event)\"\n          ></ngx-input>\n\n          <div class=\"info-type\">\n            <span class=\"type\"\n              >{{ schema?.format || schema?.type | titlecase }}{{ schema?.enum?.length ? ' + Enum' : '' }}</span\n            >\n            <ngx-icon\n              *ngIf=\"schema?.propertyName || arrayName\"\n              class=\"dot-separator\"\n              fontIcon=\"circle-filled\"\n            ></ngx-icon>\n            <span class=\"property-name\">{{ arrayName ? arrayName : schema?.propertyName }}</span>\n          </div>\n\n          <!-- Description -->\n          <span *ngIf=\"!compressed\" class=\"description\">{{ schema?.description }}</span>\n        </div>\n\n        <div *ngIf=\"!schemaBuilderMode\" class=\"node-input\">\n          <!-- Number | Integer -->\n          <div *ngIf=\"schema?.type === 'number' || schema?.type === 'integer'\">\n            <ngx-input\n              type=\"number\"\n              [ngModel]=\"model\"\n              (ngModelChange)=\"updateModel($event)\"\n              [requiredIndicator]=\"false\"\n              [required]=\"required\"\n            ></ngx-input>\n          </div>\n\n          <!-- Boolean -->\n          <div *ngIf=\"schema?.type === 'boolean'\">\n            <ngx-toggle\n              class=\"toggle-input\"\n              [ngModel]=\"model\"\n              (ngModelChange)=\"updateModel($event)\"\n              [label]=\"model | json\"\n            >\n            </ngx-toggle>\n          </div>\n\n          <!-- String -->\n          <ng-container *ngIf=\"schema?.type === 'string'\">\n            <!-- No format -->\n            <div *ngIf=\"!schema.format\">\n              <ngx-input\n                *ngIf=\"!schema?.enum\"\n                type=\"text\"\n                [ngModel]=\"model\"\n                (change)=\"updateModel($event)\"\n                [requiredIndicator]=\"false\"\n                [required]=\"required\"\n              >\n              </ngx-input>\n\n              <ngx-select\n                [filterable]=\"false\"\n                *ngIf=\"schema?.enum\"\n                [ngModel]=\"[model]\"\n                (ngModelChange)=\"updateModel($event[0])\"\n                [required]=\"required\"\n              >\n                <ngx-select-option *ngFor=\"let option of schema.enum\" [name]=\"option\" [value]=\"option\">\n                </ngx-select-option>\n              </ngx-select>\n            </div>\n\n            <!-- Password -->\n            <div *ngIf=\"schema.format === 'password'\">\n              <ngx-input\n                type=\"password\"\n                [ngModel]=\"model\"\n                (ngModelChange)=\"updateModel($event)\"\n                [requiredIndicator]=\"false\"\n                [required]=\"required\"\n              ></ngx-input>\n            </div>\n\n            <!-- Date -->\n            <div *ngIf=\"schema.format === 'date'\">\n              <ngx-input\n                type=\"date\"\n                [ngModel]=\"model\"\n                (ngModelChange)=\"updateModel($event)\"\n                [requiredIndicator]=\"false\"\n                [required]=\"required\"\n              ></ngx-input>\n            </div>\n\n            <!-- DateTime -->\n            <div *ngIf=\"schema.format === 'date-time'\">\n              <ngx-input\n                type=\"datetime-local\"\n                [ngModel]=\"model\"\n                (ngModelChange)=\"updateModel($event)\"\n                [requiredIndicator]=\"false\"\n                [required]=\"required\"\n              ></ngx-input>\n            </div>\n\n            <!-- Code -->\n            <div *ngIf=\"schema.format === 'code'\" class=\"code\">\n              <ngx-input\n                type=\"text\"\n                [ngModel]=\"model\"\n                [requiredIndicator]=\"false\"\n                [required]=\"required\"\n                [disabled]=\"true\"\n              >\n                <ngx-input-suffix>\n                  <button (click)=\"openCodeEditor()\">\n                    <ngx-icon fontIcon=\"edit\" class=\"edit-code-icon\" ngx-tooltip tooltipTitle=\"Edit Code\"> </ngx-icon>\n                  </button>\n                </ngx-input-suffix>\n              </ngx-input>\n            </div>\n\n            <ng-template #codeEditorTpl>\n              <div class=\"code-editor\">\n                <ngx-select\n                  label=\"Language Mode\"\n                  [ngModel]=\"[editorConfig.mode.name]\"\n                  (ngModelChange)=\"selectEditorMode($event[0])\"\n                >\n                  <ngx-select-option *ngFor=\"let mode of editorModes\" [name]=\"mode.label\" [value]=\"mode.name\">\n                  </ngx-select-option>\n                </ngx-select>\n\n                <ngx-button\n                  class=\"btn btn-primary save-code-button\"\n                  (click)=\"updateModel(editorModel); closeCodeEditor()\"\n                >\n                  Save</ngx-button\n                >\n\n                <ngx-codemirror\n                  *ngIf=\"editorVisible\"\n                  [ngModel]=\"editorModel\"\n                  (ngModelChange)=\"editorModel = $event\"\n                  [config]=\"editorConfig\"\n                  class=\"code-editor\"\n                >\n                </ngx-codemirror>\n              </div>\n            </ng-template>\n          </ng-container>\n\n          <div class=\"input-error\" *ngFor=\"let error of ownErrors\">{{ error.message }}</div>\n        </div>\n\n        <div *ngIf=\"schemaBuilderMode\" class=\"node-constrains\">\n          <div class=\"tag\" *ngIf=\"schema.minItems\">Min Items: {{ schema.minItems }}</div>\n          <div class=\"tag\" *ngIf=\"schema.maxItems\">Max Items: {{ schema.maxItems }}</div>\n          <div class=\"tag\" *ngIf=\"schema.minimum\">Minimum: {{ schema.minimum }}</div>\n          <div class=\"tag\" *ngIf=\"schema.maximum\">Maximum: {{ schema.maximum }}</div>\n          <div class=\"tag\" *ngIf=\"schema.minLength\">Min Length: {{ schema.minLength }}</div>\n          <div class=\"tag\" *ngIf=\"schema.maxLength\">Max Length: {{ schema.maxLength }}</div>\n          <div class=\"tag\" *ngIf=\"schema.pattern\">Pattern: Yes</div>\n        </div>\n        <ng-content select=\"[node-options]\"></ng-content>\n      </div>\n    </div>\n  </div>\n\n  <!-- Object -->\n  <div *ngIf=\"schema?.type === 'object'\">\n    <ngx-json-object-node-flat\n      [schema]=\"schema\"\n      [schemaRef]=\"schemaRef\"\n      [model]=\"model\"\n      [expanded]=\"expanded\"\n      [hideRoot]=\"hideRoot\"\n      (modelChange)=\"updateModel($event)\"\n      [path]=\"path\"\n      [errors]=\"childrenErrors\"\n      [typeCheckOverrides]=\"typeCheckOverrides\"\n      [level]=\"level\"\n      [compressed]=\"compressed\"\n      [schemaBuilderMode]=\"schemaBuilderMode\"\n      [formats]=\"formats\"\n      (schemaChange)=\"schemaChange.emit(schemaRef)\"\n    >\n    </ngx-json-object-node-flat>\n  </div>\n\n  <!-- Array -->\n  <div *ngIf=\"schema?.type === 'array'\">\n    <ngx-json-array-node-flat\n      [schema]=\"schema\"\n      [schemaRef]=\"schemaRef\"\n      [model]=\"model\"\n      [expanded]=\"expanded\"\n      [formats]=\"formats\"\n      [hideRoot]=\"hideRoot\"\n      (modelChange)=\"updateModel($event)\"\n      [path]=\"path\"\n      [compressed]=\"compressed\"\n      [errors]=\"childrenErrors\"\n      [typeCheckOverrides]=\"typeCheckOverrides\"\n      [level]=\"level\"\n      [schemaBuilderMode]=\"schemaBuilderMode\"\n      (schemaChange)=\"schemaChange.emit(schemaRef)\"\n    >\n    </ngx-json-array-node-flat>\n  </div>\n</div>\n",
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [".json-tree-node-flat .indentation{border-radius:2px 0 0 2px;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;background-color:rgba(49,56,71,.4);min-width:20px}.separator{background-color:#3b4457;opacity:.5;border-radius:2px;width:1px;height:calc(100% - 4px);margin-right:20px}.separator:first-child{margin-left:20px}.popover-template{font-weight:600;font-size:12px;line-height:13px}.popover-template .label{color:#72819f;font-size:10px;font-weight:700}.popover-template .separator{height:8px;background:0 0}.json-tree-node-flat .node-container{display:-webkit-box;display:flex}.json-tree-node-flat .node{background-color:#313847;box-shadow:0 2px 7px rgba(0,0,0,.2);border-radius:2px;display:-webkit-box;display:flex;padding:25px 10px;position:relative;-webkit-box-flex:1;flex:1}.json-tree-node-flat .node.compressed{max-height:80px}.json-tree-node-flat .node .error-box{position:absolute;width:100%;height:100%;border-radius:2px;top:0;left:0;border:2px solid #ff4514}.json-tree-node-flat .node .left-options{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;margin-right:10px;color:#72819f;width:15px}.json-tree-node-flat .node .left-options .required-indicator{position:absolute;top:12px;left:12px}.json-tree-node-flat .node .left-options .required-indicator span{display:-webkit-box;display:flex}.json-tree-node-flat .node .left-options .required-indicator span svg path{fill:#72819f;stroke:#72819f}.json-tree-node-flat .node .left-options .required-indicator span.not-required svg path{fill:transparent}.json-tree-node-flat .node .left-options .required-indicator span.invalid svg path{fill:#ff4514;stroke:#ff4514}.json-tree-node-flat .node .left-options .drag-drop-handle{cursor:-webkit-grab;cursor:grab}.json-tree-node-flat .node .node-content{display:-webkit-box;display:flex;-webkit-box-pack:justify;justify-content:space-between;-webkit-box-flex:1;flex:1;-webkit-box-align:center;align-items:center}.json-tree-node-flat .node .node-content.extra-margin{margin-top:-15px}.json-tree-node-flat .node .node-content .node-info{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;flex-basis:30%;padding-right:25px}.json-tree-node-flat .node .node-content .node-info .info-name .info-btn{color:#818fa9;font-size:12px;margin-left:5px;position:relative;z-index:1}.json-tree-node-flat .node .node-content .node-info .editable-name input,.json-tree-node-flat .node .node-content .node-info .name{font-weight:600;font-size:18px;line-height:23px;color:#f0f1f6}.json-tree-node-flat .node .node-content .node-info .description,.json-tree-node-flat .node .node-content .node-info .dot-separator,.json-tree-node-flat .node .node-content .node-info .property-name{color:#a0aabe}.json-tree-node-flat .node .node-content .node-info .dot-separator{font-size:.2em;margin:0 5px;vertical-align:middle}.json-tree-node-flat .node .node-content .node-info .type{color:#f0f1f6}.json-tree-node-flat .node .node-content .node-info .editable-name{margin:0;padding-top:15px}.json-tree-node-flat .node .node-content .node-info .editable-name .ngx-input-hint{display:none}.json-tree-node-flat .node .node-content .node-input{-webkit-box-flex:1;flex:1}.json-tree-node-flat .node .node-content .node-input ngx-input{padding:0;margin:0}.json-tree-node-flat .node .node-content .node-input ngx-input .ngx-input-hint{min-height:0}.json-tree-node-flat .node .node-content .node-input .code:hover button{display:inline}.json-tree-node-flat .node .node-content .node-input .code input{color:#cdd2dd}.json-tree-node-flat .node .node-content .node-input .code button{display:none;color:#72819f}.json-tree-node-flat .node .node-content .node-input .input-error{color:#ff4514}"]
    }),
    __metadata("design:paramtypes", [DialogService, DomSanitizer])
], JsonEditorNodeFlatComponent);
export { JsonEditorNodeFlatComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1lZGl0b3Itbm9kZS1mbGF0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9qc29uLWVkaXRvci9qc29uLWVkaXRvci1mbGF0L2pzb24tZWRpdG9yLW5vZGUtZmxhdC9qc29uLWVkaXRvci1ub2RlLWZsYXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFFTCxpQkFBaUIsRUFDakIsWUFBWSxFQUNaLE1BQU0sRUFDTix1QkFBdUIsRUFDeEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXhELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMvRCxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxxQkFBcUIsRUFBd0MsTUFBTSwwQkFBMEIsQ0FBQztBQVN2RyxJQUFhLDJCQUEyQixHQUF4QyxNQUFhLDJCQUE0QixTQUFRLGNBQWM7SUFpQzdELFlBQW1CLFVBQXlCLEVBQVUsWUFBMEI7UUFDOUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBREQsZUFBVSxHQUFWLFVBQVUsQ0FBZTtRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBZHZFLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFFbEIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVqQixjQUFTLEdBQUcsRUFBRSxDQUFDO1FBTWQsNEJBQXVCLEdBQUcsSUFBSSxZQUFZLEVBQXlDLENBQUM7UUFNNUYsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsdUJBQXVCLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFDNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3JDO2FBQU07WUFDTCxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztTQUNqQjtJQUNILENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxFQUFtQixFQUFFLElBQVk7UUFDbEQsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7Q0FDRixDQUFBOztZQWhCZ0MsYUFBYTtZQUF3QixZQUFZOztBQWhDdkU7SUFBUixLQUFLLEVBQUU7OzBEQUFZO0FBRVg7SUFBUixLQUFLLEVBQUU7OzJEQUEwQjtBQUV6QjtJQUFSLEtBQUssRUFBRTs7dUVBQTBCO0FBRXpCO0lBQVIsS0FBSyxFQUFFOzsyREFBZTtBQUVkO0lBQVIsS0FBSyxFQUFFOzswREFBZTtBQUVkO0lBQVIsS0FBSyxFQUFFOzswREFBZTtBQUVkO0lBQVIsS0FBSyxFQUFFOztzRUFBNkI7QUFFNUI7SUFBUixLQUFLLEVBQUU7OzhEQUE4QjtBQUU3QjtJQUFSLEtBQUssRUFBRTs7NERBQStCO0FBRTlCO0lBQVIsS0FBSyxFQUFFOzs4REFBbUI7QUFFbEI7SUFBUixLQUFLLEVBQUU7OzZEQUFrQjtBQUVqQjtJQUFSLEtBQUssRUFBRTs7OERBQWdCO0FBRWY7SUFBUixLQUFLLEVBQUU7OytEQUFxQjtBQUVwQjtJQUFSLEtBQUssRUFBRTs7cUVBQTRCO0FBRTFCO0lBQVQsTUFBTSxFQUFFOzs0RUFBcUY7QUE3Qm5GLDJCQUEyQjtJQVB2QyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsMkJBQTJCO1FBQ3JDLHEwVUFBcUQ7UUFFckQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7UUFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O0tBQ2hELENBQUM7cUNBa0MrQixhQUFhLEVBQXdCLFlBQVk7R0FqQ3JFLDJCQUEyQixDQWlEdkM7U0FqRFksMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgRXZlbnRFbWl0dGVyLFxuICBPdXRwdXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSnNvbkVkaXRvck5vZGUgfSBmcm9tICcuLi8uLi9qc29uLWVkaXRvci1ub2RlJztcblxuaW1wb3J0IHsgRGlhbG9nU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2RpYWxvZy9kaWFsb2cuc2VydmljZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyByZXF1aXJlZEluZGljYXRvckljb24sIEpTT05FZGl0b3JTY2hlbWEsIEpzb25TY2hlbWFEYXRhVHlwZSB9IGZyb20gJy4uLy4uL2pzb24tZWRpdG9yLmhlbHBlcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1qc29uLWVkaXRvci1ub2RlLWZsYXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vanNvbi1lZGl0b3Itbm9kZS1mbGF0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vanNvbi1lZGl0b3Itbm9kZS1mbGF0LmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIEpzb25FZGl0b3JOb2RlRmxhdENvbXBvbmVudCBleHRlbmRzIEpzb25FZGl0b3JOb2RlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgbW9kZWw6IGFueTtcblxuICBASW5wdXQoKSBzY2hlbWE6IEpTT05FZGl0b3JTY2hlbWE7XG5cbiAgQElucHV0KCkgdHlwZUNoZWNrT3ZlcnJpZGVzPzogYW55O1xuXG4gIEBJbnB1dCgpIGVycm9yczogYW55W107XG5cbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZztcblxuICBASW5wdXQoKSBsZXZlbDogbnVtYmVyO1xuXG4gIEBJbnB1dCgpIHNjaGVtYUJ1aWxkZXJNb2RlPzogYm9vbGVhbjtcblxuICBASW5wdXQoKSBzY2hlbWFSZWY/OiBKU09ORWRpdG9yU2NoZW1hO1xuXG4gIEBJbnB1dCgpIGZvcm1hdHM6IEpzb25TY2hlbWFEYXRhVHlwZVtdO1xuXG4gIEBJbnB1dCgpIGFycmF5SXRlbSA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpIGhpZGVSb290ID0gZmFsc2U7XG5cbiAgQElucHV0KCkgYXJyYXlOYW1lID0gJyc7XG5cbiAgQElucHV0KCkgY29tcHJlc3NlZDogYm9vbGVhbjtcblxuICBASW5wdXQoKSBpbmRlbnRhdGlvbkFycmF5OiBudW1iZXJbXTtcblxuICBAT3V0cHV0KCkgdXBkYXRlUHJvcGVydHlOYW1lRXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyPHsgaWQ6IHN0cmluZyB8IG51bWJlcjsgbmFtZTogc3RyaW5nIH0+KCk7XG5cbiAgcmVxdWlyZWRJbmRpY2F0b3I6IFNhZmVIdG1sO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBkaWFsb2dNbmdyOiBEaWFsb2dTZXJ2aWNlLCBwcml2YXRlIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyKSB7XG4gICAgc3VwZXIoZGlhbG9nTW5ncik7XG4gICAgdGhpcy5yZXF1aXJlZEluZGljYXRvciA9IHRoaXMuZG9tU2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKHJlcXVpcmVkSW5kaWNhdG9ySWNvbik7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5sZXZlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmxldmVsID0gdGhpcy5oaWRlUm9vdCA/IC0xIDogMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sZXZlbCArPSAxO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZVByb3BlcnR5TmFtZShpZDogc3RyaW5nIHwgbnVtYmVyLCBuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZVByb3BlcnR5TmFtZUV2ZW50LmVtaXQoeyBpZCwgbmFtZSB9KTtcbiAgfVxufVxuIl19