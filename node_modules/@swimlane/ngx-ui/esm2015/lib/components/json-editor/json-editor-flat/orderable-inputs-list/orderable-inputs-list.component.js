import { __decorate, __metadata } from "tslib";
import { Component, Input, ViewEncapsulation, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { moveItemInArray } from '@angular/cdk/drag-drop';
import { debounceable } from '../../../../utils';
let OrderableInputsListComponent = class OrderableInputsListComponent {
    constructor() {
        this.onUpdate = new EventEmitter();
    }
    ngOnInit() {
        this.data = this.data || [];
    }
    addExample() {
        this.data.push('');
    }
    removeItem(index) {
        this.data.splice(index, 1);
        this.update();
    }
    drop(event) {
        moveItemInArray(this.data, event.previousIndex, event.currentIndex);
        this.update();
    }
    update() {
        this.onUpdate.emit(this.data);
    }
};
__decorate([
    Input(),
    __metadata("design:type", Array)
], OrderableInputsListComponent.prototype, "data", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], OrderableInputsListComponent.prototype, "onUpdate", void 0);
__decorate([
    debounceable(500),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], OrderableInputsListComponent.prototype, "update", null);
OrderableInputsListComponent = __decorate([
    Component({
        selector: 'ngx-orderable-inputs-list',
        template: "<div class=\"orderable-inputs-list\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\n  <div class=\"input-item\" *ngFor=\"let item of data; let index = index\" cdkDrag cdkDragLockAxis=\"y\">\n    <div class=\"drag-drop-handle\" cdkDragHandle>\n      <i class=\"ngx-icon ngx-handle\"></i>\n    </div>\n    <ngx-input type=\"text\" (change)=\"data[index] = $event\" [ngModel]=\"item\" (keyup)=\"update()\"> </ngx-input>\n    <button type=\"button\" class=\"remove-item\" (click)=\"removeItem(index)\">\n      <i class=\"ngx-icon ngx-x\"></i>\n    </button>\n  </div>\n  <div class=\"add-examples\" (click)=\"addExample()\">\n    Add Example\n  </div>\n</div>\n",
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [".add-examples,.input-item{height:45px;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center}.input-item{background:#3b4457;box-shadow:0 2px 7px rgba(0,0,0,.2);border-radius:2px;margin-bottom:13px}.input-item .drag-drop-handle,.input-item .remove-item{color:#818fa9}.input-item .drag-drop-handle{margin:0 9px;height:17px;font-size:14.5px;cursor:-webkit-grab;cursor:grab}.input-item .ngx-input{-webkit-box-flex:1;flex:1;margin:0}.input-item .remove-item{font-size:8px;margin:0 5px;height:8px}.add-examples{cursor:pointer;height:45px;border:1px dashed #479eff;color:#479eff;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center}.cdk-drag-placeholder{opacity:0}.cdk-drag-animating,.orderable-inputs-list.cdk-drop-list-dragging .input-item:not(.cdk-drag-placeholder){-webkit-transition:-webkit-transform 250ms cubic-bezier(0,0,.2,1);transition:transform 250ms cubic-bezier(0,0,.2,1);transition:transform 250ms cubic-bezier(0,0,.2,1),-webkit-transform 250ms cubic-bezier(0,0,.2,1)}"]
    })
], OrderableInputsListComponent);
export { OrderableInputsListComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXJhYmxlLWlucHV0cy1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9qc29uLWVkaXRvci9qc29uLWVkaXRvci1mbGF0L29yZGVyYWJsZS1pbnB1dHMtbGlzdC9vcmRlcmFibGUtaW5wdXRzLWxpc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxpQkFBaUIsRUFFakIsTUFBTSxFQUNOLFlBQVksRUFDWix1QkFBdUIsRUFDeEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGVBQWUsRUFBZSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQVNqRCxJQUFhLDRCQUE0QixHQUF6QyxNQUFhLDRCQUE0QjtJQUF6QztRQUVZLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBWSxDQUFDO0lBd0JwRCxDQUFDO0lBdEJDLFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxVQUFVO1FBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFhO1FBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELElBQUksQ0FBQyxLQUE0QjtRQUMvQixlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUdELE1BQU07UUFDSixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQztDQUNGLENBQUE7QUF6QlU7SUFBUixLQUFLLEVBQUU7OzBEQUFnQjtBQUNkO0lBQVQsTUFBTSxFQUFFOzs4REFBeUM7QUFxQmxEO0lBREMsWUFBWSxDQUFDLEdBQUcsQ0FBQzs7OzswREFHakI7QUF6QlUsNEJBQTRCO0lBUHhDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSwyQkFBMkI7UUFDckMsa3FCQUFxRDtRQUVyRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtRQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7S0FDaEQsQ0FBQztHQUNXLDRCQUE0QixDQTBCeEM7U0ExQlksNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbW92ZUl0ZW1JbkFycmF5LCBDZGtEcmFnRHJvcCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9kcmFnLWRyb3AnO1xuaW1wb3J0IHsgZGVib3VuY2VhYmxlIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtb3JkZXJhYmxlLWlucHV0cy1saXN0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL29yZGVyYWJsZS1pbnB1dHMtbGlzdC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL29yZGVyYWJsZS1pbnB1dHMtbGlzdC5jb21wb25lbnQuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBPcmRlcmFibGVJbnB1dHNMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgZGF0YTogc3RyaW5nW107XG4gIEBPdXRwdXQoKSBvblVwZGF0ZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nW10+KCk7XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhIHx8IFtdO1xuICB9XG5cbiAgYWRkRXhhbXBsZSgpOiB2b2lkIHtcbiAgICB0aGlzLmRhdGEucHVzaCgnJyk7XG4gIH1cblxuICByZW1vdmVJdGVtKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmRhdGEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAgZHJvcChldmVudDogQ2RrRHJhZ0Ryb3A8c3RyaW5nW10+KTogdm9pZCB7XG4gICAgbW92ZUl0ZW1JbkFycmF5KHRoaXMuZGF0YSwgZXZlbnQucHJldmlvdXNJbmRleCwgZXZlbnQuY3VycmVudEluZGV4KTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAgQGRlYm91bmNlYWJsZSg1MDApXG4gIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICB0aGlzLm9uVXBkYXRlLmVtaXQodGhpcy5kYXRhKTtcbiAgfVxufVxuIl19