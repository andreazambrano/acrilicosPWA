import { __decorate, __metadata } from "tslib";
import { Component, ContentChildren, QueryList, Input, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, TemplateRef } from '@angular/core';
import { JsonEditorNodeFlatComponent } from './json-editor-node-flat/json-editor-node-flat.component';
import { SchemaValidatorService } from '../schema-validator.service';
import { JsonEditor } from '../json-editor';
import { jsonSchemaDataFormats } from '../json-editor.helper';
import { DialogService } from '../../dialog/dialog.service';
let JsonEditorFlatComponent = class JsonEditorFlatComponent extends JsonEditor {
    constructor(dialogService, schemaValidatorService) {
        super(schemaValidatorService);
        this.dialogService = dialogService;
        this.schemaValidatorService = schemaValidatorService;
        this.schemaBuilderMode = false;
        this.formats = [];
        this.compressed = false;
        this.hideRoot = false;
        this.customFormats = [];
    }
    ngOnInit() {
        this.schemaRef = JSON.parse(JSON.stringify(this.schema));
        if (this.formats.length && this.schemaBuilderMode) {
            this.buildCustomFormats();
        }
    }
    onPropertyConfig() {
        this.dialogService.create({
            template: this.propertyConfigTmpl,
            context: {
                property: this.schema,
                schema: this.schema,
                formats: this.customFormats
            },
            class: 'property-config-dialog'
        });
    }
    updateSchema(options) {
        const editedSchema = options.newProperty;
        if (editedSchema.title) {
            this.schema.title = editedSchema.title;
            this.schemaRef.title = editedSchema.title;
        }
        else {
            delete this.schema.title;
            delete this.schemaRef.title;
        }
        if (editedSchema.description) {
            this.schema.description = editedSchema.description;
            this.schemaRef.description = editedSchema.description;
        }
        else {
            delete this.schema.description;
            delete this.schemaRef.description;
        }
        this.schema = Object.assign({}, this.schema);
        this.schemaRef = Object.assign({}, this.schemaRef);
        this.schemaChange.emit(this.schemaRef);
    }
    buildCustomFormats() {
        this.formats.forEach(format => {
            const found = jsonSchemaDataFormats.find((dataFormat) => {
                return dataFormat.schema.format === format;
            });
            if (found) {
                this.customFormats.push(found);
            }
            else {
                this.customFormats.push({
                    name: format.charAt(0).toUpperCase() + format.slice(1),
                    defaultValue: () => '',
                    schema: {
                        type: 'string',
                        format
                    },
                    icon: 'field-text',
                    matchType: () => {
                        return false;
                    }
                });
            }
        });
    }
};
JsonEditorFlatComponent.ctorParameters = () => [
    { type: DialogService },
    { type: SchemaValidatorService }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorFlatComponent.prototype, "model", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorFlatComponent.prototype, "schema", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorFlatComponent.prototype, "typeCheckOverrides", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], JsonEditorFlatComponent.prototype, "schemaBuilderMode", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], JsonEditorFlatComponent.prototype, "formats", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorFlatComponent.prototype, "compressed", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JsonEditorFlatComponent.prototype, "hideRoot", void 0);
__decorate([
    ContentChildren(JsonEditorNodeFlatComponent),
    __metadata("design:type", QueryList)
], JsonEditorFlatComponent.prototype, "nodeElms", void 0);
__decorate([
    ViewChild('propertyConfigTmpl'),
    __metadata("design:type", TemplateRef)
], JsonEditorFlatComponent.prototype, "propertyConfigTmpl", void 0);
JsonEditorFlatComponent = __decorate([
    Component({
        selector: 'ngx-json-editor-flat',
        template: "<div class=\"ngx-json-editor-flat\">\n  <ngx-json-editor-node-flat\n    [(model)]=\"model\"\n    [schema]=\"schema\"\n    [hideRoot]=\"hideRoot\"\n    [schemaRef]=\"schemaRef\"\n    (modelChange)=\"modelChangedCallback($event)\"\n    [errors]=\"errors\"\n    [typeCheckOverrides]=\"typeCheckOverrides\"\n    [label]=\"label\"\n    [compressed]=\"compressed\"\n    [formats]=\"customFormats\"\n    [schemaBuilderMode]=\"schemaBuilderMode\"\n    (schemaChange)=\"schemaChange.emit($event)\"\n  >\n    <div class=\"node-options\" node-options>\n      <button *ngIf=\"schemaBuilderMode\" type=\"button\" class=\"node-options-btn\" (click)=\"onPropertyConfig()\">\n        <i class=\"ngx-icon ngx-cog\"></i>\n      </button>\n    </div>\n  </ngx-json-editor-node-flat>\n</div>\n\n<!-- Property Config Dialog -->\n<ng-template #propertyConfigTmpl let-context=\"context\">\n  <ngx-property-config\n    [property]=\"context.property\"\n    [schema]=\"context.schema\"\n    [formats]=\"context.formats\"\n    [rootItem]=\"true\"\n    (updateSchema)=\"updateSchema($event)\"\n  >\n  </ngx-property-config>\n</ng-template>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None,
        styles: [".ngx-json-editor-flat{position:relative}.ngx-json-editor-flat .node-options .node-options-btn{color:#72819f;padding:1px 3px 2px}.ngx-json-editor-flat .node-options .ngx-dropdown{margin-left:10px}.property-config-dialog .ngx-dialog-content{padding:0!important;min-width:500px!important}"]
    }),
    __metadata("design:paramtypes", [DialogService, SchemaValidatorService])
], JsonEditorFlatComponent);
export { JsonEditorFlatComponent };
//# sourceMappingURL=data:application/json;base64,