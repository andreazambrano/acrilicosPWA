import { isPercent } from './is-percent.util';
import { basisToValue } from './basis-to-value.util';
import { getMinMaxPct } from './get-min-max-pct.util';
export function resizeAreaBy(area, _delta, basisToPx) {
    if (area.fxFlexFill) {
        // area is fxFlexFill, distribute delta right
        return _delta;
    }
    const [grow, shrink, basis] = area.currentFlexBasis;
    const isPct = isPercent(basis);
    const basisValue = basisToValue(basis);
    // get baseBasis in percent
    const baseBasis = area.initialFlexBasis[2];
    const baseBasisPct = basisToValue(baseBasis) / (isPercent(baseBasis) ? basisToPx : 1);
    // get basis in px and %
    const basisPx = isPct ? basisValue * basisToPx : basisValue;
    // determine which dir and calc the diff
    let newBasisPx = basisPx + _delta;
    let newBasisPct = newBasisPx / basisToPx;
    const [minBasisPct, maxBasisPct] = getMinMaxPct(area.minBasis, area.maxBasis, grow, shrink, baseBasisPct, basisToPx);
    // obey max and min
    newBasisPct = Math.max(newBasisPct, minBasisPct);
    newBasisPct = Math.min(newBasisPct, maxBasisPct);
    // calculate new basis on px
    newBasisPx = newBasisPct * basisToPx;
    // update flexlayout
    area.updateStyle(isPct ? newBasisPct : newBasisPx);
    // return actual change in px
    return newBasisPx - basisPx;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLWFyZWEtYnkudXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9zcGxpdC9yZXNpemUtYXJlYS1ieS51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXRELE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBd0IsRUFBRSxNQUFjLEVBQUUsU0FBaUI7SUFDdEYsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1FBQ25CLDZDQUE2QztRQUM3QyxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBRUQsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQ3BELE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixNQUFNLFVBQVUsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFdkMsMkJBQTJCO0lBQzNCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQyxNQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEYsd0JBQXdCO0lBQ3hCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO0lBRTVELHdDQUF3QztJQUN4QyxJQUFJLFVBQVUsR0FBRyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQ2xDLElBQUksV0FBVyxHQUFHLFVBQVUsR0FBRyxTQUFTLENBQUM7SUFFekMsTUFBTSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRXJILG1CQUFtQjtJQUNuQixXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDakQsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRWpELDRCQUE0QjtJQUM1QixVQUFVLEdBQUcsV0FBVyxHQUFHLFNBQVMsQ0FBQztJQUVyQyxvQkFBb0I7SUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFbkQsNkJBQTZCO0lBQzdCLE9BQU8sVUFBVSxHQUFHLE9BQU8sQ0FBQztBQUM5QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3BsaXRBcmVhRGlyZWN0aXZlIH0gZnJvbSAnLi9zcGxpdC1hcmVhLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBpc1BlcmNlbnQgfSBmcm9tICcuL2lzLXBlcmNlbnQudXRpbCc7XG5pbXBvcnQgeyBiYXNpc1RvVmFsdWUgfSBmcm9tICcuL2Jhc2lzLXRvLXZhbHVlLnV0aWwnO1xuaW1wb3J0IHsgZ2V0TWluTWF4UGN0IH0gZnJvbSAnLi9nZXQtbWluLW1heC1wY3QudXRpbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNpemVBcmVhQnkoYXJlYTogU3BsaXRBcmVhRGlyZWN0aXZlLCBfZGVsdGE6IG51bWJlciwgYmFzaXNUb1B4OiBudW1iZXIpIHtcbiAgaWYgKGFyZWEuZnhGbGV4RmlsbCkge1xuICAgIC8vIGFyZWEgaXMgZnhGbGV4RmlsbCwgZGlzdHJpYnV0ZSBkZWx0YSByaWdodFxuICAgIHJldHVybiBfZGVsdGE7XG4gIH1cblxuICBjb25zdCBbZ3Jvdywgc2hyaW5rLCBiYXNpc10gPSBhcmVhLmN1cnJlbnRGbGV4QmFzaXM7XG4gIGNvbnN0IGlzUGN0ID0gaXNQZXJjZW50KGJhc2lzKTtcbiAgY29uc3QgYmFzaXNWYWx1ZSA9IGJhc2lzVG9WYWx1ZShiYXNpcyk7XG5cbiAgLy8gZ2V0IGJhc2VCYXNpcyBpbiBwZXJjZW50XG4gIGNvbnN0IGJhc2VCYXNpcyA9IGFyZWEuaW5pdGlhbEZsZXhCYXNpc1syXTtcbiAgY29uc3QgYmFzZUJhc2lzUGN0ID0gYmFzaXNUb1ZhbHVlKGJhc2VCYXNpcykgLyAoaXNQZXJjZW50KGJhc2VCYXNpcykgPyBiYXNpc1RvUHggOiAxKTtcblxuICAvLyBnZXQgYmFzaXMgaW4gcHggYW5kICVcbiAgY29uc3QgYmFzaXNQeCA9IGlzUGN0ID8gYmFzaXNWYWx1ZSAqIGJhc2lzVG9QeCA6IGJhc2lzVmFsdWU7XG5cbiAgLy8gZGV0ZXJtaW5lIHdoaWNoIGRpciBhbmQgY2FsYyB0aGUgZGlmZlxuICBsZXQgbmV3QmFzaXNQeCA9IGJhc2lzUHggKyBfZGVsdGE7XG4gIGxldCBuZXdCYXNpc1BjdCA9IG5ld0Jhc2lzUHggLyBiYXNpc1RvUHg7XG5cbiAgY29uc3QgW21pbkJhc2lzUGN0LCBtYXhCYXNpc1BjdF0gPSBnZXRNaW5NYXhQY3QoYXJlYS5taW5CYXNpcywgYXJlYS5tYXhCYXNpcywgZ3Jvdywgc2hyaW5rLCBiYXNlQmFzaXNQY3QsIGJhc2lzVG9QeCk7XG5cbiAgLy8gb2JleSBtYXggYW5kIG1pblxuICBuZXdCYXNpc1BjdCA9IE1hdGgubWF4KG5ld0Jhc2lzUGN0LCBtaW5CYXNpc1BjdCk7XG4gIG5ld0Jhc2lzUGN0ID0gTWF0aC5taW4obmV3QmFzaXNQY3QsIG1heEJhc2lzUGN0KTtcblxuICAvLyBjYWxjdWxhdGUgbmV3IGJhc2lzIG9uIHB4XG4gIG5ld0Jhc2lzUHggPSBuZXdCYXNpc1BjdCAqIGJhc2lzVG9QeDtcblxuICAvLyB1cGRhdGUgZmxleGxheW91dFxuICBhcmVhLnVwZGF0ZVN0eWxlKGlzUGN0ID8gbmV3QmFzaXNQY3QgOiBuZXdCYXNpc1B4KTtcblxuICAvLyByZXR1cm4gYWN0dWFsIGNoYW5nZSBpbiBweFxuICByZXR1cm4gbmV3QmFzaXNQeCAtIGJhc2lzUHg7XG59XG4iXX0=