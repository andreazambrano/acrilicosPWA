import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Output, ViewEncapsulation } from '@angular/core';
import { fromEvent } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { SplitDirection } from './split-direction.enum';
let SplitHandleComponent = class SplitHandleComponent {
    constructor() {
        this.drag = new EventEmitter();
        this.dragStart = new EventEmitter();
        this.dragEnd = new EventEmitter();
        this.dblclick = new EventEmitter();
        this.direction = SplitDirection.Row;
    }
    get isRow() {
        return this.direction === SplitDirection.Row;
    }
    get isColumn() {
        return this.direction === SplitDirection.Column;
    }
    onMousedown(ev) {
        const mouseup$ = fromEvent(document, 'mouseup');
        this.subscription = mouseup$.subscribe(/* istanbul ignore next */ (e) => this.onMouseup(e));
        const mousemove$ = fromEvent(document, 'mousemove')
            .pipe(takeUntil(mouseup$))
            .subscribe(/* istanbul ignore next */ (e) => this.onMouseMove(e));
        this.subscription.add(mousemove$);
        this.dragStart.emit(ev);
    }
    onMouseMove(ev) {
        this.drag.emit(ev);
    }
    onMouseup(ev) {
        if (this.subscription) {
            this.dragEnd.emit(ev);
            this.subscription.unsubscribe();
            this.subscription = undefined;
        }
    }
};
__decorate([
    Output(),
    __metadata("design:type", Object)
], SplitHandleComponent.prototype, "drag", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], SplitHandleComponent.prototype, "dragStart", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], SplitHandleComponent.prototype, "dragEnd", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], SplitHandleComponent.prototype, "dblclick", void 0);
SplitHandleComponent = __decorate([
    Component({
        exportAs: 'ngxSplitHandle',
        // tslint:disable-next-line:component-selector
        selector: '[ngxSplitHandle]',
        template: "<button\n  #splitHandle\n  class=\"icon-split-handle ngx-split-button\"\n  (mousedown)=\"onMousedown($event)\"\n  (dblclick)=\"dblclick.emit($event)\"\n></button>\n",
        host: {
            class: 'ngx-split-handle',
            '[class.direction-row]': 'isRow',
            '[class.direction-column]': 'isColumn'
        },
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [".ngx-split-handle{position:relative}.ngx-split-handle .ngx-split-button{line-height:0;font-size:32px;position:absolute;display:block;padding:0}.ngx-split-handle.direction-row .ngx-split-button{top:50%;left:50%;cursor:col-resize;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.ngx-split-handle.direction-column .ngx-split-button{left:50%;cursor:row-resize;top:-3px;-webkit-transform:translateX(-50%) rotate(270deg);transform:translateX(-50%) rotate(270deg)}"]
    })
], SplitHandleComponent);
export { SplitHandleComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXQtaGFuZGxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9zcGxpdC9zcGxpdC1oYW5kbGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUcsT0FBTyxFQUFnQixTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQWdCeEQsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBb0I7SUFBakM7UUFDWSxTQUFJLEdBQUcsSUFBSSxZQUFZLEVBQTRCLENBQUM7UUFDcEQsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7UUFDM0MsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7UUFDekMsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7UUFHcEQsY0FBUyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUM7SUFpQ2pDLENBQUM7SUEvQkMsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsU0FBUyxLQUFLLGNBQWMsQ0FBQyxHQUFHLENBQUM7SUFDL0MsQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsS0FBSyxjQUFjLENBQUMsTUFBTSxDQUFDO0lBQ2xELENBQUM7SUFFRCxXQUFXLENBQUMsRUFBYztRQUN4QixNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQWEsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXhHLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDO2FBQ2hELElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDekIsU0FBUyxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBYSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFaEYsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELFdBQVcsQ0FBQyxFQUFjO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxTQUFTLENBQUMsRUFBYztRQUN0QixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNoQyxJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztTQUMvQjtJQUNILENBQUM7Q0FDRixDQUFBO0FBdkNXO0lBQVQsTUFBTSxFQUFFOztrREFBcUQ7QUFDcEQ7SUFBVCxNQUFNLEVBQUU7O3VEQUE0QztBQUMzQztJQUFULE1BQU0sRUFBRTs7cURBQTBDO0FBQ3pDO0lBQVQsTUFBTSxFQUFFOztzREFBMkM7QUFKekMsb0JBQW9CO0lBZGhDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxnQkFBZ0I7UUFDMUIsOENBQThDO1FBQzlDLFFBQVEsRUFBRSxrQkFBa0I7UUFDNUIsZ0xBQTRDO1FBRTVDLElBQUksRUFBRTtZQUNKLEtBQUssRUFBRSxrQkFBa0I7WUFDekIsdUJBQXVCLEVBQUUsT0FBTztZQUNoQywwQkFBMEIsRUFBRSxVQUFVO1NBQ3ZDO1FBQ0QsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7UUFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O0tBQ2hELENBQUM7R0FDVyxvQkFBb0IsQ0F3Q2hDO1NBeENZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCBmcm9tRXZlbnQgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgU3BsaXREaXJlY3Rpb24gfSBmcm9tICcuL3NwbGl0LWRpcmVjdGlvbi5lbnVtJztcblxuQENvbXBvbmVudCh7XG4gIGV4cG9ydEFzOiAnbmd4U3BsaXRIYW5kbGUnLFxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnW25neFNwbGl0SGFuZGxlXScsXG4gIHRlbXBsYXRlVXJsOiAnLi9zcGxpdC1oYW5kbGUuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9zcGxpdC1oYW5kbGUuY29tcG9uZW50LnNjc3MnXSxcbiAgaG9zdDoge1xuICAgIGNsYXNzOiAnbmd4LXNwbGl0LWhhbmRsZScsXG4gICAgJ1tjbGFzcy5kaXJlY3Rpb24tcm93XSc6ICdpc1JvdycsXG4gICAgJ1tjbGFzcy5kaXJlY3Rpb24tY29sdW1uXSc6ICdpc0NvbHVtbidcbiAgfSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgU3BsaXRIYW5kbGVDb21wb25lbnQge1xuICBAT3V0cHV0KCkgZHJhZyA9IG5ldyBFdmVudEVtaXR0ZXI8eyB4OiBudW1iZXI7IHk6IG51bWJlciB9PigpO1xuICBAT3V0cHV0KCkgZHJhZ1N0YXJ0ID0gbmV3IEV2ZW50RW1pdHRlcjxNb3VzZUV2ZW50PigpO1xuICBAT3V0cHV0KCkgZHJhZ0VuZCA9IG5ldyBFdmVudEVtaXR0ZXI8TW91c2VFdmVudD4oKTtcbiAgQE91dHB1dCgpIGRibGNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxNb3VzZUV2ZW50PigpO1xuXG4gIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICBkaXJlY3Rpb24gPSBTcGxpdERpcmVjdGlvbi5Sb3c7XG5cbiAgZ2V0IGlzUm93KCkge1xuICAgIHJldHVybiB0aGlzLmRpcmVjdGlvbiA9PT0gU3BsaXREaXJlY3Rpb24uUm93O1xuICB9XG5cbiAgZ2V0IGlzQ29sdW1uKCkge1xuICAgIHJldHVybiB0aGlzLmRpcmVjdGlvbiA9PT0gU3BsaXREaXJlY3Rpb24uQ29sdW1uO1xuICB9XG5cbiAgb25Nb3VzZWRvd24oZXY6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCBtb3VzZXVwJCA9IGZyb21FdmVudChkb2N1bWVudCwgJ21vdXNldXAnKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG1vdXNldXAkLnN1YnNjcmliZSgvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyAoZTogTW91c2VFdmVudCkgPT4gdGhpcy5vbk1vdXNldXAoZSkpO1xuXG4gICAgY29uc3QgbW91c2Vtb3ZlJCA9IGZyb21FdmVudChkb2N1bWVudCwgJ21vdXNlbW92ZScpXG4gICAgICAucGlwZSh0YWtlVW50aWwobW91c2V1cCQpKVxuICAgICAgLnN1YnNjcmliZSgvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyAoZTogTW91c2VFdmVudCkgPT4gdGhpcy5vbk1vdXNlTW92ZShlKSk7XG5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbi5hZGQobW91c2Vtb3ZlJCk7XG4gICAgdGhpcy5kcmFnU3RhcnQuZW1pdChldik7XG4gIH1cblxuICBvbk1vdXNlTW92ZShldjogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuZHJhZy5lbWl0KGV2KTtcbiAgfVxuXG4gIG9uTW91c2V1cChldjogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5kcmFnRW5kLmVtaXQoZXYpO1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxufVxuIl19