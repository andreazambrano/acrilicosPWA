import { __decorate, __metadata, __param } from "tslib";
import { Directive, Optional, Self, Input } from '@angular/core';
import { DefaultFlexDirective, validateBasis } from '@angular/flex-layout';
let SplitAreaDirective = class SplitAreaDirective {
    constructor(flexDirective) {
        this.flexDirective = flexDirective;
        this.overflow = 'hidden';
    }
    get fxFlexFill() {
        return this.fxFlex === '';
    }
    ngOnChanges() {
        this.currentFlexBasis = this.initialFlexBasis = this.getCurrentFlexParts();
    }
    updateStyle(flexBasis) {
        const flex = this.flexDirective;
        if (typeof flexBasis === 'undefined') {
            flexBasis = flex.activatedValue || '';
        }
        if (typeof flexBasis === 'number') {
            flexBasis = this.isPercent() ? `${flexBasis}%` : `${flexBasis}px`;
        }
        if (flexBasis.indexOf(' ') < 0) {
            const grow = flex.grow;
            const shrink = flex.shrink;
            this.currentFlexBasis = [grow, shrink, flexBasis];
            flexBasis = this.currentFlexBasis.join(' ');
        }
        else {
            this.currentFlexBasis = flexBasis.split(' ');
        }
        flex.activatedValue = this.currentFlexBasis[2];
    }
    isPercent(basis) {
        if (!basis) {
            const flex = this.flexDirective;
            basis = flex.activatedValue || '1 1 1e-9px';
        }
        const hasCalc = String(basis).indexOf('calc') > -1;
        return String(basis).indexOf('%') > -1 && !hasCalc;
    }
    getCurrentFlexParts() {
        const flex = this.flexDirective;
        const basis = (flex && flex.activatedValue) || '1 1 1e-9px';
        return validateBasis(String(basis).replace(';', ''), flex.grow, flex.shrink);
    }
};
SplitAreaDirective.ctorParameters = () => [
    { type: DefaultFlexDirective, decorators: [{ type: Optional }, { type: Self }] }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], SplitAreaDirective.prototype, "minBasis", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SplitAreaDirective.prototype, "maxBasis", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], SplitAreaDirective.prototype, "fxFlex", void 0);
SplitAreaDirective = __decorate([
    Directive({
        exportAs: 'ngxSplitArea',
        selector: '[ngxSplitArea]',
        host: {
            class: 'ngx-split-area',
            '[style.overflow]': 'overflow'
        }
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __metadata("design:paramtypes", [DefaultFlexDirective])
], SplitAreaDirective);
export { SplitAreaDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXQtYXJlYS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvc3BsaXQvc3BsaXQtYXJlYS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBVTNFLElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0lBYTdCLFlBR1csYUFBbUM7UUFBbkMsa0JBQWEsR0FBYixhQUFhLENBQXNCO1FBWDlDLGFBQVEsR0FBVyxRQUFRLENBQUM7SUFZekIsQ0FBQztJQVJKLElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQVFELFdBQVc7UUFDVCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdFLENBQUM7SUFFRCxXQUFXLENBQUMsU0FBMkI7UUFDckMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUNoQyxJQUFJLE9BQU8sU0FBUyxLQUFLLFdBQVcsRUFBRTtZQUNwQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGNBQWMsSUFBSSxFQUFFLENBQUM7U0FDdkM7UUFDRCxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRTtZQUNqQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsSUFBSSxDQUFDO1NBQ25FO1FBRUQsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM5QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3ZCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDM0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUNsRCxTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM3QzthQUFNO1lBQ0wsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDOUM7UUFFRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQWM7UUFDdEIsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7WUFDaEMsS0FBSyxHQUFHLElBQUksQ0FBQyxjQUFjLElBQUksWUFBWSxDQUFDO1NBQzdDO1FBQ0QsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuRCxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDckQsQ0FBQztJQUVPLG1CQUFtQjtRQUN6QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ2hDLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxZQUFZLENBQUM7UUFDNUQsT0FBTyxhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0UsQ0FBQztDQUNGLENBQUE7O1lBMUMyQixvQkFBb0IsdUJBRjNDLFFBQVEsWUFDUixJQUFJOztBQWRFO0lBQVIsS0FBSyxFQUFFOztvREFBa0I7QUFDakI7SUFBUixLQUFLLEVBQUU7O29EQUFrQjtBQUNqQjtJQUFSLEtBQUssRUFBRTs7a0RBQWdCO0FBSGIsa0JBQWtCO0lBUjlCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxjQUFjO1FBQ3hCLFFBQVEsRUFBRSxnQkFBZ0I7UUFDMUIsSUFBSSxFQUFFO1lBQ0osS0FBSyxFQUFFLGdCQUFnQjtZQUN2QixrQkFBa0IsRUFBRSxVQUFVO1NBQy9CO0tBQ0YsQ0FBQztJQWVHLFdBQUEsUUFBUSxFQUFFLENBQUE7SUFDVixXQUFBLElBQUksRUFBRSxDQUFBO3FDQUNpQixvQkFBb0I7R0FoQm5DLGtCQUFrQixDQTBEOUI7U0ExRFksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBPcHRpb25hbCwgU2VsZiwgSW5wdXQsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGVmYXVsdEZsZXhEaXJlY3RpdmUsIHZhbGlkYXRlQmFzaXMgfSBmcm9tICdAYW5ndWxhci9mbGV4LWxheW91dCc7XG5cbkBEaXJlY3RpdmUoe1xuICBleHBvcnRBczogJ25neFNwbGl0QXJlYScsXG4gIHNlbGVjdG9yOiAnW25neFNwbGl0QXJlYV0nLFxuICBob3N0OiB7XG4gICAgY2xhc3M6ICduZ3gtc3BsaXQtYXJlYScsXG4gICAgJ1tzdHlsZS5vdmVyZmxvd10nOiAnb3ZlcmZsb3cnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgU3BsaXRBcmVhRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgbWluQmFzaXM6IHN0cmluZztcbiAgQElucHV0KCkgbWF4QmFzaXM6IHN0cmluZztcbiAgQElucHV0KCkgZnhGbGV4OiBzdHJpbmc7XG5cbiAgb3ZlcmZsb3c6IHN0cmluZyA9ICdoaWRkZW4nO1xuICBpbml0aWFsRmxleEJhc2lzOiBzdHJpbmdbXTtcbiAgY3VycmVudEZsZXhCYXNpczogc3RyaW5nW107XG5cbiAgZ2V0IGZ4RmxleEZpbGwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZnhGbGV4ID09PSAnJztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgQFNlbGYoKVxuICAgIHJlYWRvbmx5IGZsZXhEaXJlY3RpdmU6IERlZmF1bHRGbGV4RGlyZWN0aXZlXG4gICkge31cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICB0aGlzLmN1cnJlbnRGbGV4QmFzaXMgPSB0aGlzLmluaXRpYWxGbGV4QmFzaXMgPSB0aGlzLmdldEN1cnJlbnRGbGV4UGFydHMoKTtcbiAgfVxuXG4gIHVwZGF0ZVN0eWxlKGZsZXhCYXNpcz86IHN0cmluZyB8IG51bWJlcikge1xuICAgIGNvbnN0IGZsZXggPSB0aGlzLmZsZXhEaXJlY3RpdmU7XG4gICAgaWYgKHR5cGVvZiBmbGV4QmFzaXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBmbGV4QmFzaXMgPSBmbGV4LmFjdGl2YXRlZFZhbHVlIHx8ICcnO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZsZXhCYXNpcyA9PT0gJ251bWJlcicpIHtcbiAgICAgIGZsZXhCYXNpcyA9IHRoaXMuaXNQZXJjZW50KCkgPyBgJHtmbGV4QmFzaXN9JWAgOiBgJHtmbGV4QmFzaXN9cHhgO1xuICAgIH1cblxuICAgIGlmIChmbGV4QmFzaXMuaW5kZXhPZignICcpIDwgMCkge1xuICAgICAgY29uc3QgZ3JvdyA9IGZsZXguZ3JvdztcbiAgICAgIGNvbnN0IHNocmluayA9IGZsZXguc2hyaW5rO1xuICAgICAgdGhpcy5jdXJyZW50RmxleEJhc2lzID0gW2dyb3csIHNocmluaywgZmxleEJhc2lzXTtcbiAgICAgIGZsZXhCYXNpcyA9IHRoaXMuY3VycmVudEZsZXhCYXNpcy5qb2luKCcgJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudEZsZXhCYXNpcyA9IGZsZXhCYXNpcy5zcGxpdCgnICcpO1xuICAgIH1cblxuICAgIGZsZXguYWN0aXZhdGVkVmFsdWUgPSB0aGlzLmN1cnJlbnRGbGV4QmFzaXNbMl07XG4gIH1cblxuICBpc1BlcmNlbnQoYmFzaXM/OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoIWJhc2lzKSB7XG4gICAgICBjb25zdCBmbGV4ID0gdGhpcy5mbGV4RGlyZWN0aXZlO1xuICAgICAgYmFzaXMgPSBmbGV4LmFjdGl2YXRlZFZhbHVlIHx8ICcxIDEgMWUtOXB4JztcbiAgICB9XG4gICAgY29uc3QgaGFzQ2FsYyA9IFN0cmluZyhiYXNpcykuaW5kZXhPZignY2FsYycpID4gLTE7XG4gICAgcmV0dXJuIFN0cmluZyhiYXNpcykuaW5kZXhPZignJScpID4gLTEgJiYgIWhhc0NhbGM7XG4gIH1cblxuICBwcml2YXRlIGdldEN1cnJlbnRGbGV4UGFydHMoKSB7XG4gICAgY29uc3QgZmxleCA9IHRoaXMuZmxleERpcmVjdGl2ZTtcbiAgICBjb25zdCBiYXNpcyA9IChmbGV4ICYmIGZsZXguYWN0aXZhdGVkVmFsdWUpIHx8ICcxIDEgMWUtOXB4JztcbiAgICByZXR1cm4gdmFsaWRhdGVCYXNpcyhTdHJpbmcoYmFzaXMpLnJlcGxhY2UoJzsnLCAnJyksIGZsZXguZ3JvdywgZmxleC5zaHJpbmspO1xuICB9XG59XG4iXX0=