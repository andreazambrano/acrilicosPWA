import { getType } from '../../utils';
export function jsonToTree(value, label) {
    const type = getType(value);
    let children;
    let expandable = false;
    if (typeof label === 'undefined') {
        label = label || type;
    }
    switch (type) {
        case 'object':
            children = Object.keys(value).map(key => jsonToTree(value[key], key));
            expandable = children.length > 0;
            return {
                label,
                expandable,
                expanded: true,
                model: { type, value },
                children
            };
        case 'array':
            children = value.map(jsonToTree);
            expandable = children.length > 0;
            return {
                label,
                expandable,
                expanded: true,
                model: { type, value },
                children
            };
        default:
            return {
                label,
                expandable,
                model: { type, value }
            };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi10by10cmVlLnV0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL3BpcGVzL2pzb24tdHJlZS9qc29uLXRvLXRyZWUudXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBSXRDLE1BQU0sVUFBVSxVQUFVLENBQUMsS0FBVSxFQUFFLEtBQWM7SUFDbkQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTVCLElBQUksUUFBZSxDQUFDO0lBQ3BCLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztJQUV2QixJQUFJLE9BQU8sS0FBSyxLQUFLLFdBQVcsRUFBRTtRQUNoQyxLQUFLLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQztLQUN2QjtJQUVELFFBQVEsSUFBSSxFQUFFO1FBQ1osS0FBSyxRQUFRO1lBQ1gsUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3RFLFVBQVUsR0FBRyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUVqQyxPQUFPO2dCQUNMLEtBQUs7Z0JBQ0wsVUFBVTtnQkFDVixRQUFRLEVBQUUsSUFBSTtnQkFDZCxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFO2dCQUN0QixRQUFRO2FBQ1QsQ0FBQztRQUNKLEtBQUssT0FBTztZQUNWLFFBQVEsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2pDLFVBQVUsR0FBRyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUVqQyxPQUFPO2dCQUNMLEtBQUs7Z0JBQ0wsVUFBVTtnQkFDVixRQUFRLEVBQUUsSUFBSTtnQkFDZCxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFO2dCQUN0QixRQUFRO2FBQ1QsQ0FBQztRQUNKO1lBQ0UsT0FBTztnQkFDTCxLQUFLO2dCQUNMLFVBQVU7Z0JBQ1YsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTthQUN2QixDQUFDO0tBQ0w7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0VHlwZSB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuaW1wb3J0IHsgVHJlZU5vZGUgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL3RyZWUvdHJlZS1ub2RlLm1vZGVsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGpzb25Ub1RyZWUodmFsdWU6IGFueSwgbGFiZWw/OiBzdHJpbmcpOiBUcmVlTm9kZSB7XG4gIGNvbnN0IHR5cGUgPSBnZXRUeXBlKHZhbHVlKTtcblxuICBsZXQgY2hpbGRyZW46IGFueVtdO1xuICBsZXQgZXhwYW5kYWJsZSA9IGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgbGFiZWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgbGFiZWwgPSBsYWJlbCB8fCB0eXBlO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGNoaWxkcmVuID0gT2JqZWN0LmtleXModmFsdWUpLm1hcChrZXkgPT4ganNvblRvVHJlZSh2YWx1ZVtrZXldLCBrZXkpKTtcbiAgICAgIGV4cGFuZGFibGUgPSBjaGlsZHJlbi5sZW5ndGggPiAwO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsYWJlbCxcbiAgICAgICAgZXhwYW5kYWJsZSxcbiAgICAgICAgZXhwYW5kZWQ6IHRydWUsXG4gICAgICAgIG1vZGVsOiB7IHR5cGUsIHZhbHVlIH0sXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICB9O1xuICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgIGNoaWxkcmVuID0gdmFsdWUubWFwKGpzb25Ub1RyZWUpO1xuICAgICAgZXhwYW5kYWJsZSA9IGNoaWxkcmVuLmxlbmd0aCA+IDA7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxhYmVsLFxuICAgICAgICBleHBhbmRhYmxlLFxuICAgICAgICBleHBhbmRlZDogdHJ1ZSxcbiAgICAgICAgbW9kZWw6IHsgdHlwZSwgdmFsdWUgfSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxhYmVsLFxuICAgICAgICBleHBhbmRhYmxlLFxuICAgICAgICBtb2RlbDogeyB0eXBlLCB2YWx1ZSB9XG4gICAgICB9O1xuICB9XG59XG4iXX0=