import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { convertClass } from './convert-class.util';
let IconRegistryService = class IconRegistryService {
    constructor() {
        this._defaultFontSetClass = 'ngx';
        this._iconMap = new Map();
    }
    setDefaultFontSetClass(iconSet) {
        this._defaultFontSetClass = iconSet;
        return this._defaultFontSetClass;
    }
    get(keys, set) {
        return this.lookup(keys, set).map(k => convertClass(k));
    }
    lookup(keys, set) {
        return (Array.isArray(keys) ? keys : [keys]).reduce((p, k) => {
            k = this._expandKeys(k, set)
                .map(kk => {
                const x = this._iconMap.get(kk);
                return x && x.length === 1 ? x[0] : kk;
            })
                .join(' ');
            return p.concat(this._iconMap.get(k) || [k]);
        }, []);
    }
    add(key, icon) {
        const k = this._expandKeys(key).join(' ');
        const v = this.lookup(icon);
        this._iconMap.set(k, v);
    }
    _expandKeys(key, set = this._defaultFontSetClass) {
        return key.split(' ').map(k => {
            if (k.includes(':'))
                return k;
            return `${set}:${k}`;
        });
    }
};
IconRegistryService = __decorate([
    Injectable()
], IconRegistryService);
export { IconRegistryService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1yZWdpc3RyeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3aW1sYW5lL25neC11aS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9pY29uLXJlZ2lzdHJ5L2ljb24tcmVnaXN0cnkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHcEQsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7SUFBaEM7UUFDVSx5QkFBb0IsR0FBVyxLQUFLLENBQUM7UUFDckMsYUFBUSxHQUEwQixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBbUN0RCxDQUFDO0lBakNDLHNCQUFzQixDQUFDLE9BQWU7UUFDcEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLE9BQU8sQ0FBQztRQUNwQyxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztJQUNuQyxDQUFDO0lBRUQsR0FBRyxDQUFDLElBQXVCLEVBQUUsR0FBWTtRQUN2QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxNQUFNLENBQUMsSUFBdUIsRUFBRSxHQUFZO1FBQzFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFXLEVBQUUsQ0FBUyxFQUFFLEVBQUU7WUFDN0UsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztpQkFDekIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUNSLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNoQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDekMsQ0FBQyxDQUFDO2lCQUNELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNiLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0MsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFXLEVBQUUsSUFBdUI7UUFDdEMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVPLFdBQVcsQ0FBQyxHQUFXLEVBQUUsTUFBYyxJQUFJLENBQUMsb0JBQW9CO1FBQ3RFLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDNUIsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztnQkFBRSxPQUFPLENBQUMsQ0FBQztZQUM5QixPQUFPLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUE7QUFyQ1ksbUJBQW1CO0lBRC9CLFVBQVUsRUFBRTtHQUNBLG1CQUFtQixDQXFDL0I7U0FyQ1ksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0Q2xhc3MgfSBmcm9tICcuL2NvbnZlcnQtY2xhc3MudXRpbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJY29uUmVnaXN0cnlTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfZGVmYXVsdEZvbnRTZXRDbGFzczogc3RyaW5nID0gJ25neCc7XG4gIHByaXZhdGUgX2ljb25NYXA6IE1hcDxzdHJpbmcsIHN0cmluZ1tdPiA9IG5ldyBNYXAoKTtcblxuICBzZXREZWZhdWx0Rm9udFNldENsYXNzKGljb25TZXQ6IHN0cmluZykge1xuICAgIHRoaXMuX2RlZmF1bHRGb250U2V0Q2xhc3MgPSBpY29uU2V0O1xuICAgIHJldHVybiB0aGlzLl9kZWZhdWx0Rm9udFNldENsYXNzO1xuICB9XG5cbiAgZ2V0KGtleXM6IHN0cmluZyB8IHN0cmluZ1tdLCBzZXQ/OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMubG9va3VwKGtleXMsIHNldCkubWFwKGsgPT4gY29udmVydENsYXNzKGspKTtcbiAgfVxuXG4gIGxvb2t1cChrZXlzOiBzdHJpbmcgfCBzdHJpbmdbXSwgc2V0Pzogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShrZXlzKSA/IGtleXMgOiBba2V5c10pLnJlZHVjZSgocDogc3RyaW5nW10sIGs6IHN0cmluZykgPT4ge1xuICAgICAgayA9IHRoaXMuX2V4cGFuZEtleXMoaywgc2V0KVxuICAgICAgICAubWFwKGtrID0+IHtcbiAgICAgICAgICBjb25zdCB4ID0gdGhpcy5faWNvbk1hcC5nZXQoa2spO1xuICAgICAgICAgIHJldHVybiB4ICYmIHgubGVuZ3RoID09PSAxID8geFswXSA6IGtrO1xuICAgICAgICB9KVxuICAgICAgICAuam9pbignICcpO1xuICAgICAgcmV0dXJuIHAuY29uY2F0KHRoaXMuX2ljb25NYXAuZ2V0KGspIHx8IFtrXSk7XG4gICAgfSwgW10pO1xuICB9XG5cbiAgYWRkKGtleTogc3RyaW5nLCBpY29uOiBzdHJpbmcgfCBzdHJpbmdbXSk6IHZvaWQge1xuICAgIGNvbnN0IGsgPSB0aGlzLl9leHBhbmRLZXlzKGtleSkuam9pbignICcpO1xuICAgIGNvbnN0IHYgPSB0aGlzLmxvb2t1cChpY29uKTtcbiAgICB0aGlzLl9pY29uTWFwLnNldChrLCB2KTtcbiAgfVxuXG4gIHByaXZhdGUgX2V4cGFuZEtleXMoa2V5OiBzdHJpbmcsIHNldDogc3RyaW5nID0gdGhpcy5fZGVmYXVsdEZvbnRTZXRDbGFzcyk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4ga2V5LnNwbGl0KCcgJykubWFwKGsgPT4ge1xuICAgICAgaWYgKGsuaW5jbHVkZXMoJzonKSkgcmV0dXJuIGs7XG4gICAgICByZXR1cm4gYCR7c2V0fToke2t9YDtcbiAgICB9KTtcbiAgfVxufVxuIl19