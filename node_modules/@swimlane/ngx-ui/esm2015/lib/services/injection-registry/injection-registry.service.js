/* istanbul ignore next */
export class InjectionRegistryService {
    constructor(injectionService) {
        this.injectionService = injectionService;
        this.defaults = {};
        this.components = new Map();
    }
    getByType(type = this.type) {
        return this.components.get(type);
    }
    create(bindings) {
        return this.createByType(this.type, bindings);
    }
    createByType(type, bindings) {
        const location = bindings.parentContainer;
        bindings = this.assignDefaults(bindings);
        const component = this.injectComponent(type, bindings, location);
        this.register(type, component);
        return component;
    }
    destroy(instance) {
        const compsByType = this.components.get(instance.componentType);
        if (compsByType && compsByType.length) {
            const idx = compsByType.indexOf(instance);
            if (idx > -1) {
                const component = compsByType[idx];
                component.destroy();
                compsByType.splice(idx, 1);
            }
        }
    }
    destroyAll() {
        this.destroyByType(this.type);
    }
    destroyByType(type) {
        const comps = this.components.get(type);
        if (comps && comps.length) {
            let i = comps.length - 1;
            while (i >= 0) {
                this.destroy(comps[i--]);
            }
        }
    }
    injectComponent(type, bindings, location) {
        return this.injectionService.appendComponent(type, bindings, location);
    }
    assignDefaults(bindings) {
        const inputs = Object.assign({}, this.defaults.inputs);
        const outputs = Object.assign({}, this.defaults.outputs);
        if (!bindings.inputs && !bindings.outputs) {
            bindings = { inputs: bindings };
        }
        if (inputs) {
            bindings.inputs = Object.assign(Object.assign({}, inputs), bindings.inputs);
        }
        if (outputs) {
            bindings.outputs = Object.assign(Object.assign({}, outputs), bindings.outputs);
        }
        return bindings;
    }
    register(type, component) {
        if (!this.components.has(type)) {
            this.components.set(type, []);
        }
        const types = this.components.get(type);
        types.push(component);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0aW9uLXJlZ2lzdHJ5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2luamVjdGlvbi1yZWdpc3RyeS9pbmplY3Rpb24tcmVnaXN0cnkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSwwQkFBMEI7QUFDMUIsTUFBTSxPQUFnQix3QkFBd0I7SUFNNUMsWUFBK0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFIdkQsYUFBUSxHQUFvQixFQUFFLENBQUM7UUFDL0IsZUFBVSxHQUFHLElBQUksR0FBRyxFQUErQixDQUFDO0lBRU0sQ0FBQztJQUVyRSxTQUFTLENBQUMsT0FBZ0IsSUFBSSxDQUFDLElBQUk7UUFDakMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQWdCO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxZQUFZLENBQUMsSUFBYSxFQUFFLFFBQXlCO1FBQ25ELE1BQU0sUUFBUSxHQUFJLFFBQWdCLENBQUMsZUFBZSxDQUFDO1FBQ25ELFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXpDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUUvQixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsT0FBTyxDQUFDLFFBQXlCO1FBQy9CLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVoRSxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFMUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQ1osTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ3BCLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzVCO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBYTtRQUN6QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDYixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDMUI7U0FDRjtJQUNILENBQUM7SUFFUyxlQUFlLENBQUMsSUFBYSxFQUFFLFFBQXlCLEVBQUUsUUFBUztRQUMzRSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRVMsY0FBYyxDQUFDLFFBQWE7UUFDcEMsTUFBTSxNQUFNLHFCQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFFLENBQUM7UUFDM0MsTUFBTSxPQUFPLHFCQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFFLENBQUM7UUFFN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFO1lBQ3pDLFFBQVEsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsQ0FBQztTQUNqQztRQUVELElBQUksTUFBTSxFQUFFO1lBQ1YsUUFBUSxDQUFDLE1BQU0sbUNBQVEsTUFBTSxHQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUUsQ0FBQztTQUNyRDtRQUVELElBQUksT0FBTyxFQUFFO1lBQ1gsUUFBUSxDQUFDLE9BQU8sbUNBQVEsT0FBTyxHQUFLLFFBQVEsQ0FBQyxPQUFPLENBQUUsQ0FBQztTQUN4RDtRQUVELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFUyxRQUFRLENBQUMsSUFBYSxFQUFFLFNBQTBCO1FBQzFELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM5QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDL0I7UUFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFJlZiwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJbmplY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi4vaW5qZWN0aW9uL2luamVjdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IFBhcnRpYWxCaW5kaW5ncyB9IGZyb20gJy4vcGFydGlhbC1iaW5kaW5ncy5pbnRlcmZhY2UnO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEluamVjdGlvblJlZ2lzdHJ5U2VydmljZTxUID0gYW55PiB7XG4gIHByb3RlY3RlZCBhYnN0cmFjdCB0eXBlOiBUeXBlPFQ+O1xuXG4gIHByb3RlY3RlZCBkZWZhdWx0czogUGFydGlhbEJpbmRpbmdzID0ge307XG4gIHByb3RlY3RlZCBjb21wb25lbnRzID0gbmV3IE1hcDxhbnksIEFycmF5PENvbXBvbmVudFJlZjxUPj4+KCk7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHJlYWRvbmx5IGluamVjdGlvblNlcnZpY2U6IEluamVjdGlvblNlcnZpY2UpIHt9XG5cbiAgZ2V0QnlUeXBlKHR5cGU6IFR5cGU8VD4gPSB0aGlzLnR5cGUpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnRzLmdldCh0eXBlKTtcbiAgfVxuXG4gIGNyZWF0ZShiaW5kaW5nczogb2JqZWN0KTogQ29tcG9uZW50UmVmPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVCeVR5cGUodGhpcy50eXBlLCBiaW5kaW5ncyk7XG4gIH1cblxuICBjcmVhdGVCeVR5cGUodHlwZTogVHlwZTxUPiwgYmluZGluZ3M6IFBhcnRpYWxCaW5kaW5ncyk6IENvbXBvbmVudFJlZjxUPiB7XG4gICAgY29uc3QgbG9jYXRpb24gPSAoYmluZGluZ3MgYXMgYW55KS5wYXJlbnRDb250YWluZXI7XG4gICAgYmluZGluZ3MgPSB0aGlzLmFzc2lnbkRlZmF1bHRzKGJpbmRpbmdzKTtcblxuICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuaW5qZWN0Q29tcG9uZW50KHR5cGUsIGJpbmRpbmdzLCBsb2NhdGlvbik7XG4gICAgdGhpcy5yZWdpc3Rlcih0eXBlLCBjb21wb25lbnQpO1xuXG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgfVxuXG4gIGRlc3Ryb3koaW5zdGFuY2U6IENvbXBvbmVudFJlZjxUPik6IHZvaWQge1xuICAgIGNvbnN0IGNvbXBzQnlUeXBlID0gdGhpcy5jb21wb25lbnRzLmdldChpbnN0YW5jZS5jb21wb25lbnRUeXBlKTtcblxuICAgIGlmIChjb21wc0J5VHlwZSAmJiBjb21wc0J5VHlwZS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGlkeCA9IGNvbXBzQnlUeXBlLmluZGV4T2YoaW5zdGFuY2UpO1xuXG4gICAgICBpZiAoaWR4ID4gLTEpIHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gY29tcHNCeVR5cGVbaWR4XTtcbiAgICAgICAgY29tcG9uZW50LmRlc3Ryb3koKTtcbiAgICAgICAgY29tcHNCeVR5cGUuc3BsaWNlKGlkeCwgMSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveUFsbCgpOiB2b2lkIHtcbiAgICB0aGlzLmRlc3Ryb3lCeVR5cGUodGhpcy50eXBlKTtcbiAgfVxuXG4gIGRlc3Ryb3lCeVR5cGUodHlwZTogVHlwZTxUPik6IHZvaWQge1xuICAgIGNvbnN0IGNvbXBzID0gdGhpcy5jb21wb25lbnRzLmdldCh0eXBlKTtcblxuICAgIGlmIChjb21wcyAmJiBjb21wcy5sZW5ndGgpIHtcbiAgICAgIGxldCBpID0gY29tcHMubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KGNvbXBzW2ktLV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBpbmplY3RDb21wb25lbnQodHlwZTogVHlwZTxUPiwgYmluZGluZ3M6IFBhcnRpYWxCaW5kaW5ncywgbG9jYXRpb24/KTogQ29tcG9uZW50UmVmPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5pbmplY3Rpb25TZXJ2aWNlLmFwcGVuZENvbXBvbmVudCh0eXBlLCBiaW5kaW5ncywgbG9jYXRpb24pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzc2lnbkRlZmF1bHRzKGJpbmRpbmdzOiBhbnkpOiBQYXJ0aWFsQmluZGluZ3Mge1xuICAgIGNvbnN0IGlucHV0cyA9IHsgLi4udGhpcy5kZWZhdWx0cy5pbnB1dHMgfTtcbiAgICBjb25zdCBvdXRwdXRzID0geyAuLi50aGlzLmRlZmF1bHRzLm91dHB1dHMgfTtcblxuICAgIGlmICghYmluZGluZ3MuaW5wdXRzICYmICFiaW5kaW5ncy5vdXRwdXRzKSB7XG4gICAgICBiaW5kaW5ncyA9IHsgaW5wdXRzOiBiaW5kaW5ncyB9O1xuICAgIH1cblxuICAgIGlmIChpbnB1dHMpIHtcbiAgICAgIGJpbmRpbmdzLmlucHV0cyA9IHsgLi4uaW5wdXRzLCAuLi5iaW5kaW5ncy5pbnB1dHMgfTtcbiAgICB9XG5cbiAgICBpZiAob3V0cHV0cykge1xuICAgICAgYmluZGluZ3Mub3V0cHV0cyA9IHsgLi4ub3V0cHV0cywgLi4uYmluZGluZ3Mub3V0cHV0cyB9O1xuICAgIH1cblxuICAgIHJldHVybiBiaW5kaW5ncztcbiAgfVxuXG4gIHByb3RlY3RlZCByZWdpc3Rlcih0eXBlOiBUeXBlPFQ+LCBjb21wb25lbnQ6IENvbXBvbmVudFJlZjxUPik6IHZvaWQge1xuICAgIGlmICghdGhpcy5jb21wb25lbnRzLmhhcyh0eXBlKSkge1xuICAgICAgdGhpcy5jb21wb25lbnRzLnNldCh0eXBlLCBbXSk7XG4gICAgfVxuXG4gICAgY29uc3QgdHlwZXMgPSB0aGlzLmNvbXBvbmVudHMuZ2V0KHR5cGUpO1xuICAgIHR5cGVzLnB1c2goY29tcG9uZW50KTtcbiAgfVxufVxuIl19