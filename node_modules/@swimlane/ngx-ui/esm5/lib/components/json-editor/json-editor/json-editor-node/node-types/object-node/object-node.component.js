import { __decorate, __extends, __metadata } from "tslib";
import { Component, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { ObjectNode } from '../../../../node-types/object-node.component';
var ObjectNodeComponent = /** @class */ (function (_super) {
    __extends(ObjectNodeComponent, _super);
    function ObjectNodeComponent(cdr) {
        var _this = _super.call(this, cdr) || this;
        _this.cdr = cdr;
        return _this;
    }
    ObjectNodeComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    ObjectNodeComponent = __decorate([
        Component({
            selector: 'ngx-json-object-node',
            template: "<div [hidden]=\"!expanded\">\n  <div *ngFor=\"let prop of propertyIndex | objectValues; trackBy: trackBy\">\n    <div class=\"property-def\">\n      <ngx-dropdown [showCaret]=\"true\">\n        <ngx-dropdown-toggle>\n          <div class=\"type-icon\">\n            <ngx-icon [fontIcon]=\"prop.$meta.icon\"></ngx-icon>\n          </div>\n        </ngx-dropdown-toggle>\n        <ngx-dropdown-menu class=\"ngx-dropdown-dark-outline\">\n          <ul class=\"vertical-list\">\n            <li>\n              <button\n                type=\"button\"\n                (click)=\"deleteProperty(prop.propertyName)\"\n                [disabled]=\"requiredCache[prop.propertyName]\"\n              >\n                Delete\n              </button>\n            </li>\n            <ng-container *ngIf=\"prop?.$meta?.type\">\n              <li *ngFor=\"let type of prop?.$meta?.type\">\n                <button\n                  type=\"button\"\n                  (click)=\"changePropertyType(prop, type)\"\n                  [disabled]=\"prop.$meta.currentType === type\"\n                >\n                  Change type to {{ dataTypeMap[type].name }}\n                </button>\n              </li>\n            </ng-container>\n          </ul>\n        </ngx-dropdown-menu>\n      </ngx-dropdown>\n\n      <div class=\"property-name\">\n        <input\n          type=\"text\"\n          *ngIf=\"prop.nameEditable\"\n          [ngModel]=\"prop.propertyName\"\n          (ngModelChange)=\"updatePropertyName(prop.id, $event)\"\n        />\n\n        <ng-container *ngIf=\"!prop?.nameEditable\">\n          <div class=\"title\" ngx-tooltip [tooltipTitle]=\"prop?.description ? prop?.description : prop?.propertyName\">\n            {{ prop?.title ? prop?.title : prop?.propertyName }}\n            <span *ngIf=\"requiredCache[prop.propertyName]\">*</span>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n\n    <ngx-json-editor-node\n      [model]=\"model[prop.propertyName]\"\n      (modelChange)=\"updateProp(prop.id, $event)\"\n      [schema]=\"prop\"\n      [required]=\"!!requiredCache[prop.propertyName]\"\n      [inline]=\"prop.type !== 'array' && prop.type !== 'object'\"\n      [path]=\"path + getPath(prop.propertyName)\"\n      [errors]=\"errors\"\n      [typeCheckOverrides]=\"typeCheckOverrides\"\n    >\n    </ngx-json-editor-node>\n  </div>\n\n  <ngx-dropdown [showCaret]=\"true\">\n    <ngx-dropdown-toggle>\n      <div class=\"add-button\">\n        <ngx-icon fontIcon=\"plus-bold\"></ngx-icon>\n      </div>\n    </ngx-dropdown-toggle>\n    <ngx-dropdown-menu class=\"ngx-dropdown-dark-outline\">\n      <ul class=\"vertical-list dropdown-column\" *ngIf=\"schema.properties\">\n        <li *ngFor=\"let prop of schema.properties | keyvalue\" (click)=\"addSchemaProperty(prop.key)\">\n          <button [disabled]=\"model[prop.key] !== undefined\" type=\"button\">\n            {{ prop.value.title ? prop.value.title : prop.key }}\n          </button>\n        </li>\n      </ul>\n      <ul\n        class=\"vertical-list dropdown-column\"\n        *ngIf=\"!schema || schema.patternProperties || schema.additionalProperties !== false\"\n      >\n        <li *ngFor=\"let prop of schema.patternProperties | keyvalue\" (click)=\"addSchemaPatternProperty(prop.key)\">\n          <button type=\"button\">{{ prop.value.title ? prop.value.title : prop.key }}</button>\n        </li>\n        <ng-template [ngIf]=\"!schema || schema.additionalProperties !== false\">\n          <li *ngFor=\"let dataType of dataTypes\" (click)=\"addProperty(dataType)\">\n            <button type=\"button\">{{ dataType.name }}</button>\n          </li>\n        </ng-template>\n      </ul>\n    </ngx-dropdown-menu>\n  </ngx-dropdown>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef])
    ], ObjectNodeComponent);
    return ObjectNodeComponent;
}(ObjectNode));
export { ObjectNodeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LW5vZGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3aW1sYW5lL25neC11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2pzb24tZWRpdG9yL2pzb24tZWRpdG9yL2pzb24tZWRpdG9yLW5vZGUvbm9kZS10eXBlcy9vYmplY3Qtbm9kZS9vYmplY3Qtbm9kZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBTzFFO0lBQXlDLHVDQUFVO0lBQ2pELDZCQUFzQixHQUFzQjtRQUE1QyxZQUNFLGtCQUFNLEdBQUcsQ0FBQyxTQUNYO1FBRnFCLFNBQUcsR0FBSCxHQUFHLENBQW1COztJQUU1QyxDQUFDOztnQkFGMEIsaUJBQWlCOztJQURqQyxtQkFBbUI7UUFML0IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLHNCQUFzQjtZQUNoQyx1ckhBQXlDO1lBQ3pDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1NBQ2hELENBQUM7eUNBRTJCLGlCQUFpQjtPQURqQyxtQkFBbUIsQ0FJL0I7SUFBRCwwQkFBQztDQUFBLEFBSkQsQ0FBeUMsVUFBVSxHQUlsRDtTQUpZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYmplY3ROb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vbm9kZS10eXBlcy9vYmplY3Qtbm9kZS5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtanNvbi1vYmplY3Qtbm9kZScsXG4gIHRlbXBsYXRlVXJsOiAnb2JqZWN0LW5vZGUuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBPYmplY3ROb2RlQ29tcG9uZW50IGV4dGVuZHMgT2JqZWN0Tm9kZSB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgc3VwZXIoY2RyKTtcbiAgfVxufVxuIl19