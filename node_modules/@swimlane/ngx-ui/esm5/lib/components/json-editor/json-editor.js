import { __decorate, __metadata } from "tslib";
import { Input, Output, EventEmitter } from '@angular/core';
var JsonEditor = /** @class */ (function () {
    function JsonEditor(schemaValidatorService) {
        this.schemaValidatorService = schemaValidatorService;
        this.modelChange = new EventEmitter();
        this.schemaChange = new EventEmitter();
    }
    JsonEditor.prototype.ngOnChanges = function (changes) {
        if (changes.schema) {
            this.schema = JSON.parse(JSON.stringify(this.schema));
        }
        if (!this.schema) {
            this.schema = {
                type: 'object'
            };
        }
        if (!this.schema.type) {
            this.schema.type = 'object';
        }
    };
    /**
     * Model change callback. Validates the model and emits a change event
     * @param model
     */
    JsonEditor.prototype.modelChangedCallback = function (model) {
        this.validate(this.schema, model);
        this.modelChange.emit(model);
    };
    /**
     * Validates the model based on the schema
     * @param schema
     * @param model
     */
    JsonEditor.prototype.validate = function (schema, model) {
        this.errors = this.schemaValidator
            ? this.schemaValidator(schema, model)
            : this.schemaValidatorService.validate(schema, model);
        return this.errors && this.errors.length > 0;
    };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], JsonEditor.prototype, "model", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], JsonEditor.prototype, "schema", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], JsonEditor.prototype, "label", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], JsonEditor.prototype, "typeCheckOverrides", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], JsonEditor.prototype, "schemaValidator", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], JsonEditor.prototype, "modelChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], JsonEditor.prototype, "schemaChange", void 0);
    return JsonEditor;
}());
export { JsonEditor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1lZGl0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvanNvbi1lZGl0b3IvanNvbi1lZGl0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFJdEY7SUFpQkUsb0JBQXNCLHNCQUE4QztRQUE5QywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBTjFELGdCQUFXLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFFcEQsaUJBQVksR0FBbUMsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUlMLENBQUM7SUFFeEUsZ0NBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNsQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUN2RDtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxNQUFNLEdBQUc7Z0JBQ1osSUFBSSxFQUFFLFFBQVE7YUFDZixDQUFDO1NBQ0g7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7WUFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO1NBQzdCO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILHlDQUFvQixHQUFwQixVQUFxQixLQUFVO1FBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILDZCQUFRLEdBQVIsVUFBUyxNQUFXLEVBQUUsS0FBVTtRQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlO1lBQ2hDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUM7WUFDckMsQ0FBQyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhELE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQXJEUTtRQUFSLEtBQUssRUFBRTs7NkNBQVk7SUFFWDtRQUFSLEtBQUssRUFBRTs7OENBQTBCO0lBRXpCO1FBQVIsS0FBSyxFQUFFOzs2Q0FBZTtJQUVkO1FBQVIsS0FBSyxFQUFFOzswREFBMEI7SUFFekI7UUFBUixLQUFLLEVBQUU7O3VEQUEwRDtJQUV4RDtRQUFULE1BQU0sRUFBRTtrQ0FBYyxZQUFZO21EQUEyQjtJQUVwRDtRQUFULE1BQU0sRUFBRTtrQ0FBZSxZQUFZO29EQUF3QztJQTBDOUUsaUJBQUM7Q0FBQSxBQXZERCxJQXVEQztTQXZEWSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNjaGVtYVZhbGlkYXRvclNlcnZpY2UgfSBmcm9tICcuL3NjaGVtYS12YWxpZGF0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBKU09ORWRpdG9yU2NoZW1hIH0gZnJvbSAnLi9qc29uLWVkaXRvci5oZWxwZXInO1xuXG5leHBvcnQgY2xhc3MgSnNvbkVkaXRvciBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIG1vZGVsOiBhbnk7XG5cbiAgQElucHV0KCkgc2NoZW1hOiBKU09ORWRpdG9yU2NoZW1hO1xuXG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgdHlwZUNoZWNrT3ZlcnJpZGVzPzogYW55O1xuXG4gIEBJbnB1dCgpIHNjaGVtYVZhbGlkYXRvcj86IChzY2hlbWE6IGFueSwgLi4uYXJnczogYW55W10pID0+IGFueVtdO1xuXG4gIEBPdXRwdXQoKSBtb2RlbENoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQE91dHB1dCgpIHNjaGVtYUNoYW5nZTogRXZlbnRFbWl0dGVyPEpTT05FZGl0b3JTY2hlbWE+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGVycm9yczogYW55W107XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHNjaGVtYVZhbGlkYXRvclNlcnZpY2U6IFNjaGVtYVZhbGlkYXRvclNlcnZpY2UpIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLnNjaGVtYSkge1xuICAgICAgdGhpcy5zY2hlbWEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuc2NoZW1hKSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnNjaGVtYSkge1xuICAgICAgdGhpcy5zY2hlbWEgPSB7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoIXRoaXMuc2NoZW1hLnR5cGUpIHtcbiAgICAgIHRoaXMuc2NoZW1hLnR5cGUgPSAnb2JqZWN0JztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTW9kZWwgY2hhbmdlIGNhbGxiYWNrLiBWYWxpZGF0ZXMgdGhlIG1vZGVsIGFuZCBlbWl0cyBhIGNoYW5nZSBldmVudFxuICAgKiBAcGFyYW0gbW9kZWxcbiAgICovXG4gIG1vZGVsQ2hhbmdlZENhbGxiYWNrKG1vZGVsOiBhbnkpIHtcbiAgICB0aGlzLnZhbGlkYXRlKHRoaXMuc2NoZW1hLCBtb2RlbCk7XG4gICAgdGhpcy5tb2RlbENoYW5nZS5lbWl0KG1vZGVsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgdGhlIG1vZGVsIGJhc2VkIG9uIHRoZSBzY2hlbWFcbiAgICogQHBhcmFtIHNjaGVtYVxuICAgKiBAcGFyYW0gbW9kZWxcbiAgICovXG4gIHZhbGlkYXRlKHNjaGVtYTogYW55LCBtb2RlbDogYW55KTogYm9vbGVhbiB7XG4gICAgdGhpcy5lcnJvcnMgPSB0aGlzLnNjaGVtYVZhbGlkYXRvclxuICAgICAgPyB0aGlzLnNjaGVtYVZhbGlkYXRvcihzY2hlbWEsIG1vZGVsKVxuICAgICAgOiB0aGlzLnNjaGVtYVZhbGlkYXRvclNlcnZpY2UudmFsaWRhdGUoc2NoZW1hLCBtb2RlbCk7XG5cbiAgICByZXR1cm4gdGhpcy5lcnJvcnMgJiYgdGhpcy5lcnJvcnMubGVuZ3RoID4gMDtcbiAgfVxufVxuIl19