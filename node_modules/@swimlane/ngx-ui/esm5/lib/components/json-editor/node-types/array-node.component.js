import { __assign, __decorate, __metadata, __read, __spread, __values } from "tslib";
import { Input, EventEmitter, Output } from '@angular/core';
import { createValueForSchema, jsonSchemaDataTypes, dataTypeMap, inferType, getIcon, getCurrentType, jsonSchemaDataFormats } from '../json-editor.helper';
var ArrayNode = /** @class */ (function () {
    function ArrayNode() {
        this.required = false;
        this.modelChange = new EventEmitter();
        this.schemaChange = new EventEmitter();
        this.requiredCache = {};
        this.schemas = [];
        this.dataTypes = __spread(jsonSchemaDataTypes, jsonSchemaDataFormats);
        this.dataTypeMap = dataTypeMap;
        this._array = Array;
    }
    ArrayNode.prototype.ngOnChanges = function (changes) {
        var e_1, _a;
        if (changes.schema) {
            if (this.schema && this.schema.required) {
                try {
                    for (var _b = __values(this.schema.required), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var prop = _c.value;
                        this.requiredCache[prop] = true;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }
        this.initSchemasTypeByModelValue();
        this.updateIcons();
    };
    /**
     * Updates an array item of the model and emits the change event
     * @param index
     * @param value
     */
    ArrayNode.prototype.updateArrayItem = function (index, value) {
        this.model[index] = value;
        this.modelChange.emit(this.model);
    };
    /**
     * Adds a new item to the model
     */
    ArrayNode.prototype.addArrayItem = function (dataType) {
        var schema;
        if (dataType) {
            schema = JSON.parse(JSON.stringify(__assign(__assign({}, this.schema.items), dataType.schema)));
        }
        else {
            schema = JSON.parse(JSON.stringify(this.schema.items));
        }
        if (!schema.type) {
            schema.type = 'object';
        }
        if (!schema.$meta) {
            schema.$meta = {};
        }
        if (Array.isArray(schema.type)) {
            schema.$meta.type = __spread(schema.type);
            schema.type = schema.type[0];
            schema.$meta.currentType = getCurrentType(schema);
        }
        var value = createValueForSchema(schema);
        if (value !== undefined) {
            this.model.push(value);
            this.schemas.push(schema);
        }
        this.modelChange.emit(this.model);
        this.updateIcons();
    };
    /**
     * Deletes an item from the array
     * @param index
     */
    ArrayNode.prototype.deleteArrayItem = function (index) {
        this.model.splice(index, 1);
        this.schemas.splice(index, 1);
        this.model = __spread(this.model);
        this.schemas = __spread(this.schemas);
        this.modelChange.emit(this.model);
    };
    /**
     * Track By function for the array ittierator
     * @param index
     * @param value
     */
    ArrayNode.prototype.arrayTrackBy = function (index) {
        return index;
    };
    /**
     *
     * @param property
     * @param type
     */
    ArrayNode.prototype.changeItemType = function (index, type) {
        var schema = this.schemas[index];
        var dataType = this.dataTypeMap[type];
        if (dataType) {
            delete schema.format;
            schema.type = dataType.schema.type;
            if (dataType.schema.format) {
                schema.format = dataType.schema.format;
            }
            schema.$meta.currentType = getCurrentType(schema);
        }
        var value = createValueForSchema(schema);
        this.model[index] = value;
        this.modelChange.emit(this.model);
        this.updateIcons();
    };
    /**
     * Infers the schema type for each item in the array
     */
    ArrayNode.prototype.initSchemasTypeByModelValue = function () {
        var _this = this;
        this.schemas = [];
        this.model.forEach(function (value) {
            var schema = inferType(value, _this.typeCheckOverrides);
            if (_this.schema.items) {
                schema = JSON.parse(JSON.stringify(__assign(__assign({}, _this.schema.items), schema)));
            }
            _this.schemas.push(schema);
        });
    };
    /**
     * Updates the icons in the schemas
     */
    ArrayNode.prototype.updateIcons = function () {
        var e_2, _a;
        try {
            for (var _b = __values(this.schemas), _c = _b.next(); !_c.done; _c = _b.next()) {
                var schema = _c.value;
                if (!schema.$meta) {
                    schema.$meta = {};
                }
                schema.$meta.icon = getIcon(schema);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ArrayNode.prototype, "schema", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], ArrayNode.prototype, "model", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ArrayNode.prototype, "required", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ArrayNode.prototype, "expanded", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ArrayNode.prototype, "path", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], ArrayNode.prototype, "errors", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ArrayNode.prototype, "typeCheckOverrides", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ArrayNode.prototype, "schemaRef", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ArrayNode.prototype, "modelChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ArrayNode.prototype, "schemaChange", void 0);
    return ArrayNode;
}());
export { ArrayNode };
//# sourceMappingURL=data:application/json;base64,