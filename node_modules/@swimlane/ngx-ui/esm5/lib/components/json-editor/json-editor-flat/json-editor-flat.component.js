import { __assign, __decorate, __extends, __metadata } from "tslib";
import { Component, ContentChildren, QueryList, Input, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, TemplateRef } from '@angular/core';
import { JsonEditorNodeFlatComponent } from './json-editor-node-flat/json-editor-node-flat.component';
import { SchemaValidatorService } from '../schema-validator.service';
import { JsonEditor } from '../json-editor';
import { jsonSchemaDataFormats } from '../json-editor.helper';
import { DialogService } from '../../dialog/dialog.service';
var JsonEditorFlatComponent = /** @class */ (function (_super) {
    __extends(JsonEditorFlatComponent, _super);
    function JsonEditorFlatComponent(dialogService, schemaValidatorService) {
        var _this = _super.call(this, schemaValidatorService) || this;
        _this.dialogService = dialogService;
        _this.schemaValidatorService = schemaValidatorService;
        _this.schemaBuilderMode = false;
        _this.formats = [];
        _this.compressed = false;
        _this.hideRoot = false;
        _this.customFormats = [];
        return _this;
    }
    JsonEditorFlatComponent.prototype.ngOnInit = function () {
        this.schemaRef = JSON.parse(JSON.stringify(this.schema));
        if (this.formats.length && this.schemaBuilderMode) {
            this.buildCustomFormats();
        }
    };
    JsonEditorFlatComponent.prototype.onPropertyConfig = function () {
        this.dialogService.create({
            template: this.propertyConfigTmpl,
            context: {
                property: this.schema,
                schema: this.schema,
                formats: this.customFormats
            },
            class: 'property-config-dialog'
        });
    };
    JsonEditorFlatComponent.prototype.updateSchema = function (options) {
        var editedSchema = options.newProperty;
        if (editedSchema.title) {
            this.schema.title = editedSchema.title;
            this.schemaRef.title = editedSchema.title;
        }
        else {
            delete this.schema.title;
            delete this.schemaRef.title;
        }
        if (editedSchema.description) {
            this.schema.description = editedSchema.description;
            this.schemaRef.description = editedSchema.description;
        }
        else {
            delete this.schema.description;
            delete this.schemaRef.description;
        }
        this.schema = __assign({}, this.schema);
        this.schemaRef = __assign({}, this.schemaRef);
        this.schemaChange.emit(this.schemaRef);
    };
    JsonEditorFlatComponent.prototype.buildCustomFormats = function () {
        var _this = this;
        this.formats.forEach(function (format) {
            var found = jsonSchemaDataFormats.find(function (dataFormat) {
                return dataFormat.schema.format === format;
            });
            if (found) {
                _this.customFormats.push(found);
            }
            else {
                _this.customFormats.push({
                    name: format.charAt(0).toUpperCase() + format.slice(1),
                    defaultValue: function () { return ''; },
                    schema: {
                        type: 'string',
                        format: format
                    },
                    icon: 'field-text',
                    matchType: function () {
                        return false;
                    }
                });
            }
        });
    };
    JsonEditorFlatComponent.ctorParameters = function () { return [
        { type: DialogService },
        { type: SchemaValidatorService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], JsonEditorFlatComponent.prototype, "model", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], JsonEditorFlatComponent.prototype, "schema", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], JsonEditorFlatComponent.prototype, "typeCheckOverrides", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], JsonEditorFlatComponent.prototype, "schemaBuilderMode", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], JsonEditorFlatComponent.prototype, "formats", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], JsonEditorFlatComponent.prototype, "compressed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], JsonEditorFlatComponent.prototype, "hideRoot", void 0);
    __decorate([
        ContentChildren(JsonEditorNodeFlatComponent),
        __metadata("design:type", QueryList)
    ], JsonEditorFlatComponent.prototype, "nodeElms", void 0);
    __decorate([
        ViewChild('propertyConfigTmpl'),
        __metadata("design:type", TemplateRef)
    ], JsonEditorFlatComponent.prototype, "propertyConfigTmpl", void 0);
    JsonEditorFlatComponent = __decorate([
        Component({
            selector: 'ngx-json-editor-flat',
            template: "<div class=\"ngx-json-editor-flat\">\n  <ngx-json-editor-node-flat\n    [(model)]=\"model\"\n    [schema]=\"schema\"\n    [hideRoot]=\"hideRoot\"\n    [schemaRef]=\"schemaRef\"\n    (modelChange)=\"modelChangedCallback($event)\"\n    [errors]=\"errors\"\n    [typeCheckOverrides]=\"typeCheckOverrides\"\n    [label]=\"label\"\n    [compressed]=\"compressed\"\n    [formats]=\"customFormats\"\n    [schemaBuilderMode]=\"schemaBuilderMode\"\n    (schemaChange)=\"schemaChange.emit($event)\"\n  >\n    <div class=\"node-options\" node-options>\n      <button *ngIf=\"schemaBuilderMode\" type=\"button\" class=\"node-options-btn\" (click)=\"onPropertyConfig()\">\n        <i class=\"ngx-icon ngx-cog\"></i>\n      </button>\n    </div>\n  </ngx-json-editor-node-flat>\n</div>\n\n<!-- Property Config Dialog -->\n<ng-template #propertyConfigTmpl let-context=\"context\">\n  <ngx-property-config\n    [property]=\"context.property\"\n    [schema]=\"context.schema\"\n    [formats]=\"context.formats\"\n    [rootItem]=\"true\"\n    (updateSchema)=\"updateSchema($event)\"\n  >\n  </ngx-property-config>\n</ng-template>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            encapsulation: ViewEncapsulation.None,
            styles: [".ngx-json-editor-flat{position:relative}.ngx-json-editor-flat .node-options .node-options-btn{color:#72819f;padding:1px 3px 2px}.ngx-json-editor-flat .node-options .ngx-dropdown{margin-left:10px}.property-config-dialog .ngx-dialog-content{padding:0!important;min-width:500px!important}"]
        }),
        __metadata("design:paramtypes", [DialogService, SchemaValidatorService])
    ], JsonEditorFlatComponent);
    return JsonEditorFlatComponent;
}(JsonEditor));
export { JsonEditorFlatComponent };
//# sourceMappingURL=data:application/json;base64,