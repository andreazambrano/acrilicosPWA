import { __decorate, __metadata } from "tslib";
import { Component, Input, EventEmitter, Output, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';
import { DialogService } from '../../../../../dialog/dialog.service';
import { propTypes } from '../../../../json-editor.helper';
var PropertyConfigComponent = /** @class */ (function () {
    function PropertyConfigComponent(dialogService) {
        this.dialogService = dialogService;
        this.formats = [];
        this.arrayItem = false;
        this.rootItem = false;
        this.updateSchema = new EventEmitter();
        this.propTypes = propTypes;
        this.required = false;
        this.newEnumValue = '';
    }
    PropertyConfigComponent.prototype.ngOnInit = function () {
        this.editableProperty = JSON.parse(JSON.stringify(this.property));
        if (!this.arrayItem) {
            this.setRequired();
        }
    };
    PropertyConfigComponent.prototype.applyChanges = function () {
        this.dialogService.destroyAll();
        this.updateSchema.emit({
            required: this.required,
            index: this.index,
            newProperty: this.editableProperty,
            oldProperty: this.property
        });
    };
    PropertyConfigComponent.prototype.updateType = function (type) {
        if (this.editableProperty['type'] !== type) {
            this.editableProperty['type'] = type;
            delete this.editableProperty['format'];
            this.cleanUpPropertyConstrains();
        }
    };
    PropertyConfigComponent.prototype.updateExamples = function (examples) {
        if (examples && examples.length) {
            this.editableProperty['examples'] = examples;
        }
        else {
            delete this.editableProperty.examples;
        }
    };
    PropertyConfigComponent.prototype.updateFormat = function (format) {
        if (this.editableProperty['format'] !== format) {
            this.editableProperty['type'] = 'string';
            this.editableProperty['format'] = format;
            this.cleanUpPropertyConstrains();
        }
    };
    PropertyConfigComponent.prototype.addEnumValue = function () {
        var enumValues = (this.editableProperty['enum'] = this.editableProperty['enum'] || []);
        if (!enumValues.includes(this.newEnumValue)) {
            enumValues.push(this.newEnumValue);
            this.newEnumValue = '';
            delete this.editableProperty['format'];
        }
    };
    PropertyConfigComponent.prototype.updateDefault = function (enumValue) {
        if (!enumValue) {
            delete this.editableProperty['default'];
        }
        else {
            this.editableProperty['default'] = enumValue;
        }
    };
    PropertyConfigComponent.prototype.removeEnumValue = function (val) {
        var enumValues = this.editableProperty['enum'];
        var index = enumValues.indexOf(val);
        if (index > -1) {
            enumValues.splice(index, 1);
        }
        if (!enumValues.length) {
            // Remove enum property if empty
            delete this.editableProperty['enum'];
        }
    };
    PropertyConfigComponent.prototype.cleanUpPropertyConstrains = function () {
        delete this.editableProperty['enum'];
        delete this.editableProperty['properties'];
        delete this.editableProperty['required'];
        delete this.editableProperty['items'];
        delete this.editableProperty['minimum'];
        delete this.editableProperty['maximum'];
        delete this.editableProperty['default'];
        delete this.editableProperty['minLength'];
        delete this.editableProperty['maxLength'];
        delete this.editableProperty['minItems'];
        delete this.editableProperty['maxItems'];
    };
    PropertyConfigComponent.prototype.setRequired = function () {
        this.required = this.schema.required.includes(this.property.propertyName);
    };
    PropertyConfigComponent.ctorParameters = function () { return [
        { type: DialogService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], PropertyConfigComponent.prototype, "property", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], PropertyConfigComponent.prototype, "index", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], PropertyConfigComponent.prototype, "schema", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], PropertyConfigComponent.prototype, "formats", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], PropertyConfigComponent.prototype, "arrayItem", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], PropertyConfigComponent.prototype, "rootItem", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], PropertyConfigComponent.prototype, "updateSchema", void 0);
    PropertyConfigComponent = __decorate([
        Component({
            selector: 'ngx-property-config',
            template: "<div class=\"property-config\">\n  <div class=\"header\">\n    <span>Property Configuration</span>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"applyChanges()\">\n      <i class=\"ngx-icon ngx-check has-text\"></i> Apply\n    </button>\n  </div>\n  <ngx-tabs *ngIf=\"property\">\n    <ngx-tab label=\"GENERAL\">\n      <!-- PROPERTY NAME -->\n      <ngx-input\n        *ngIf=\"!arrayItem && !rootItem\"\n        type=\"text\"\n        name=\"propertyName\"\n        [(ngModel)]=\"editableProperty.propertyName\"\n        [label]=\"'PROPERTY NAME'\"\n        [required]=\"true\"\n        [hint]=\"'Must only contain A-Z, a-z, 0-9 or _'\"\n      >\n      </ngx-input>\n\n      <!-- TITLE -->\n      <ngx-input\n        *ngIf=\"!arrayItem\"\n        type=\"text\"\n        [(ngModel)]=\"editableProperty.title\"\n        [label]=\"'PROPERTY TITLE'\"\n        [hint]=\"'A human-readable name for this property'\"\n      >\n      </ngx-input>\n\n      <!-- DESCRIPTION -->\n      <ngx-input\n        *ngIf=\"!arrayItem\"\n        type=\"text\"\n        [(ngModel)]=\"editableProperty.description\"\n        [label]=\"'PROPERTY DESCRIPTION'\"\n        [hint]=\"'A description for the property'\"\n      >\n      </ngx-input>\n\n      <ng-container *ngIf=\"!rootItem\">\n        <!-- TYPE -->\n        <ngx-select\n          class=\"prop-types-formats\"\n          [filterable]=\"false\"\n          [ngModel]=\"[editableProperty.type]\"\n          (ngModelChange)=\"updateType($event[0])\"\n          [required]=\"true\"\n          [label]=\"'TYPE'\"\n        >\n          <ngx-select-option *ngFor=\"let propType of propTypes\" [name]=\"propType\" [value]=\"propType\">\n          </ngx-select-option>\n        </ngx-select>\n\n        <!-- FORMAT -->\n        <ngx-select\n          class=\"prop-types-formats\"\n          *ngIf=\"editableProperty.type === 'string' && formats?.length && !editableProperty.enum?.length\"\n          [filterable]=\"false\"\n          [ngModel]=\"[editableProperty.format]\"\n          (ngModelChange)=\"updateFormat($event[0])\"\n          [label]=\"'FORMAT'\"\n        >\n          <ngx-select-option\n            *ngFor=\"let propFormat of formats\"\n            [name]=\"propFormat.name\"\n            [value]=\"propFormat.schema.format\"\n          >\n          </ngx-select-option>\n        </ngx-select>\n\n        <!-- ENUM -->\n        <ngx-input\n          *ngIf=\"editableProperty.type === 'string' && !editableProperty.format\"\n          type=\" text\"\n          class=\"new-enum-input\"\n          [(ngModel)]=\"newEnumValue\"\n          [label]=\"'ADD ENUM VALUE'\"\n        >\n          <ngx-input-suffix>\n            <button (click)=\"addEnumValue()\" [disabled]=\"!newEnumValue.length\">\n              <i class=\"ngx-icon ngx-ngx-icon ngx-check\"></i>\n            </button>\n          </ngx-input-suffix>\n        </ngx-input>\n\n        <ng-container *ngIf=\"editableProperty.enum?.length\">\n          <div *ngIf=\"editableProperty.enum?.length\" class=\"enum-edit\">\n            <div class=\"tag\" *ngFor=\"let value of editableProperty.enum\">\n              <span>{{ value }}</span>\n              <button type=\"button\" (click)=\"removeEnumValue(value)\">\n                <i class=\"ngx-icon ngx-x\"></i>\n              </button>\n            </div>\n          </div>\n\n          <ngx-select\n            [filterable]=\"false\"\n            [ngModel]=\"[editableProperty.default]\"\n            (ngModelChange)=\"updateDefault($event[0])\"\n            [label]=\"'DEFAULT'\"\n          >\n            <ngx-select-option *ngFor=\"let value of editableProperty.enum\" [name]=\"value\" [value]=\"value\">\n            </ngx-select-option>\n          </ngx-select>\n        </ng-container>\n\n        <!-- CONSTRAINS -->\n        <div class=\"constrain-row\" *ngIf=\"editableProperty.type === 'number' || editableProperty.type === 'integer'\">\n          <ngx-input type=\"number\" [(ngModel)]=\"editableProperty.minimum\" [label]=\"'MINIMUM'\"></ngx-input>\n\n          <ngx-input type=\"number\" [(ngModel)]=\"editableProperty.maximum\" [label]=\"'MAXIMUM'\"></ngx-input>\n        </div>\n\n        <div class=\"constrain-row\" *ngIf=\"editableProperty.type === 'string'\">\n          <ngx-input type=\"number\" [(ngModel)]=\"editableProperty.minLength\" [label]=\"'MINIMUM LENGTH'\"></ngx-input>\n\n          <ngx-input type=\"number\" [(ngModel)]=\"editableProperty.maxLength\" [label]=\"'MAXIMUM LENGTH'\"></ngx-input>\n        </div>\n\n        <div class=\"constrain-row\" *ngIf=\"editableProperty.type === 'array'\">\n          <ngx-input type=\"number\" [(ngModel)]=\"editableProperty.minItems\" [label]=\"'MIN ITEMS'\"></ngx-input>\n          <ngx-input type=\"number\" [(ngModel)]=\"editableProperty.maxItems\" [label]=\"'MAX ITEMS'\"></ngx-input>\n        </div>\n\n        <!-- PATTERN -->\n        <ngx-input\n          type=\"text\"\n          *ngIf=\"['string', 'number', 'integer'].includes($any(editableProperty.type))\"\n          [(ngModel)]=\"editableProperty.pattern\"\n          [label]=\"'PATTERN TO MATCH'\"\n        >\n        </ngx-input>\n\n        <!-- REQUIRED -->\n        <ngx-checkbox *ngIf=\"!arrayItem\" [(ngModel)]=\"required\">\n          Required\n        </ngx-checkbox>\n      </ng-container>\n    </ngx-tab>\n    <ngx-tab label=\"EXAMPLE VALUES\">\n      <div class=\"examples-container\">\n        <ngx-orderable-inputs-list\n          [data]=\"editableProperty.examples\"\n          (onUpdate)=\"updateExamples($event)\"\n        ></ngx-orderable-inputs-list>\n      </div>\n    </ngx-tab>\n  </ngx-tabs>\n</div>\n",
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".property-config .header{background:-webkit-gradient(linear,left top,left bottom,from(#3b4457),to(#262c38));background:linear-gradient(180deg,#3b4457 0,#262c38 100%);height:75px;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-pack:justify;justify-content:space-between;padding:0 35px}.property-config .header span{font-size:19px;color:#fff}.property-config .header button{font-size:14px;line-height:18px}.property-config .ngx-tab-content{max-height:65vh;overflow:auto}.property-config .new-enum-input button{color:#696969}.property-config .new-enum-input .ngx-input-hint{display:none}.property-config .enum-edit button{font-size:9px;padding-right:0}.property-config .constrain-row{display:-webkit-box;display:flex}.property-config .constrain-row ngx-input{flex-basis:50%}.property-config .constrain-row ngx-input:first-child{margin-right:30px}.property-config ngx-checkbox label{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;margin:1.2rem 1.2rem 1.2rem 0!important}.property-config .prop-types-formats .ngx-select-dropdown-option,.property-config .prop-types-formats .ngx-select-input-name{text-transform:capitalize}.property-config .examples-container{border:1px solid #505c75;padding:14px}"]
        }),
        __metadata("design:paramtypes", [DialogService])
    ], PropertyConfigComponent);
    return PropertyConfigComponent;
}());
export { PropertyConfigComponent };
//# sourceMappingURL=data:application/json;base64,