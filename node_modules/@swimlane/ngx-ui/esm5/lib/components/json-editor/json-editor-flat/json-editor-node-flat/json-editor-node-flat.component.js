import { __decorate, __extends, __metadata } from "tslib";
import { Component, Input, ViewEncapsulation, EventEmitter, Output, ChangeDetectionStrategy } from '@angular/core';
import { JsonEditorNode } from '../../json-editor-node';
import { DialogService } from '../../../dialog/dialog.service';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { requiredIndicatorIcon } from '../../json-editor.helper';
var JsonEditorNodeFlatComponent = /** @class */ (function (_super) {
    __extends(JsonEditorNodeFlatComponent, _super);
    function JsonEditorNodeFlatComponent(dialogMngr, domSanitizer) {
        var _this = _super.call(this, dialogMngr) || this;
        _this.dialogMngr = dialogMngr;
        _this.domSanitizer = domSanitizer;
        _this.arrayItem = false;
        _this.hideRoot = false;
        _this.arrayName = '';
        _this.updatePropertyNameEvent = new EventEmitter();
        _this.requiredIndicator = _this.domSanitizer.bypassSecurityTrustHtml(requiredIndicatorIcon);
        return _this;
    }
    JsonEditorNodeFlatComponent.prototype.ngOnInit = function () {
        if (this.level === undefined) {
            this.level = this.hideRoot ? -1 : 0;
        }
        else {
            this.level += 1;
        }
    };
    JsonEditorNodeFlatComponent.prototype.updatePropertyName = function (id, name) {
        this.updatePropertyNameEvent.emit({ id: id, name: name });
    };
    JsonEditorNodeFlatComponent.ctorParameters = function () { return [
        { type: DialogService },
        { type: DomSanitizer }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], JsonEditorNodeFlatComponent.prototype, "model", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], JsonEditorNodeFlatComponent.prototype, "schema", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], JsonEditorNodeFlatComponent.prototype, "typeCheckOverrides", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], JsonEditorNodeFlatComponent.prototype, "errors", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], JsonEditorNodeFlatComponent.prototype, "label", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], JsonEditorNodeFlatComponent.prototype, "level", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], JsonEditorNodeFlatComponent.prototype, "schemaBuilderMode", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], JsonEditorNodeFlatComponent.prototype, "schemaRef", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], JsonEditorNodeFlatComponent.prototype, "formats", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], JsonEditorNodeFlatComponent.prototype, "arrayItem", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], JsonEditorNodeFlatComponent.prototype, "hideRoot", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], JsonEditorNodeFlatComponent.prototype, "arrayName", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], JsonEditorNodeFlatComponent.prototype, "compressed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], JsonEditorNodeFlatComponent.prototype, "indentationArray", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], JsonEditorNodeFlatComponent.prototype, "updatePropertyNameEvent", void 0);
    JsonEditorNodeFlatComponent = __decorate([
        Component({
            selector: 'ngx-json-editor-node-flat',
            template: "<div *ngIf=\"model !== undefined\" class=\"json-tree-node-flat\">\n  <div class=\"node-container\" *ngIf=\"!(level === -1 && hideRoot)\">\n    <div class=\"indentation\" *ngIf=\"level > 0\" [style.left]=\"-1 * (level * 20) + 'px'\">\n      <span class=\"separator\" *ngFor=\"let separator of indentationArray\"></span>\n    </div>\n    <div class=\"node\" [class.compressed]=\"compressed\">\n      <div class=\"error-box\" *ngIf=\"!valid && !schemaBuilderMode\"></div>\n\n      <div class=\"left-options\">\n        <ng-container *ngIf=\"level > 0 && !arrayItem\">\n          <div class=\"required-indicator\">\n            <span\n              *ngIf=\"required\"\n              [class.invalid]=\"!childrenValid && !schemaBuilderMode\"\n              [innerHtml]=\"requiredIndicator\"\n            ></span>\n            <span *ngIf=\"!required && schemaBuilderMode\" class=\"not-required\" [innerHtml]=\"requiredIndicator\"></span>\n          </div>\n          <ng-content select=\"[cdkDragHandle]\"></ng-content>\n        </ng-container>\n      </div>\n\n      <div class=\"node-content\" [class.extra-margin]=\"schema.nameEditable && !schemaBuilderMode\">\n        <div class=\"node-info\">\n          <!-- Property name/title -->\n          <div\n            class=\"info-name\"\n            *ngIf=\"(!schema.nameEditable || schemaBuilderMode) && (schema?.propertyName || label || arrayItem)\"\n          >\n            <span class=\"name\">\n              {{ schema?.title || label || (arrayItem ? 'Items' : schema?.propertyName) }}\n            </span>\n            <ngx-icon\n              *ngIf=\"schema?.description || schema?.examples\"\n              class=\"info-btn\"\n              fontIcon=\"info-filled\"\n              ngx-tooltip\n              [tooltipContext]=\"schema\"\n              [tooltipType]=\"'popover'\"\n              [tooltipPlacement]=\"'top'\"\n              [tooltipTemplate]=\"popoverTemplate\"\n            ></ngx-icon>\n\n            <ng-template #popoverTemplate let-model=\"model\">\n              <div class=\"popover-template\">\n                <div *ngIf=\"model?.description\">\n                  <div class=\"label\">DESCRIPTION</div>\n                  <div>{{ model?.description }}</div>\n                </div>\n                <div class=\"separator\" *ngIf=\"model?.description && model?.examples\"></div>\n                <div *ngIf=\"model?.examples\">\n                  <div class=\"label\">EXAMPLES</div>\n                  <div *ngFor=\"let example of model?.examples\">{{ example }}</div>\n                </div>\n              </div>\n            </ng-template>\n          </div>\n\n          <!-- Inline text editing-->\n          <ngx-input\n            class=\"editable-name\"\n            type=\"text\"\n            *ngIf=\"schema.nameEditable && !schemaBuilderMode\"\n            [ngModel]=\"schema?.propertyName\"\n            (ngModelChange)=\"updatePropertyName(schema.id, $event)\"\n          ></ngx-input>\n\n          <div class=\"info-type\">\n            <span class=\"type\"\n              >{{ schema?.format || schema?.type | titlecase }}{{ schema?.enum?.length ? ' + Enum' : '' }}</span\n            >\n            <ngx-icon\n              *ngIf=\"schema?.propertyName || arrayName\"\n              class=\"dot-separator\"\n              fontIcon=\"circle-filled\"\n            ></ngx-icon>\n            <span class=\"property-name\">{{ arrayName ? arrayName : schema?.propertyName }}</span>\n          </div>\n\n          <!-- Description -->\n          <span *ngIf=\"!compressed\" class=\"description\">{{ schema?.description }}</span>\n        </div>\n\n        <div *ngIf=\"!schemaBuilderMode\" class=\"node-input\">\n          <!-- Number | Integer -->\n          <div *ngIf=\"schema?.type === 'number' || schema?.type === 'integer'\">\n            <ngx-input\n              type=\"number\"\n              [ngModel]=\"model\"\n              (ngModelChange)=\"updateModel($event)\"\n              [requiredIndicator]=\"false\"\n              [required]=\"required\"\n            ></ngx-input>\n          </div>\n\n          <!-- Boolean -->\n          <div *ngIf=\"schema?.type === 'boolean'\">\n            <ngx-toggle\n              class=\"toggle-input\"\n              [ngModel]=\"model\"\n              (ngModelChange)=\"updateModel($event)\"\n              [label]=\"model | json\"\n            >\n            </ngx-toggle>\n          </div>\n\n          <!-- String -->\n          <ng-container *ngIf=\"schema?.type === 'string'\">\n            <!-- No format -->\n            <div *ngIf=\"!schema.format\">\n              <ngx-input\n                *ngIf=\"!schema?.enum\"\n                type=\"text\"\n                [ngModel]=\"model\"\n                (change)=\"updateModel($event)\"\n                [requiredIndicator]=\"false\"\n                [required]=\"required\"\n              >\n              </ngx-input>\n\n              <ngx-select\n                [filterable]=\"false\"\n                *ngIf=\"schema?.enum\"\n                [ngModel]=\"[model]\"\n                (ngModelChange)=\"updateModel($event[0])\"\n                [required]=\"required\"\n              >\n                <ngx-select-option *ngFor=\"let option of schema.enum\" [name]=\"option\" [value]=\"option\">\n                </ngx-select-option>\n              </ngx-select>\n            </div>\n\n            <!-- Password -->\n            <div *ngIf=\"schema.format === 'password'\">\n              <ngx-input\n                type=\"password\"\n                [ngModel]=\"model\"\n                (ngModelChange)=\"updateModel($event)\"\n                [requiredIndicator]=\"false\"\n                [required]=\"required\"\n              ></ngx-input>\n            </div>\n\n            <!-- Date -->\n            <div *ngIf=\"schema.format === 'date'\">\n              <ngx-input\n                type=\"date\"\n                [ngModel]=\"model\"\n                (ngModelChange)=\"updateModel($event)\"\n                [requiredIndicator]=\"false\"\n                [required]=\"required\"\n              ></ngx-input>\n            </div>\n\n            <!-- DateTime -->\n            <div *ngIf=\"schema.format === 'date-time'\">\n              <ngx-input\n                type=\"datetime-local\"\n                [ngModel]=\"model\"\n                (ngModelChange)=\"updateModel($event)\"\n                [requiredIndicator]=\"false\"\n                [required]=\"required\"\n              ></ngx-input>\n            </div>\n\n            <!-- Code -->\n            <div *ngIf=\"schema.format === 'code'\" class=\"code\">\n              <ngx-input\n                type=\"text\"\n                [ngModel]=\"model\"\n                [requiredIndicator]=\"false\"\n                [required]=\"required\"\n                [disabled]=\"true\"\n              >\n                <ngx-input-suffix>\n                  <button (click)=\"openCodeEditor()\">\n                    <ngx-icon fontIcon=\"edit\" class=\"edit-code-icon\" ngx-tooltip tooltipTitle=\"Edit Code\"> </ngx-icon>\n                  </button>\n                </ngx-input-suffix>\n              </ngx-input>\n            </div>\n\n            <ng-template #codeEditorTpl>\n              <div class=\"code-editor\">\n                <ngx-select\n                  label=\"Language Mode\"\n                  [ngModel]=\"[editorConfig.mode.name]\"\n                  (ngModelChange)=\"selectEditorMode($event[0])\"\n                >\n                  <ngx-select-option *ngFor=\"let mode of editorModes\" [name]=\"mode.label\" [value]=\"mode.name\">\n                  </ngx-select-option>\n                </ngx-select>\n\n                <ngx-button\n                  class=\"btn btn-primary save-code-button\"\n                  (click)=\"updateModel(editorModel); closeCodeEditor()\"\n                >\n                  Save</ngx-button\n                >\n\n                <ngx-codemirror\n                  *ngIf=\"editorVisible\"\n                  [ngModel]=\"editorModel\"\n                  (ngModelChange)=\"editorModel = $event\"\n                  [config]=\"editorConfig\"\n                  class=\"code-editor\"\n                >\n                </ngx-codemirror>\n              </div>\n            </ng-template>\n          </ng-container>\n\n          <div class=\"input-error\" *ngFor=\"let error of ownErrors\">{{ error.message }}</div>\n        </div>\n\n        <div *ngIf=\"schemaBuilderMode\" class=\"node-constrains\">\n          <div class=\"tag\" *ngIf=\"schema.minItems\">Min Items: {{ schema.minItems }}</div>\n          <div class=\"tag\" *ngIf=\"schema.maxItems\">Max Items: {{ schema.maxItems }}</div>\n          <div class=\"tag\" *ngIf=\"schema.minimum\">Minimum: {{ schema.minimum }}</div>\n          <div class=\"tag\" *ngIf=\"schema.maximum\">Maximum: {{ schema.maximum }}</div>\n          <div class=\"tag\" *ngIf=\"schema.minLength\">Min Length: {{ schema.minLength }}</div>\n          <div class=\"tag\" *ngIf=\"schema.maxLength\">Max Length: {{ schema.maxLength }}</div>\n          <div class=\"tag\" *ngIf=\"schema.pattern\">Pattern: Yes</div>\n        </div>\n        <ng-content select=\"[node-options]\"></ng-content>\n      </div>\n    </div>\n  </div>\n\n  <!-- Object -->\n  <div *ngIf=\"schema?.type === 'object'\">\n    <ngx-json-object-node-flat\n      [schema]=\"schema\"\n      [schemaRef]=\"schemaRef\"\n      [model]=\"model\"\n      [expanded]=\"expanded\"\n      [hideRoot]=\"hideRoot\"\n      (modelChange)=\"updateModel($event)\"\n      [path]=\"path\"\n      [errors]=\"childrenErrors\"\n      [typeCheckOverrides]=\"typeCheckOverrides\"\n      [level]=\"level\"\n      [compressed]=\"compressed\"\n      [schemaBuilderMode]=\"schemaBuilderMode\"\n      [formats]=\"formats\"\n      (schemaChange)=\"schemaChange.emit(schemaRef)\"\n    >\n    </ngx-json-object-node-flat>\n  </div>\n\n  <!-- Array -->\n  <div *ngIf=\"schema?.type === 'array'\">\n    <ngx-json-array-node-flat\n      [schema]=\"schema\"\n      [schemaRef]=\"schemaRef\"\n      [model]=\"model\"\n      [expanded]=\"expanded\"\n      [formats]=\"formats\"\n      [hideRoot]=\"hideRoot\"\n      (modelChange)=\"updateModel($event)\"\n      [path]=\"path\"\n      [compressed]=\"compressed\"\n      [errors]=\"childrenErrors\"\n      [typeCheckOverrides]=\"typeCheckOverrides\"\n      [level]=\"level\"\n      [schemaBuilderMode]=\"schemaBuilderMode\"\n      (schemaChange)=\"schemaChange.emit(schemaRef)\"\n    >\n    </ngx-json-array-node-flat>\n  </div>\n</div>\n",
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".json-tree-node-flat .indentation{border-radius:2px 0 0 2px;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;background-color:rgba(49,56,71,.4);min-width:20px}.separator{background-color:#3b4457;opacity:.5;border-radius:2px;width:1px;height:calc(100% - 4px);margin-right:20px}.separator:first-child{margin-left:20px}.popover-template{font-weight:600;font-size:12px;line-height:13px}.popover-template .label{color:#72819f;font-size:10px;font-weight:700}.popover-template .separator{height:8px;background:0 0}.json-tree-node-flat .node-container{display:-webkit-box;display:flex}.json-tree-node-flat .node{background-color:#313847;box-shadow:0 2px 7px rgba(0,0,0,.2);border-radius:2px;display:-webkit-box;display:flex;padding:25px 10px;position:relative;-webkit-box-flex:1;flex:1}.json-tree-node-flat .node.compressed{max-height:80px}.json-tree-node-flat .node .error-box{position:absolute;width:100%;height:100%;border-radius:2px;top:0;left:0;border:2px solid #ff4514}.json-tree-node-flat .node .left-options{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;margin-right:10px;color:#72819f;width:15px}.json-tree-node-flat .node .left-options .required-indicator{position:absolute;top:12px;left:12px}.json-tree-node-flat .node .left-options .required-indicator span{display:-webkit-box;display:flex}.json-tree-node-flat .node .left-options .required-indicator span svg path{fill:#72819f;stroke:#72819f}.json-tree-node-flat .node .left-options .required-indicator span.not-required svg path{fill:transparent}.json-tree-node-flat .node .left-options .required-indicator span.invalid svg path{fill:#ff4514;stroke:#ff4514}.json-tree-node-flat .node .left-options .drag-drop-handle{cursor:-webkit-grab;cursor:grab}.json-tree-node-flat .node .node-content{display:-webkit-box;display:flex;-webkit-box-pack:justify;justify-content:space-between;-webkit-box-flex:1;flex:1;-webkit-box-align:center;align-items:center}.json-tree-node-flat .node .node-content.extra-margin{margin-top:-15px}.json-tree-node-flat .node .node-content .node-info{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;flex-basis:30%;padding-right:25px}.json-tree-node-flat .node .node-content .node-info .info-name .info-btn{color:#818fa9;font-size:12px;margin-left:5px;position:relative;z-index:1}.json-tree-node-flat .node .node-content .node-info .editable-name input,.json-tree-node-flat .node .node-content .node-info .name{font-weight:600;font-size:18px;line-height:23px;color:#f0f1f6}.json-tree-node-flat .node .node-content .node-info .description,.json-tree-node-flat .node .node-content .node-info .dot-separator,.json-tree-node-flat .node .node-content .node-info .property-name{color:#a0aabe}.json-tree-node-flat .node .node-content .node-info .dot-separator{font-size:.2em;margin:0 5px;vertical-align:middle}.json-tree-node-flat .node .node-content .node-info .type{color:#f0f1f6}.json-tree-node-flat .node .node-content .node-info .editable-name{margin:0;padding-top:15px}.json-tree-node-flat .node .node-content .node-info .editable-name .ngx-input-hint{display:none}.json-tree-node-flat .node .node-content .node-input{-webkit-box-flex:1;flex:1}.json-tree-node-flat .node .node-content .node-input ngx-input{padding:0;margin:0}.json-tree-node-flat .node .node-content .node-input ngx-input .ngx-input-hint{min-height:0}.json-tree-node-flat .node .node-content .node-input .code:hover button{display:inline}.json-tree-node-flat .node .node-content .node-input .code input{color:#cdd2dd}.json-tree-node-flat .node .node-content .node-input .code button{display:none;color:#72819f}.json-tree-node-flat .node .node-content .node-input .input-error{color:#ff4514}"]
        }),
        __metadata("design:paramtypes", [DialogService, DomSanitizer])
    ], JsonEditorNodeFlatComponent);
    return JsonEditorNodeFlatComponent;
}(JsonEditorNode));
export { JsonEditorNodeFlatComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1lZGl0b3Itbm9kZS1mbGF0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9qc29uLWVkaXRvci9qc29uLWVkaXRvci1mbGF0L2pzb24tZWRpdG9yLW5vZGUtZmxhdC9qc29uLWVkaXRvci1ub2RlLWZsYXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFFTCxpQkFBaUIsRUFDakIsWUFBWSxFQUNaLE1BQU0sRUFDTix1QkFBdUIsRUFDeEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXhELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMvRCxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxxQkFBcUIsRUFBd0MsTUFBTSwwQkFBMEIsQ0FBQztBQVN2RztJQUFpRCwrQ0FBYztJQWlDN0QscUNBQW1CLFVBQXlCLEVBQVUsWUFBMEI7UUFBaEYsWUFDRSxrQkFBTSxVQUFVLENBQUMsU0FFbEI7UUFIa0IsZ0JBQVUsR0FBVixVQUFVLENBQWU7UUFBVSxrQkFBWSxHQUFaLFlBQVksQ0FBYztRQWR2RSxlQUFTLEdBQUcsS0FBSyxDQUFDO1FBRWxCLGNBQVEsR0FBRyxLQUFLLENBQUM7UUFFakIsZUFBUyxHQUFHLEVBQUUsQ0FBQztRQU1kLDZCQUF1QixHQUFHLElBQUksWUFBWSxFQUF5QyxDQUFDO1FBTTVGLEtBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDLENBQUM7O0lBQzVGLENBQUM7SUFFRCw4Q0FBUSxHQUFSO1FBQ0UsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUM1QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDckM7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQztJQUVELHdEQUFrQixHQUFsQixVQUFtQixFQUFtQixFQUFFLElBQVk7UUFDbEQsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBQSxFQUFFLElBQUksTUFBQSxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDOztnQkFmOEIsYUFBYTtnQkFBd0IsWUFBWTs7SUFoQ3ZFO1FBQVIsS0FBSyxFQUFFOzs4REFBWTtJQUVYO1FBQVIsS0FBSyxFQUFFOzsrREFBMEI7SUFFekI7UUFBUixLQUFLLEVBQUU7OzJFQUEwQjtJQUV6QjtRQUFSLEtBQUssRUFBRTs7K0RBQWU7SUFFZDtRQUFSLEtBQUssRUFBRTs7OERBQWU7SUFFZDtRQUFSLEtBQUssRUFBRTs7OERBQWU7SUFFZDtRQUFSLEtBQUssRUFBRTs7MEVBQTZCO0lBRTVCO1FBQVIsS0FBSyxFQUFFOztrRUFBOEI7SUFFN0I7UUFBUixLQUFLLEVBQUU7O2dFQUErQjtJQUU5QjtRQUFSLEtBQUssRUFBRTs7a0VBQW1CO0lBRWxCO1FBQVIsS0FBSyxFQUFFOztpRUFBa0I7SUFFakI7UUFBUixLQUFLLEVBQUU7O2tFQUFnQjtJQUVmO1FBQVIsS0FBSyxFQUFFOzttRUFBcUI7SUFFcEI7UUFBUixLQUFLLEVBQUU7O3lFQUE0QjtJQUUxQjtRQUFULE1BQU0sRUFBRTs7Z0ZBQXFGO0lBN0JuRiwyQkFBMkI7UUFQdkMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLDJCQUEyQjtZQUNyQyxxMFVBQXFEO1lBRXJELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO1lBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztTQUNoRCxDQUFDO3lDQWtDK0IsYUFBYSxFQUF3QixZQUFZO09BakNyRSwyQkFBMkIsQ0FpRHZDO0lBQUQsa0NBQUM7Q0FBQSxBQWpERCxDQUFpRCxjQUFjLEdBaUQ5RDtTQWpEWSwyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBFdmVudEVtaXR0ZXIsXG4gIE91dHB1dCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBKc29uRWRpdG9yTm9kZSB9IGZyb20gJy4uLy4uL2pzb24tZWRpdG9yLW5vZGUnO1xuXG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vZGlhbG9nL2RpYWxvZy5zZXJ2aWNlJztcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZUh0bWwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IHJlcXVpcmVkSW5kaWNhdG9ySWNvbiwgSlNPTkVkaXRvclNjaGVtYSwgSnNvblNjaGVtYURhdGFUeXBlIH0gZnJvbSAnLi4vLi4vanNvbi1lZGl0b3IuaGVscGVyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LWpzb24tZWRpdG9yLW5vZGUtZmxhdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9qc29uLWVkaXRvci1ub2RlLWZsYXQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9qc29uLWVkaXRvci1ub2RlLWZsYXQuY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgSnNvbkVkaXRvck5vZGVGbGF0Q29tcG9uZW50IGV4dGVuZHMgSnNvbkVkaXRvck5vZGUgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBtb2RlbDogYW55O1xuXG4gIEBJbnB1dCgpIHNjaGVtYTogSlNPTkVkaXRvclNjaGVtYTtcblxuICBASW5wdXQoKSB0eXBlQ2hlY2tPdmVycmlkZXM/OiBhbnk7XG5cbiAgQElucHV0KCkgZXJyb3JzOiBhbnlbXTtcblxuICBASW5wdXQoKSBsYWJlbDogc3RyaW5nO1xuXG4gIEBJbnB1dCgpIGxldmVsOiBudW1iZXI7XG5cbiAgQElucHV0KCkgc2NoZW1hQnVpbGRlck1vZGU/OiBib29sZWFuO1xuXG4gIEBJbnB1dCgpIHNjaGVtYVJlZj86IEpTT05FZGl0b3JTY2hlbWE7XG5cbiAgQElucHV0KCkgZm9ybWF0czogSnNvblNjaGVtYURhdGFUeXBlW107XG5cbiAgQElucHV0KCkgYXJyYXlJdGVtID0gZmFsc2U7XG5cbiAgQElucHV0KCkgaGlkZVJvb3QgPSBmYWxzZTtcblxuICBASW5wdXQoKSBhcnJheU5hbWUgPSAnJztcblxuICBASW5wdXQoKSBjb21wcmVzc2VkOiBib29sZWFuO1xuXG4gIEBJbnB1dCgpIGluZGVudGF0aW9uQXJyYXk6IG51bWJlcltdO1xuXG4gIEBPdXRwdXQoKSB1cGRhdGVQcm9wZXJ0eU5hbWVFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXI8eyBpZDogc3RyaW5nIHwgbnVtYmVyOyBuYW1lOiBzdHJpbmcgfT4oKTtcblxuICByZXF1aXJlZEluZGljYXRvcjogU2FmZUh0bWw7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGRpYWxvZ01uZ3I6IERpYWxvZ1NlcnZpY2UsIHByaXZhdGUgZG9tU2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHtcbiAgICBzdXBlcihkaWFsb2dNbmdyKTtcbiAgICB0aGlzLnJlcXVpcmVkSW5kaWNhdG9yID0gdGhpcy5kb21TYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwocmVxdWlyZWRJbmRpY2F0b3JJY29uKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLmxldmVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMubGV2ZWwgPSB0aGlzLmhpZGVSb290ID8gLTEgOiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxldmVsICs9IDE7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlUHJvcGVydHlOYW1lKGlkOiBzdHJpbmcgfCBudW1iZXIsIG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlUHJvcGVydHlOYW1lRXZlbnQuZW1pdCh7IGlkLCBuYW1lIH0pO1xuICB9XG59XG4iXX0=