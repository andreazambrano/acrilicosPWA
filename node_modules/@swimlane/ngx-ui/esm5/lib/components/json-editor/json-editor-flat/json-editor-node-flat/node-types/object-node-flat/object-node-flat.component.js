import { __assign, __decorate, __extends, __metadata, __read, __spread } from "tslib";
import { Component, ViewEncapsulation, Input, ViewChild, TemplateRef, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { ObjectNode } from '../../../../node-types/object-node.component';
import { DialogService } from '../../../../../dialog/dialog.service';
import { jsonSchemaDataTypes, createValueForSchema } from '../../../../json-editor.helper';
import { moveItemInArray } from '@angular/cdk/drag-drop';
var ObjectNodeFlatComponent = /** @class */ (function (_super) {
    __extends(ObjectNodeFlatComponent, _super);
    function ObjectNodeFlatComponent(dialogService, cdr) {
        var _this = _super.call(this, cdr) || this;
        _this.dialogService = dialogService;
        _this.cdr = cdr;
        _this.indentationArray = [];
        _this.objectKeys = Object.keys;
        return _this;
    }
    ObjectNodeFlatComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.schemaBuilderMode) {
            this.dataTypes = __spread(jsonSchemaDataTypes, this.formats);
        }
        setTimeout(function () {
            _this.initSchemaProperties(_this.schema);
            _this.initSchemaProperties(_this.schemaRef);
        });
        if (this.level > 0) {
            this.indentationArray = Array(this.level).fill(this.level);
        }
    };
    ObjectNodeFlatComponent.prototype.onUpdatePropertyName = function (options) {
        this.updatePropertyName(options.id, options.name);
    };
    ObjectNodeFlatComponent.prototype.onPropertyConfig = function (property, index) {
        this.dialogService.create({
            template: this.propertyConfigTmpl,
            context: {
                property: property,
                index: index,
                schema: this.schema,
                formats: this.formats
            },
            class: 'property-config-dialog'
        });
    };
    ObjectNodeFlatComponent.prototype.updateSchema = function (options) {
        var oldProperty = options.oldProperty;
        var newProperty = options.newProperty;
        var oldName = oldProperty.propertyName;
        var newName = newProperty.propertyName;
        if (newName !== oldName) {
            if (oldName in this.schema.properties) {
                this.updateSchemaPropertyName(this.schema, newName, oldName);
            }
            this.updateSchemaPropertyName(this.schemaRef, newName, oldName);
            this.updatePropertyName(options.newProperty.id, newName);
        }
        this.toggleRequiredValue(options.required, newName);
        this.schema.properties[newName] = newProperty;
        this.propertyIndex[options.newProperty.id] = newProperty;
        this.updateSchemaRefProperty(newProperty);
        if (newName !== oldName) {
            this.swapSchemaProperties(options.index);
        }
        if (oldProperty.type !== newProperty.type) {
            var value = createValueForSchema(newProperty);
            this.model[newProperty.propertyName] = value;
        }
        this.propertyIndex = __assign({}, this.propertyIndex);
        this.schemaChange.emit();
    };
    ObjectNodeFlatComponent.prototype.addProperty = function (dataType) {
        _super.prototype.addProperty.call(this, dataType);
        this.updateSchemaRefProperty(this.propertyIndex[this.propertyId - 1]);
        this.schemaChange.emit();
    };
    ObjectNodeFlatComponent.prototype.deleteProperty = function (propName) {
        if (this.schemaBuilderMode) {
            delete this.schema.properties[propName];
            delete this.schemaRef.properties[propName];
            this.toggleRequiredValue(false, propName);
        }
        else if (!this.schema.required.includes(propName) && !(propName in this.schema.properties)) {
            delete this.schemaRef.properties[propName];
        }
        this.schemaChange.emit();
        _super.prototype.deleteProperty.call(this, propName);
    };
    ObjectNodeFlatComponent.prototype.drop = function (event) {
        var propertyIndexValues = Object.values(this.propertyIndex);
        moveItemInArray(propertyIndexValues, event.previousIndex, event.currentIndex);
        var index = 0;
        for (var prop in this.propertyIndex) {
            this.propertyIndex[prop] = propertyIndexValues[index];
            this.propertyIndex[prop].id = parseInt(prop, 10);
            index += 1;
        }
        this.propertyIndex = __assign({}, this.propertyIndex);
        this.swapSchemaProperties(event.currentIndex, event.previousIndex);
    };
    ObjectNodeFlatComponent.prototype.swapSchemaProperties = function (currentIndex, previousIndex) {
        var _this = this;
        var propertiesIds = Object.keys(this.schemaRef.properties);
        if (previousIndex === undefined) {
            previousIndex = propertiesIds.length - 1;
        }
        moveItemInArray(propertiesIds, previousIndex, currentIndex);
        this.schemaRef.properties = propertiesIds.reduce(function (result, prop) {
            result[prop] = _this.schemaRef.properties[prop];
            return result;
        }, {});
        this.schemaChange.emit();
    };
    ObjectNodeFlatComponent.prototype.initSchemaProperties = function (schema) {
        if (schema) {
            schema.required = schema.required || [];
            schema.properties = schema.properties || {};
        }
    };
    ObjectNodeFlatComponent.prototype.updateSchemaRefProperty = function (prop) {
        this.schemaRef.properties[prop.propertyName] = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({ type: prop.type }, (prop['format'] && { format: prop['format'] })), (prop['title'] && { title: prop['title'] })), (prop['items'] && { items: prop['items'] })), (prop['required'] && { required: prop['required'] })), (prop['properties'] && { properties: prop['properties'] })), (prop['enum'] && { enum: prop['enum'] })), (prop['default'] && { default: prop['default'] })), (prop['description'] && { description: prop['description'] })), (prop['nameEditable'] && { nameEditable: prop['nameEditable'] })), (prop['minimum'] && { minimum: prop['minimum'] })), (prop['maximum'] && { maximum: prop['maximum'] })), (prop['minLength'] && { minLength: prop['minLength'] })), (prop['maxLength'] && { maxLength: prop['maxLength'] })), (prop['minItems'] && { minItems: prop['minItems'] })), (prop['maxItems'] && { maxItems: prop['maxItems'] })), (prop['pattern'] && { pattern: prop['pattern'] }));
    };
    ObjectNodeFlatComponent.prototype.updateSchemaPropertyName = function (schema, newName, oldName) {
        this.updateRequiredProperties(schema, newName, oldName);
        schema.properties[newName] = schema.properties[oldName];
        delete schema.properties[oldName];
    };
    ObjectNodeFlatComponent.prototype.toggleRequiredValue = function (required, propertyName) {
        var requiredIndex = this.schema.required.indexOf(propertyName);
        if (requiredIndex >= 0 && !required) {
            this.schema.required.splice(requiredIndex, 1);
        }
        else if (requiredIndex < 0 && required) {
            this.schema.required.push(propertyName);
        }
        this.schemaRef.required = __spread(this.schema.required);
        this.updateRequiredCache();
    };
    ObjectNodeFlatComponent.prototype.updateRequiredProperties = function (schema, newName, oldName) {
        var requiredIndex = schema.required.indexOf(oldName);
        if (requiredIndex >= 0) {
            schema.required[requiredIndex] = newName;
        }
    };
    ObjectNodeFlatComponent.ctorParameters = function () { return [
        { type: DialogService },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        ViewChild('propertyConfigTmpl', { static: false }),
        __metadata("design:type", TemplateRef)
    ], ObjectNodeFlatComponent.prototype, "propertyConfigTmpl", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], ObjectNodeFlatComponent.prototype, "level", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ObjectNodeFlatComponent.prototype, "schemaBuilderMode", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], ObjectNodeFlatComponent.prototype, "formats", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ObjectNodeFlatComponent.prototype, "compressed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ObjectNodeFlatComponent.prototype, "hideRoot", void 0);
    ObjectNodeFlatComponent = __decorate([
        Component({
            selector: 'ngx-json-object-node-flat',
            template: "<div\n  class=\"object-node-flat\"\n  [hidden]=\"!expanded\"\n  cdkDropList\n  [cdkDropListDisabled]=\"!schemaBuilderMode\"\n  (cdkDropListDropped)=\"drop($event)\"\n>\n  <div\n    cdkDrag\n    cdkDragLockAxis=\"y\"\n    class=\"object-node-content\"\n    *ngFor=\"let prop of propertyIndex | objectValues; let index = index; trackBy: trackBy\"\n  >\n    <ngx-json-editor-node-flat\n      [model]=\"model[prop.propertyName]\"\n      (modelChange)=\"updateProp(prop.id, $event)\"\n      [schema]=\"prop\"\n      [schemaRef]=\"schemaRef && schemaRef.properties ? schemaRef.properties[prop.propertyName] : null\"\n      [required]=\"!!requiredCache[prop.propertyName]\"\n      [inline]=\"prop.type !== 'array' && prop.type !== 'object'\"\n      [path]=\"path + getPath(prop.propertyName)\"\n      [errors]=\"errors\"\n      [hideRoot]=\"hideRoot\"\n      [typeCheckOverrides]=\"typeCheckOverrides\"\n      [level]=\"level\"\n      [schemaBuilderMode]=\"schemaBuilderMode\"\n      [formats]=\"formats\"\n      [compressed]=\"compressed\"\n      [indentationArray]=\"indentationArray\"\n      (schemaChange)=\"schemaChange.emit(schemaRef)\"\n      (updatePropertyNameEvent)=\"onUpdatePropertyName($event)\"\n    >\n      <div class=\"node-options\" node-options>\n        <button\n          *ngIf=\"schemaBuilderMode\"\n          type=\"button\"\n          class=\"node-options-btn\"\n          (click)=\"onPropertyConfig(prop, index)\"\n        >\n          <i class=\"ngx-icon ngx-cog\"></i>\n        </button>\n        <ngx-dropdown [showCaret]=\"true\">\n          <ngx-dropdown-toggle>\n            <button type=\"button\" class=\"node-options-btn\">\n              <i class=\"ngx-icon ngx-dots-vert-round\"></i>\n            </button>\n          </ngx-dropdown-toggle>\n          <ngx-dropdown-menu class=\"ngx-dropdown-dark-outline align-right\">\n            <ul class=\"vertical-list\">\n              <li>\n                <button\n                  type=\"button\"\n                  (click)=\"deleteProperty(prop.propertyName)\"\n                  [disabled]=\"requiredCache[prop.propertyName] && !schemaBuilderMode\"\n                >\n                  Delete\n                </button>\n              </li>\n              <ng-container *ngIf=\"prop?.$meta?.type && !schemaBuilderMode\">\n                <li *ngFor=\"let type of prop?.$meta?.type\">\n                  <button\n                    type=\"button\"\n                    (click)=\"changePropertyType(prop, type)\"\n                    [disabled]=\"prop.$meta.currentType === type\"\n                  >\n                    Change type to {{ dataTypeMap[type].name }}\n                  </button>\n                </li>\n              </ng-container>\n            </ul>\n          </ngx-dropdown-menu>\n        </ngx-dropdown>\n      </div>\n      <div *ngIf=\"schemaBuilderMode\" class=\"drag-drop-handle\" cdkDragHandle>\n        <i class=\"ngx-icon ngx-handle\"></i>\n      </div>\n    </ngx-json-editor-node-flat>\n    <div\n      *cdkDragPlaceholder\n      class=\"indentation-placeholder\"\n      [ngStyle]=\"{ width: 'calc(100% + ' + level * 20 + 'px)' }\"\n    ></div>\n  </div>\n\n  <div class=\"add-button\" [class.compressed]=\"compressed\" [class.background]=\"hideRoot ? level > -1 : level\">\n    <span class=\"separator\" *ngFor=\"let separator of indentationArray\"></span>\n    <div class=\"indented-content\" [style.marginLeft]=\"hideRoot && level === 0 ? '20px' : '0'\">\n      <ngx-dropdown [showCaret]=\"true\">\n        <ngx-dropdown-toggle>\n          <button type=\"button\">\n            <i class=\"ngx-icon ngx-tree-expand\"></i>\n            <span>Add {{ objectKeys(propertyIndex).length ? 'a' : 'your first' }} property</span>\n          </button>\n        </ngx-dropdown-toggle>\n        <ngx-dropdown-menu class=\"ngx-dropdown-dark-outline\">\n          <ul class=\"vertical-list dropdown-column\" *ngIf=\"schema.properties && !schemaBuilderMode\">\n            <li *ngFor=\"let prop of schema.properties | keyvalue\" (click)=\"addSchemaProperty(prop.key)\">\n              <button [disabled]=\"model[prop.key] !== undefined\" type=\"button\">\n                {{ prop.value.title ? prop.value.title : prop.key }}\n              </button>\n            </li>\n          </ul>\n          <ul\n            class=\"vertical-list dropdown-column\"\n            *ngIf=\"!schema || schema.patternProperties || schema.additionalProperties !== false\"\n          >\n            <li *ngFor=\"let prop of schema.patternProperties | keyvalue\" (click)=\"addSchemaPatternProperty(prop.key)\">\n              <button type=\"button\">{{ prop.value.title ? prop.value.title : prop.key }}</button>\n            </li>\n            <ng-template [ngIf]=\"!schema || schema.additionalProperties !== false\">\n              <li *ngFor=\"let dataType of dataTypes\" (click)=\"addProperty(dataType)\">\n                <button type=\"button\">{{ dataType.name }}</button>\n              </li>\n            </ng-template>\n          </ul>\n        </ngx-dropdown-menu>\n      </ngx-dropdown>\n    </div>\n  </div>\n</div>\n\n<!-- Property Config Dialog -->\n<ng-template #propertyConfigTmpl let-context=\"context\">\n  <ngx-property-config\n    [property]=\"context.property\"\n    [index]=\"context.index\"\n    [schema]=\"context.schema\"\n    [formats]=\"context.formats\"\n    (updateSchema)=\"updateSchema($event)\"\n  >\n  </ngx-property-config>\n</ng-template>\n",
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".object-node-flat .object-node-content{display:-webkit-box;display:flex;margin-bottom:5px;position:relative}.object-node-flat .object-node-content ngx-json-editor-node-flat{-webkit-box-flex:1;flex:1}.object-node-flat .add-button{height:100px;position:relative;display:-webkit-box;display:flex}.object-node-flat .add-button ngx-dropdown{padding-bottom:0}.object-node-flat .compressed.add-button{max-height:80px}.object-node-flat .background.add-button{background-color:rgba(49,56,71,.4);padding:7px 7px 7px 0;height:120px}.object-node-flat .add-button .indented-content{border:2px dotted rgba(59,68,87,.5);width:100%;display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;color:#909cb4}.object-node-flat .add-button .indented-content button{display:-webkit-box;display:flex}.object-node-flat .add-button .indented-content button i{font-size:18px}.object-node-flat .add-button .indented-content button span{font-size:14px;margin-left:10px}.object-node-flat .add-button .indented-content .ngx-dropdown-menu{white-space:nowrap;margin-top:10px}.object-node-flat .add-button .indented-content .ngx-dropdown-menu .dropdown-column{vertical-align:top;display:inline-block;min-width:150px}.object-node-flat .add-button .indented-content .ngx-dropdown-menu .dropdown-column:nth-child(2){border-left:1px solid #505c75}.indentation-placeholder{border-radius:2px 0 0 2px;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;background-color:rgba(49,56,71,.4)}.separator{background-color:#3b4457;opacity:.5;border-radius:2px;width:1px;height:calc(100% - 4px);margin-right:20px}.separator:first-child{margin-left:20px}.object-node-flat{margin-top:5px}.cdk-drag-preview .indentation{opacity:.5}.cdk-drag-preview .add-button{display:none}.cdk-drag-animating,.object-node-flat.cdk-drop-list-dragging .object-node-content:not(.cdk-drag-placeholder){-webkit-transition:-webkit-transform 250ms cubic-bezier(0,0,.2,1);transition:transform 250ms cubic-bezier(0,0,.2,1);transition:transform 250ms cubic-bezier(0,0,.2,1),-webkit-transform 250ms cubic-bezier(0,0,.2,1)}.indentation-placeholder{position:relative;height:117px;margin-bottom:5px;-webkit-transition:-webkit-transform 250ms cubic-bezier(0,0,.2,1);transition:transform 250ms cubic-bezier(0,0,.2,1),-webkit-transform 250ms cubic-bezier(0,0,.2,1)}"]
        }),
        __metadata("design:paramtypes", [DialogService, ChangeDetectorRef])
    ], ObjectNodeFlatComponent);
    return ObjectNodeFlatComponent;
}(ObjectNode));
export { ObjectNodeFlatComponent };
//# sourceMappingURL=data:application/json;base64,