var e_1, _a;
import { __read, __spread, __values } from "tslib";
export var requiredIndicatorIcon = "\n  <svg width=\"11\" height=\"11\" viewBox=\"0 0 11 11\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M3.38411 10L2.19205 9.10616L3.89073 6.2089L1 4.97603L1.44702 3.55822L4.48676 4.32877L4.75497 1H6.21523L6.48344 4.29795L9.55298 3.55822L10 4.97603L7.10927 6.2089L8.77815 9.10616L7.61589 10L5.5 7.34931L3.38411 10Z\" fill=\"#72819F\" stroke=\"#72819F\" stroke-width=\"0.5\"/>\n  </svg>";
export var propTypes = ['string', 'number', 'integer', 'boolean', 'object', 'array'];
var ɵ0 = function () { return ''; }, ɵ1 = function (value) {
    return typeof value === 'string';
}, ɵ2 = function () { return 0; }, ɵ3 = function (value) {
    return typeof value === 'number';
}, ɵ4 = function () { return 0; }, ɵ5 = function (value) {
    return typeof value === 'number';
}, ɵ6 = function () { return true; }, ɵ7 = function (value) {
    return typeof value === 'boolean';
}, ɵ8 = function () { return JSON.parse(JSON.stringify({})); }, ɵ9 = function (value) {
    return typeof value === 'object';
}, ɵ10 = function () { return JSON.parse(JSON.stringify([])); }, ɵ11 = function (value) {
    return Array.isArray(value);
};
export var jsonSchemaDataTypes = [
    {
        name: 'String',
        defaultValue: ɵ0,
        schema: {
            type: 'string'
        },
        icon: 'field-text',
        matchType: ɵ1
    },
    {
        name: 'Number',
        defaultValue: ɵ2,
        schema: {
            type: 'number'
        },
        icon: 'field-numeric',
        matchType: ɵ3
    },
    {
        name: 'Integer',
        defaultValue: ɵ4,
        schema: {
            type: 'integer'
        },
        icon: 'field-numeric',
        matchType: ɵ5
    },
    {
        name: 'Boolean',
        defaultValue: ɵ6,
        schema: {
            type: 'boolean'
        },
        icon: 'check-square-filled',
        matchType: ɵ7
    },
    {
        name: 'Object',
        defaultValue: ɵ8,
        schema: {
            type: 'object'
        },
        icon: 'reference-tree',
        matchType: ɵ9
    },
    {
        name: 'Array',
        defaultValue: ɵ10,
        schema: {
            type: 'array'
        },
        icon: 'integrations',
        matchType: ɵ11
    }
];
var ɵ12 = function () { return ''; }, ɵ13 = function () {
    return false; // needs to be overriden
}, ɵ14 = function () { return ''; }, ɵ15 = function () {
    return false; // needs to be overriden
}, ɵ16 = function () { return ''; }, ɵ17 = function () {
    return false; // needs to be overriden
}, ɵ18 = function () { return ''; }, ɵ19 = function () {
    return false; // needs to be overriden
};
export var jsonSchemaDataFormats = [
    {
        name: 'Date',
        defaultValue: ɵ12,
        schema: {
            type: 'string',
            format: 'date'
        },
        icon: 'field-date',
        matchType: ɵ13
    },
    {
        name: 'Date & Time',
        defaultValue: ɵ14,
        schema: {
            type: 'string',
            format: 'date-time'
        },
        icon: 'field-date',
        matchType: ɵ15
    },
    {
        name: 'Password',
        defaultValue: ɵ16,
        schema: {
            type: 'string',
            format: 'password'
        },
        icon: 'lock',
        matchType: ɵ17
    },
    {
        name: 'Code',
        defaultValue: ɵ18,
        schema: {
            type: 'string',
            format: 'code'
        },
        icon: 'code',
        matchType: ɵ19
    }
];
export var dataTypeMap = {};
try {
    for (var _b = __values(__spread(jsonSchemaDataTypes, jsonSchemaDataFormats)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var dType = _c.value;
        var key = dType.schema.type;
        if (dType.schema.format) {
            key = key + "=" + dType.schema.format;
        }
        dataTypeMap[key] = dType;
    }
}
catch (e_1_1) { e_1 = { error: e_1_1 }; }
finally {
    try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    }
    finally { if (e_1) throw e_1.error; }
}
export function createValueForSchema(schema) {
    if (schema.default) {
        return schema.default;
    }
    if (schema.type) {
        return dataTypeMap[schema.type].defaultValue();
    }
    return null;
}
/**
 * Infers the schema type of the value
 * @param value the value to infer the schema for
 * @param overrides an object with overridden inference functions for various schema types
 * @param allowedTypes the allowed schema types to consider
 */
export function inferType(value, overrides, allowedTypes) {
    if (overrides) {
        for (var typeName in overrides) {
            if (allowedTypes !== undefined && !allowedTypes.includes(typeName)) {
                continue;
            }
            if (dataTypeMap[typeName] && overrides[typeName](value)) {
                return dataTypeMap[typeName].schema;
            }
        }
    }
    var type;
    for (var typeName in dataTypeMap) {
        if (allowedTypes !== undefined && !allowedTypes.includes(typeName)) {
            continue;
        }
        if (dataTypeMap[typeName].matchType(value)) {
            type = dataTypeMap[typeName].schema;
        }
    }
    if (!type) {
        type = dataTypeMap['object'].schema;
    }
    return type;
}
/**
 * Returns the icon for the schema
 */
export function getIcon(schema) {
    var key = schema.type;
    if (schema.format) {
        key = key + "=" + schema.format;
    }
    if (dataTypeMap[key]) {
        return dataTypeMap[key].icon;
    }
    return 'integration';
}
/**
 * Returns a string for the schema.$meta.currentType property in the following format:
 * string, string=code, object, etc.
 * @param schema
 */
export function getCurrentType(schema) {
    if (schema.type !== 'string') {
        return schema.type;
    }
    if (schema.format) {
        return "string=" + schema.format;
    }
    else {
        return 'string';
    }
}
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11, ɵ12, ɵ13, ɵ14, ɵ15, ɵ16, ɵ17, ɵ18, ɵ19 };
//# sourceMappingURL=data:application/json;base64,