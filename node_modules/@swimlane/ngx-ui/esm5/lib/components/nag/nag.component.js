import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, ViewEncapsulation } from '@angular/core';
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { trigger } from '@angular/animations';
import { NAG_DRAWER_ANIMATION } from './nag.animation';
var NagComponent = /** @class */ (function () {
    function NagComponent() {
        this.cssClass = '';
        this.state = 'closed';
        this.stateChanged = new EventEmitter();
        this.nagTitle = '';
    }
    Object.defineProperty(NagComponent.prototype, "zIndex", {
        get: function () {
            return this._zIndex;
        },
        set: function (val) {
            this._zIndex = coerceNumberProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NagComponent.prototype, "klass", {
        get: function () {
            return "ngx-nag ngx-nag-bottom ngx-nag-" + this.state + " " + this.cssClass;
        },
        enumerable: true,
        configurable: true
    });
    NagComponent.prototype.toggle = function () {
        this.state = this.state !== 'open' ? 'open' : 'closed';
        this.stateChanged.emit(this.state);
    };
    NagComponent.prototype.ngOnDestroy = function () {
        this.stateChanged.emit(this.state);
    };
    NagComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (changes.watch && this.state === 'closed') {
            this.state = 'peek';
            setTimeout(function () {
                _this.state = 'closed';
            }, 100);
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NagComponent.prototype, "cssClass", void 0);
    __decorate([
        HostBinding('@drawerTransition'),
        Input(),
        __metadata("design:type", String)
    ], NagComponent.prototype, "state", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NagComponent.prototype, "stateChanged", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], NagComponent.prototype, "zIndex", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NagComponent.prototype, "nagTitle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NagComponent.prototype, "watch", void 0);
    __decorate([
        HostBinding('class'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], NagComponent.prototype, "klass", null);
    NagComponent = __decorate([
        Component({
            selector: 'ngx-nag',
            exportAs: 'ngxNag',
            template: "<div class=\"ngx-nag-content\">\n  <ngx-toolbar class=\"ngx-nag-toolbar\" (click)=\"toggle()\" [mainTitle]=\"nagTitle\">\n    <ngx-toolbar-title *ngIf=\"!nagTitle\"> <ng-content select=\"[ngx-nag-title]\"></ng-content> </ngx-toolbar-title>\n    <ngx-toolbar-content><ngx-icon class=\"ngx-nag-icon\" fontIcon=\"arrow-down\"></ngx-icon></ngx-toolbar-content>\n  </ngx-toolbar>\n  <section class=\"ngx-nag-body ngx-section-content\"><ng-content></ng-content></section>\n</div>\n",
            host: {
                role: 'dialog',
                tabindex: '-1',
                '[style.zIndex]': 'zIndex'
            },
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush,
            animations: [trigger('drawerTransition', NAG_DRAWER_ANIMATION)],
            styles: [".ngx-nag{position:fixed;overflow-y:auto;overflow-x:hidden;text-align:left;z-index:998;background:#313847}.ngx-nag.ngx-nag-bottom{left:20%;right:20%;top:100%;width:60%}.ngx-nag.ngx-nag-bottom .ngx-nag-icon{-webkit-transform:rotateZ(180deg);transform:rotateZ(180deg);display:block;-webkit-transition:.4s ease-out;transition:.4s ease-out;background-color:#212633;height:30px;width:30px;border-radius:15px;float:right;text-align:center;margin-top:10px;line-height:34px;cursor:pointer}.ngx-nag.ngx-nag-bottom.ngx-nag-open .ngx-nag-icon{-webkit-transform:rotateZ(0);transform:rotateZ(0)}.ngx-nag .ngx-nag-body{background-color:#313847;margin-bottom:0;padding:1.8em;max-height:50vh;overflow-y:auto}.ngx-nag .ngx-nag-toolbar{background:#293040;cursor:pointer}"]
        })
    ], NagComponent);
    return NagComponent;
}());
export { NagComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFnLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9uYWcvbmFnLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLFdBQVcsRUFDWCxLQUFLLEVBR0wsTUFBTSxFQUVOLGlCQUFpQixFQUNsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFOUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFnQnZEO0lBQUE7UUFDVyxhQUFRLEdBQVcsRUFBRSxDQUFDO1FBSS9CLFVBQUssR0FBVyxRQUFRLENBQUM7UUFFZixpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFVM0MsYUFBUSxHQUFXLEVBQUUsQ0FBQztJQTJCakMsQ0FBQztJQW5DQyxzQkFBSSxnQ0FBTTthQUFWO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUM7YUFFRCxVQUFXLEdBQVc7WUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQyxDQUFDOzs7T0FKQTtJQVVELHNCQUFJLCtCQUFLO2FBQVQ7WUFDRSxPQUFPLG9DQUFrQyxJQUFJLENBQUMsS0FBSyxTQUFJLElBQUksQ0FBQyxRQUFVLENBQUM7UUFDekUsQ0FBQzs7O09BQUE7SUFJRCw2QkFBTSxHQUFOO1FBQ0UsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDdkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxrQ0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxrQ0FBVyxHQUFYLFVBQVksT0FBc0I7UUFBbEMsaUJBT0M7UUFOQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDNUMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7WUFDcEIsVUFBVSxDQUFDO2dCQUNULEtBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDO1lBQ3hCLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNUO0lBQ0gsQ0FBQztJQTFDUTtRQUFSLEtBQUssRUFBRTs7a0RBQXVCO0lBSS9CO1FBRkMsV0FBVyxDQUFDLG1CQUFtQixDQUFDO1FBQ2hDLEtBQUssRUFBRTs7K0NBQ2lCO0lBRWY7UUFBVCxNQUFNLEVBQUU7O3NEQUEyQztJQU1wRDtRQURDLEtBQUssRUFBRTs7OzhDQUdQO0lBRVE7UUFBUixLQUFLLEVBQUU7O2tEQUF1QjtJQUN0QjtRQUFSLEtBQUssRUFBRTs7K0NBQVk7SUFHcEI7UUFEQyxXQUFXLENBQUMsT0FBTyxDQUFDOzs7NkNBR3BCO0lBdkJVLFlBQVk7UUFkeEIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLFNBQVM7WUFDbkIsUUFBUSxFQUFFLFFBQVE7WUFDbEIsdWVBQW1DO1lBQ25DLElBQUksRUFBRTtnQkFDSixJQUFJLEVBQUUsUUFBUTtnQkFDZCxRQUFRLEVBQUUsSUFBSTtnQkFDZCxnQkFBZ0IsRUFBRSxRQUFRO2FBQzNCO1lBQ0QsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7WUFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07WUFFL0MsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLG9CQUFvQixDQUFDLENBQUM7O1NBQ2hFLENBQUM7T0FDVyxZQUFZLENBNEN4QjtJQUFELG1CQUFDO0NBQUEsQUE1Q0QsSUE0Q0M7U0E1Q1ksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBWaWV3RW5jYXBzdWxhdGlvblxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvZXJjZU51bWJlclByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IHRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuaW1wb3J0IHsgTkFHX0RSQVdFUl9BTklNQVRJT04gfSBmcm9tICcuL25hZy5hbmltYXRpb24nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtbmFnJyxcbiAgZXhwb3J0QXM6ICduZ3hOYWcnLFxuICB0ZW1wbGF0ZVVybDogJy4vbmFnLmNvbXBvbmVudC5odG1sJyxcbiAgaG9zdDoge1xuICAgIHJvbGU6ICdkaWFsb2cnLFxuICAgIHRhYmluZGV4OiAnLTEnLFxuICAgICdbc3R5bGUuekluZGV4XSc6ICd6SW5kZXgnXG4gIH0sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZVVybHM6IFsnLi9uYWcuY29tcG9uZW50LnNjc3MnXSxcbiAgYW5pbWF0aW9uczogW3RyaWdnZXIoJ2RyYXdlclRyYW5zaXRpb24nLCBOQUdfRFJBV0VSX0FOSU1BVElPTildXG59KVxuZXhwb3J0IGNsYXNzIE5hZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgY3NzQ2xhc3M6IHN0cmluZyA9ICcnO1xuXG4gIEBIb3N0QmluZGluZygnQGRyYXdlclRyYW5zaXRpb24nKVxuICBASW5wdXQoKVxuICBzdGF0ZTogc3RyaW5nID0gJ2Nsb3NlZCc7XG5cbiAgQE91dHB1dCgpIHN0YXRlQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIGdldCB6SW5kZXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3pJbmRleDtcbiAgfVxuICBASW5wdXQoKVxuICBzZXQgekluZGV4KHZhbDogbnVtYmVyKSB7XG4gICAgdGhpcy5fekluZGV4ID0gY29lcmNlTnVtYmVyUHJvcGVydHkodmFsKTtcbiAgfVxuXG4gIEBJbnB1dCgpIG5hZ1RpdGxlOiBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgd2F0Y2g6IGFueTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcbiAgZ2V0IGtsYXNzKCkge1xuICAgIHJldHVybiBgbmd4LW5hZyBuZ3gtbmFnLWJvdHRvbSBuZ3gtbmFnLSR7dGhpcy5zdGF0ZX0gJHt0aGlzLmNzc0NsYXNzfWA7XG4gIH1cblxuICBwcml2YXRlIF96SW5kZXg6IG51bWJlcjtcblxuICB0b2dnbGUoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMuc3RhdGUgIT09ICdvcGVuJyA/ICdvcGVuJyA6ICdjbG9zZWQnO1xuICAgIHRoaXMuc3RhdGVDaGFuZ2VkLmVtaXQodGhpcy5zdGF0ZSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN0YXRlQ2hhbmdlZC5lbWl0KHRoaXMuc3RhdGUpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLndhdGNoICYmIHRoaXMuc3RhdGUgPT09ICdjbG9zZWQnKSB7XG4gICAgICB0aGlzLnN0YXRlID0gJ3BlZWsnO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAnY2xvc2VkJztcbiAgICAgIH0sIDEwMCk7XG4gICAgfVxuICB9XG59XG4iXX0=