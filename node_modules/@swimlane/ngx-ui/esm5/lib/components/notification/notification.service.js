import { __decorate, __extends, __metadata, __param, __values } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { InjectionService } from '../../services/injection/injection.service';
import { InjectionRegistryService } from '../../services/injection-registry/injection-registry.service';
import { NotificationType } from './notification-type.enum';
import { NotificationStyleType } from './notification-style-type.enum';
import { NotificationPermissionType } from './notification-permission-type.enum';
import { NotificationComponent } from './notification.component';
import { NotificationContainerComponent } from './notification-container.component';
/** adding dynamic to suppress `Document` type metadata error  */
/** @dynamic */
var NotificationService = /** @class */ (function (_super) {
    __extends(NotificationService, _super);
    function NotificationService(injectionService, document) {
        var _this = _super.call(this, injectionService) || this;
        _this.injectionService = injectionService;
        _this.document = document;
        _this.defaults = {
            inputs: {
                timeout: 3000,
                rateLimit: true,
                pauseOnHover: true,
                type: NotificationType.html,
                styleType: NotificationStyleType.none,
                showClose: true,
                sound: false
            }
        };
        _this.type = NotificationComponent;
        return _this;
    }
    NotificationService_1 = NotificationService;
    Object.defineProperty(NotificationService.prototype, "isNativeSupported", {
        get: function () {
            return 'Notification' in window;
        },
        enumerable: true,
        configurable: true
    });
    NotificationService.prototype.create = function (bindings) {
        // verify flood not happening
        if (bindings.rateLimit && this.isFlooded(bindings)) {
            return;
        }
        // if limit reached, remove the first one
        var compsByType = this.getByType();
        if (compsByType && compsByType.length >= NotificationService_1.limit) {
            this.destroy(compsByType[0]);
        }
        // native notifications need to be invoked
        var component;
        if (bindings.type === NotificationType.native) {
            component = this.showNative(bindings);
        }
        else {
            component = _super.prototype.create.call(this, bindings);
            this.createSubscriptions(component);
            this.startTimer(component);
        }
        return component;
    };
    NotificationService.prototype.startTimer = function (component) {
        var _this = this;
        if (component.instance && component.instance.timeout !== false) {
            clearTimeout(component.instance.timer);
            component.instance.timer = setTimeout(function () {
                _this.destroy(component);
            }, component.instance.timeout);
        }
    };
    NotificationService.prototype.pauseTimer = function (component) {
        clearTimeout(component.instance.timer);
    };
    NotificationService.prototype.requestPermissions = function () {
        var _this = this;
        if (this.isNativeSupported) {
            Notification.requestPermission(/* istanbul ignore next */ function (/* istanbul ignore next */ status) { return (_this.permission = status); });
        }
    };
    NotificationService.prototype.assignDefaults = function (options) {
        var bindings = _super.prototype.assignDefaults.call(this, options);
        if (bindings.inputs && bindings.inputs.timeout === true) {
            bindings.inputs.timeout = this.defaults.inputs.timeout;
        }
        // add a timestamp for flood checks
        bindings.inputs.timestamp = +new Date();
        return bindings;
    };
    NotificationService.prototype.injectComponent = function (type, options) {
        if (!this.container || !this.document.contains(this.container.location.nativeElement)) {
            this.container = this.injectionService.appendComponent(NotificationContainerComponent);
        }
        return this.injectionService.appendComponent(type, options, this.container);
    };
    NotificationService.prototype.createSubscriptions = function (component) {
        var _this = this;
        var pauseSub;
        var resumeSub;
        var closeSub;
        var kill = function () {
            closeSub.unsubscribe();
            resumeSub.unsubscribe();
            pauseSub.unsubscribe();
            _this.destroy(component);
        };
        var pause = function () {
            _this.pauseTimer(component);
        };
        var resume = function () {
            _this.startTimer(component);
        };
        pauseSub = component.instance.pause.subscribe(pause);
        resumeSub = component.instance.resume.subscribe(resume);
        closeSub = component.instance.close.subscribe(kill);
    };
    NotificationService.prototype.isFlooded = function (options) {
        var e_1, _a;
        var compsByType = this.getByType();
        try {
            for (var compsByType_1 = __values(compsByType), compsByType_1_1 = compsByType_1.next(); !compsByType_1_1.done; compsByType_1_1 = compsByType_1.next()) {
                var notification = compsByType_1_1.value;
                var instance = notification.instance;
                if (instance.title === options.title &&
                    instance.body === options.body &&
                    instance.timestamp + 1000 > options.timestamp) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (compsByType_1_1 && !compsByType_1_1.done && (_a = compsByType_1.return)) _a.call(compsByType_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
    };
    NotificationService.prototype.showNative = function (options) {
        if (!this.isNativeSupported)
            return;
        if (!this.permission)
            this.requestPermissions();
        if (this.permission === NotificationPermissionType.denied)
            return;
        var note = new Notification(options.title, options);
        note.onerror = function () {
            console.error('Notification failed!', options);
        };
        // manually do this
        if (options && typeof options.timeout === 'number') {
            setTimeout(note.close.bind(note), options.timeout);
        }
        return note;
    };
    var NotificationService_1;
    NotificationService.limit = 10;
    NotificationService.ctorParameters = function () { return [
        { type: InjectionService },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    NotificationService = NotificationService_1 = __decorate([
        Injectable(),
        __param(1, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [InjectionService, Document])
    ], NotificationService);
    return NotificationService;
}(InjectionRegistryService));
export { NotificationService };
//# sourceMappingURL=data:application/json;base64,