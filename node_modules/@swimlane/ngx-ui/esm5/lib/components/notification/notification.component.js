import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, EventEmitter, HostListener, HostBinding, ViewEncapsulation, TemplateRef, ChangeDetectionStrategy } from '@angular/core';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { NotificationStyleType } from './notification-style-type.enum';
var NotificationComponent = /** @class */ (function () {
    function NotificationComponent() {
        this.cssClass = '';
        this.close = new EventEmitter();
        this.pause = new EventEmitter();
        this.resume = new EventEmitter();
        this.NotificationStyleType = NotificationStyleType;
    }
    Object.defineProperty(NotificationComponent.prototype, "showClose", {
        get: function () {
            return this._showClose;
        },
        set: function (showClose) {
            this._showClose = coerceBooleanProperty(showClose);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotificationComponent.prototype, "pauseOnHover", {
        get: function () {
            return this._pauseOnHover;
        },
        set: function (pauseOnHover) {
            this._pauseOnHover = coerceBooleanProperty(pauseOnHover);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotificationComponent.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (timestamp) {
            this._timestamp = coerceNumberProperty(timestamp);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotificationComponent.prototype, "cssClasses", {
        get: function () {
            var cls = "ngx-notification ngx-notification-" + this.styleType;
            if (this.cssClass)
                cls += " " + this.cssClass;
            if (this.showClose)
                cls += ' notification-closeable';
            return cls;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotificationComponent.prototype, "animationDuration", {
        get: function () {
            if (typeof this.timeout !== 'number') {
                return '3000s';
            }
            return this.timeout + "ms";
        },
        enumerable: true,
        configurable: true
    });
    NotificationComponent.prototype.onMouseEnter = function () {
        if (this.pauseOnHover) {
            this.pause.emit();
        }
    };
    NotificationComponent.prototype.onMouseLeave = function () {
        if (this.pauseOnHover) {
            this.resume.emit();
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NotificationComponent.prototype, "cssClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NotificationComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NotificationComponent.prototype, "body", void 0);
    __decorate([
        Input(),
        __metadata("design:type", TemplateRef)
    ], NotificationComponent.prototype, "template", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NotificationComponent.prototype, "styleType", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NotificationComponent.prototype, "icon", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NotificationComponent.prototype, "timeout", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], NotificationComponent.prototype, "showClose", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], NotificationComponent.prototype, "pauseOnHover", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], NotificationComponent.prototype, "timestamp", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NotificationComponent.prototype, "close", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NotificationComponent.prototype, "pause", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NotificationComponent.prototype, "resume", void 0);
    __decorate([
        HostBinding('class'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], NotificationComponent.prototype, "cssClasses", null);
    __decorate([
        HostListener('mouseenter'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], NotificationComponent.prototype, "onMouseEnter", null);
    __decorate([
        HostListener('mouseleave'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], NotificationComponent.prototype, "onMouseLeave", null);
    NotificationComponent = __decorate([
        Component({
            exportAs: 'ngxNotification',
            selector: 'ngx-notification',
            template: "<div>\n  <div class=\"notification-bar\" [class.animated]=\"timeout\">\n    <div class=\"bar\" [ngStyle]=\"{'animation-duration': animationDuration }\"></div>\n  </div>\n\n  <div *ngIf=\"styleType !== NotificationStyleType.none && !icon\" class=\"icon-container\">\n    <span *ngIf=\"styleType === NotificationStyleType.info\" class=\"icon icon-info-fulled\"></span>\n    <span *ngIf=\"styleType === NotificationStyleType.warning\" class=\"icon icon-warning-filled\"></span>\n    <span *ngIf=\"styleType === NotificationStyleType.error\" class=\"icon icon-x-filled\"></span>\n    <span *ngIf=\"styleType === NotificationStyleType.success\" class=\"icon icon-check-filled\"></span>\n  </div>\n\n  <div *ngIf=\"styleType === NotificationStyleType.none && icon\" class=\"icon-container\"><span [class]=\"'icon ' + icon\"></span></div>\n\n  <div class=\"notification-content\" [class.has-icon]=\"styleType !== NotificationStyleType.none || icon\">\n    <h2 class=\"ngx-notification-title\" [innerHTML]=\"title\"></h2>\n    <p class=\"ngx-notification-body\" [innerHTML]=\"body\"></p>\n    <ng-template *ngIf=\"template\" [ngTemplateOutlet]=\"template\"> </ng-template>\n    <button *ngIf=\"showClose\" type=\"button\" (click)=\"close.emit()\" class=\"icon-x ngx-notification-close\"></button>\n  </div>\n</div>\n\n",
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".ngx-notification-container{position:fixed;bottom:20px;right:20px;min-width:120px;max-width:400px;z-index:9998}.ngx-notification{display:block;margin-top:.5rem;position:relative;box-shadow:0 8px 9px -5px rgba(0,0,0,.2),0 15px 22px 2px rgba(0,0,0,.14),0 6px 28px 5px rgba(0,0,0,.12);color:#fff;text-shadow:1px 1px rgba(0,0,0,.1);background:#313847}.ngx-notification .notification-bar{background-color:rgba(69,80,102,.2);width:5px;height:100%;position:absolute}.ngx-notification .notification-bar .bar{background-color:#455066;width:5px;height:100%;position:absolute;bottom:0}.ngx-notification .icon-container .icon{color:#455066;font-size:2.5rem;line-height:2.5rem}.ngx-notification .notification-bar.animated .bar{height:0%;-webkit-animation:1s ease-out heightBar;animation:1s ease-out heightBar}@-webkit-keyframes heightBar{0%{height:100%}100%{height:0%}}@keyframes heightBar{0%{height:100%}100%{height:0%}}.ngx-notification .icon-container{float:left;position:absolute;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);padding:0 1em;height:2.5rem}.ngx-notification .notification-content{padding:1.5rem;color:#cdd2dd;overflow:auto;max-height:300px}.ngx-notification .notification-content.has-icon{margin-left:4.5rem;border-left:1px solid #3b4457}.ngx-notification.notification-closeable{padding-right:1rem}.ngx-notification.ngx-notification-info .notification-bar{background-color:rgba(20,131,255,.2)}.ngx-notification.ngx-notification-info .notification-bar .bar{background-color:#1483ff}.ngx-notification.ngx-notification-info .icon-container .icon{color:#1483ff}.ngx-notification.ngx-notification-error .notification-bar{background-color:rgba(255,69,20,.2)}.ngx-notification.ngx-notification-error .notification-bar .bar{background-color:#ff4514}.ngx-notification.ngx-notification-error .icon-container .icon{color:#ff4514}.ngx-notification.ngx-notification-warning .notification-bar{background-color:rgba(255,168,20,.2)}.ngx-notification.ngx-notification-warning .notification-bar .bar{background-color:#ffa814}.ngx-notification.ngx-notification-warning .icon-container .icon{color:#ffa814}.ngx-notification.ngx-notification-success .notification-bar{background-color:rgba(29,222,182,.2)}.ngx-notification.ngx-notification-success .notification-bar .bar{background-color:#1ddeb6}.ngx-notification.ngx-notification-success .icon-container .icon{color:#1ddeb6}.ngx-notification .ngx-notification-title{margin:0;font-size:1.2rem;color:#fff}.ngx-notification .ngx-notification-body{font-size:.9rem;margin:0;line-height:1rem}.ngx-notification .ngx-notification-close{position:absolute;right:.5rem;top:.5rem;line-height:1em;padding:0;font-size:16px;height:16px}"]
        })
    ], NotificationComponent);
    return NotificationComponent;
}());
export { NotificationComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixZQUFZLEVBQ1osV0FBVyxFQUNYLGlCQUFpQixFQUNqQixXQUFXLEVBQ1gsdUJBQXVCLEVBQ3hCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXBGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBVXZFO0lBQUE7UUFDVyxhQUFRLEdBQVcsRUFBRSxDQUFDO1FBZ0NyQixVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUNqQyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUNqQyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQWlCbkMsMEJBQXFCLEdBQUcscUJBQXFCLENBQUM7SUFvQnpELENBQUM7SUE5REMsc0JBQUksNENBQVM7YUFBYjtZQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN6QixDQUFDO2FBQ0QsVUFBYyxTQUFTO1lBQ3JCLElBQUksQ0FBQyxVQUFVLEdBQUcscUJBQXFCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDckQsQ0FBQzs7O09BSEE7SUFNRCxzQkFBSSwrQ0FBWTthQUFoQjtZQUNFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM1QixDQUFDO2FBQ0QsVUFBaUIsWUFBWTtZQUMzQixJQUFJLENBQUMsYUFBYSxHQUFHLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzNELENBQUM7OztPQUhBO0lBTUQsc0JBQUksNENBQVM7YUFBYjtZQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN6QixDQUFDO2FBQ0QsVUFBYyxTQUFTO1lBQ3JCLElBQUksQ0FBQyxVQUFVLEdBQUcsb0JBQW9CLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEQsQ0FBQzs7O09BSEE7SUFVRCxzQkFBSSw2Q0FBVTthQUFkO1lBQ0UsSUFBSSxHQUFHLEdBQUcsdUNBQXFDLElBQUksQ0FBQyxTQUFXLENBQUM7WUFDaEUsSUFBSSxJQUFJLENBQUMsUUFBUTtnQkFBRSxHQUFHLElBQUksTUFBSSxJQUFJLENBQUMsUUFBVSxDQUFDO1lBQzlDLElBQUksSUFBSSxDQUFDLFNBQVM7Z0JBQUUsR0FBRyxJQUFJLHlCQUF5QixDQUFDO1lBQ3JELE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxvREFBaUI7YUFBckI7WUFDRSxJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sS0FBSyxRQUFRLEVBQUU7Z0JBQ3BDLE9BQU8sT0FBTyxDQUFDO2FBQ2hCO1lBQ0QsT0FBVSxJQUFJLENBQUMsT0FBTyxPQUFJLENBQUM7UUFDN0IsQ0FBQzs7O09BQUE7SUFVRCw0Q0FBWSxHQUFaO1FBQ0UsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDbkI7SUFDSCxDQUFDO0lBR0QsNENBQVksR0FBWjtRQUNFLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztJQXRFUTtRQUFSLEtBQUssRUFBRTs7MkRBQXVCO0lBQ3RCO1FBQVIsS0FBSyxFQUFFOzt3REFBZTtJQUNkO1FBQVIsS0FBSyxFQUFFOzt1REFBYztJQUNiO1FBQVIsS0FBSyxFQUFFO2tDQUFXLFdBQVc7MkRBQU07SUFDM0I7UUFBUixLQUFLLEVBQUU7OzREQUFrQztJQUNqQztRQUFSLEtBQUssRUFBRTs7dURBQWM7SUFDYjtRQUFSLEtBQUssRUFBRTs7MERBQXlCO0lBR2pDO1FBREMsS0FBSyxFQUFFOzs7MERBR1A7SUFNRDtRQURDLEtBQUssRUFBRTs7OzZEQUdQO0lBTUQ7UUFEQyxLQUFLLEVBQUU7OzswREFHUDtJQUtTO1FBQVQsTUFBTSxFQUFFOzt3REFBa0M7SUFDakM7UUFBVCxNQUFNLEVBQUU7O3dEQUFrQztJQUNqQztRQUFULE1BQU0sRUFBRTs7eURBQW1DO0lBRzVDO1FBREMsV0FBVyxDQUFDLE9BQU8sQ0FBQzs7OzJEQU1wQjtJQWlCRDtRQURDLFlBQVksQ0FBQyxZQUFZLENBQUM7Ozs7NkRBSzFCO0lBR0Q7UUFEQyxZQUFZLENBQUMsWUFBWSxDQUFDOzs7OzZEQUsxQjtJQXZFVSxxQkFBcUI7UUFSakMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLDB5Q0FBNEM7WUFFNUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7WUFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O1NBQ2hELENBQUM7T0FDVyxxQkFBcUIsQ0F3RWpDO0lBQUQsNEJBQUM7Q0FBQSxBQXhFRCxJQXdFQztTQXhFWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdExpc3RlbmVyLFxuICBIb3N0QmluZGluZyxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIFRlbXBsYXRlUmVmLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSwgY29lcmNlTnVtYmVyUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuXG5pbXBvcnQgeyBOb3RpZmljYXRpb25TdHlsZVR5cGUgfSBmcm9tICcuL25vdGlmaWNhdGlvbi1zdHlsZS10eXBlLmVudW0nO1xuXG5AQ29tcG9uZW50KHtcbiAgZXhwb3J0QXM6ICduZ3hOb3RpZmljYXRpb24nLFxuICBzZWxlY3RvcjogJ25neC1ub3RpZmljYXRpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vbm90aWZpY2F0aW9uLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbm90aWZpY2F0aW9uLmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvbkNvbXBvbmVudCB7XG4gIEBJbnB1dCgpIGNzc0NsYXNzOiBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcbiAgQElucHV0KCkgYm9keTogc3RyaW5nO1xuICBASW5wdXQoKSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgQElucHV0KCkgc3R5bGVUeXBlOiBOb3RpZmljYXRpb25TdHlsZVR5cGU7XG4gIEBJbnB1dCgpIGljb246IHN0cmluZztcbiAgQElucHV0KCkgdGltZW91dDogZmFsc2UgfCBudW1iZXI7XG5cbiAgQElucHV0KClcbiAgZ2V0IHNob3dDbG9zZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2hvd0Nsb3NlO1xuICB9XG4gIHNldCBzaG93Q2xvc2Uoc2hvd0Nsb3NlKSB7XG4gICAgdGhpcy5fc2hvd0Nsb3NlID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHNob3dDbG9zZSk7XG4gIH1cblxuICBASW5wdXQoKVxuICBnZXQgcGF1c2VPbkhvdmVyKCkge1xuICAgIHJldHVybiB0aGlzLl9wYXVzZU9uSG92ZXI7XG4gIH1cbiAgc2V0IHBhdXNlT25Ib3ZlcihwYXVzZU9uSG92ZXIpIHtcbiAgICB0aGlzLl9wYXVzZU9uSG92ZXIgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkocGF1c2VPbkhvdmVyKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIGdldCB0aW1lc3RhbXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWVzdGFtcDtcbiAgfVxuICBzZXQgdGltZXN0YW1wKHRpbWVzdGFtcCkge1xuICAgIHRoaXMuX3RpbWVzdGFtcCA9IGNvZXJjZU51bWJlclByb3BlcnR5KHRpbWVzdGFtcCk7XG4gIH1cblxuICBAT3V0cHV0KCkgY2xvc2UgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSBwYXVzZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQE91dHB1dCgpIHJlc3VtZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcbiAgZ2V0IGNzc0NsYXNzZXMoKTogc3RyaW5nIHtcbiAgICBsZXQgY2xzID0gYG5neC1ub3RpZmljYXRpb24gbmd4LW5vdGlmaWNhdGlvbi0ke3RoaXMuc3R5bGVUeXBlfWA7XG4gICAgaWYgKHRoaXMuY3NzQ2xhc3MpIGNscyArPSBgICR7dGhpcy5jc3NDbGFzc31gO1xuICAgIGlmICh0aGlzLnNob3dDbG9zZSkgY2xzICs9ICcgbm90aWZpY2F0aW9uLWNsb3NlYWJsZSc7XG4gICAgcmV0dXJuIGNscztcbiAgfVxuXG4gIGdldCBhbmltYXRpb25EdXJhdGlvbigpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMudGltZW91dCAhPT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiAnMzAwMHMnO1xuICAgIH1cbiAgICByZXR1cm4gYCR7dGhpcy50aW1lb3V0fW1zYDtcbiAgfVxuXG4gIHJlYWRvbmx5IE5vdGlmaWNhdGlvblN0eWxlVHlwZSA9IE5vdGlmaWNhdGlvblN0eWxlVHlwZTtcbiAgdGltZXI6IGFueTtcblxuICBwcml2YXRlIF9zaG93Q2xvc2U/OiBib29sZWFuO1xuICBwcml2YXRlIF9wYXVzZU9uSG92ZXI/OiBib29sZWFuO1xuICBwcml2YXRlIF90aW1lc3RhbXA/OiBudW1iZXI7XG5cbiAgQEhvc3RMaXN0ZW5lcignbW91c2VlbnRlcicpXG4gIG9uTW91c2VFbnRlcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5wYXVzZU9uSG92ZXIpIHtcbiAgICAgIHRoaXMucGF1c2UuZW1pdCgpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlbGVhdmUnKVxuICBvbk1vdXNlTGVhdmUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMucGF1c2VPbkhvdmVyKSB7XG4gICAgICB0aGlzLnJlc3VtZS5lbWl0KCk7XG4gICAgfVxuICB9XG59XG4iXX0=