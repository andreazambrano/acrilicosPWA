import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, ContentChildren, QueryList, EventEmitter, ViewEncapsulation, AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TabComponent } from './tab.component';
var TabsComponent = /** @class */ (function () {
    function TabsComponent(_cdr) {
        this._cdr = _cdr;
        this.selectTab = new EventEmitter();
        // For backwards compat... user selectTab instead.
        this.select = this.selectTab;
        this._destroy$ = new Subject();
    }
    Object.defineProperty(TabsComponent.prototype, "index", {
        get: function () {
            var tabs = this.tabs.toArray();
            return tabs.findIndex(function (tab) { return tab.active; });
        },
        enumerable: true,
        configurable: true
    });
    TabsComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        var tabs = this.tabs.toArray();
        var actives = this.tabs.filter(function (t) { return t.active; });
        if (actives.length > 1) {
            console.error("Multiple active tabs set 'active'");
        }
        else if (!actives.length && tabs.length) {
            setTimeout(function () {
                tabs[0].active = true;
                tabs[0].detectChanges();
                _this._cdr.markForCheck();
            });
        }
        this.tabs.changes.pipe(takeUntil(this._destroy$)).subscribe(function () { return _this._cdr.markForCheck(); });
    };
    TabsComponent.prototype.ngOnDestroy = function () {
        this._destroy$.next();
        this._destroy$.complete();
    };
    TabsComponent.prototype.tabClicked = function (activeTab) {
        this.tabs.forEach(function (tab) { return (tab.active = false); });
        activeTab.active = true;
        this.tabs.forEach(function (tab) { return tab.detectChanges(); });
        this._cdr.markForCheck();
        this.selectTab.emit(activeTab);
    };
    TabsComponent.prototype.move = function (offset) {
        var tabs = this.tabs.toArray();
        for (var i = this.index + offset; i < tabs.length && i >= 0; i += offset) {
            var tab = tabs[i];
            if (tab && !tab.disabled) {
                this.tabClicked(tabs[i]);
                return;
            }
        }
    };
    TabsComponent.prototype.next = function () {
        this.move(1);
    };
    TabsComponent.prototype.prev = function () {
        this.move(-1);
    };
    TabsComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TabsComponent.prototype, "vertical", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], TabsComponent.prototype, "selectTab", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], TabsComponent.prototype, "select", void 0);
    __decorate([
        ContentChildren(TabComponent),
        __metadata("design:type", QueryList)
    ], TabsComponent.prototype, "tabs", void 0);
    TabsComponent = __decorate([
        Component({
            exportAs: 'ngxTabs',
            selector: 'ngx-tabs',
            template: "<section>\n  <ul class=\"ngx-tabs-list list-reset\" [class.tabs-vertical]=\"vertical\" [class.tabs-horizontal]=\"!vertical\">\n    <li *ngFor=\"let tab of tabs\" class=\"ngx-tab\" [class.disabled]=\"tab.disabled\" [class.active]=\"tab.active\">\n      <button (click)=\"tabClicked(tab)\" [disabled]=\"tab.disabled\">\n        <ng-container *ngTemplateOutlet=\"tab.labelTemplate; context: { $implicit: tab }\"> </ng-container>\n      </button>\n    </li>\n  </ul>\n  <div class=\"ngx-tab-content\">\n    <ng-content></ng-content>\n  </div>\n</section>\n",
            host: {
                class: 'ngx-tabs'
            },
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".ngx-tabs{margin-bottom:2em;display:block}.ngx-tabs .ngx-tabs-list{display:block;border-bottom:2px solid #313847}.ngx-tabs .ngx-tabs-list li{display:inline-block}.ngx-tabs .ngx-tabs-list li.active button,.ngx-tabs .ngx-tabs-list li.active button:focus,.ngx-tabs .ngx-tabs-list li.active button:hover{color:#cfcfcf;border-width:0}.ngx-tabs .ngx-tabs-list li.active button:not([disabled])::after,.ngx-tabs .ngx-tabs-list li:hover button:not([disabled])::after{-webkit-transform:scale(1);transform:scale(1)}.ngx-tabs .ngx-tabs-list li button{border:none;color:#cdd2dd;background:0 0;outline:0;box-shadow:none;box-sizing:border-box;display:inline-block;margin:0;padding:.35em .75em;position:relative;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;font:inherit;font-size:1em;bottom:-1px}.ngx-tabs .ngx-tabs-list li button:not([disabled]):hover{border:none;color:#cfcfcf;background:0 0;opacity:1}.ngx-tabs .ngx-tabs-list li button::after{content:'';background:#1483ff;height:2px;position:absolute;width:100%;left:0;bottom:-1px;-webkit-transition:250ms;transition:250ms;-webkit-transform:scale(0);transform:scale(0);color:#cfcfcf}.ngx-tabs .ngx-tab-content{padding:10px}"]
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef])
    ], TabsComponent);
    return TabsComponent;
}());
export { TabsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFicy90YWJzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLGVBQWUsRUFDZixTQUFTLEVBQ1QsWUFBWSxFQUNaLGlCQUFpQixFQUNqQixnQkFBZ0IsRUFDaEIsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBYS9DO0lBZ0JFLHVCQUE2QixJQUF1QjtRQUF2QixTQUFJLEdBQUosSUFBSSxDQUFtQjtRQWIxQyxjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN6QyxrREFBa0Q7UUFDeEMsV0FBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFTakIsY0FBUyxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUFFTSxDQUFDO0lBUHhELHNCQUFJLGdDQUFLO2FBQVQ7WUFDRSxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2pDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsQ0FBQyxNQUFNLEVBQVYsQ0FBVSxDQUFDLENBQUM7UUFDM0MsQ0FBQzs7O09BQUE7SUFNRCwwQ0FBa0IsR0FBbEI7UUFBQSxpQkFlQztRQWRDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDakMsSUFBTSxPQUFPLEdB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LFFBQVEsRUFBRSxVQUFVO1lBQ3BCLG9qQkFBb0M7WUFDcEMsSUFBSSxFQUFFO2dCQUNKLEtBQUssRUFBRSxVQUFVO2FBQ2xCO1lBQ0QsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7WUFFckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O1NBQ2hELENBQUM7eUNBaUJtQyxpQkFBaUI7T0FoQnpDLGFBQWEsQ0FvRXpCO0lBQUQsb0JBQUM7Q0FBQSxBQXBFRCxJQW9FQztTQXBFWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIFF1ZXJ5TGlzdCxcbiAgRXZlbnRFbWl0dGVyLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBPbkRlc3Ryb3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFRhYkNvbXBvbmVudCB9IGZyb20gJy4vdGFiLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBleHBvcnRBczogJ25neFRhYnMnLFxuICBzZWxlY3RvcjogJ25neC10YWJzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RhYnMuY29tcG9uZW50Lmh0bWwnLFxuICBob3N0OiB7XG4gICAgY2xhc3M6ICduZ3gtdGFicydcbiAgfSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgc3R5bGVVcmxzOiBbJy4vdGFicy5jb21wb25lbnQuc2NzcyddLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBUYWJzQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgQElucHV0KCkgdmVydGljYWw6IGJvb2xlYW47XG5cbiAgQE91dHB1dCgpIHNlbGVjdFRhYiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXQuLi4gdXNlciBzZWxlY3RUYWIgaW5zdGVhZC5cbiAgQE91dHB1dCgpIHNlbGVjdCA9IHRoaXMuc2VsZWN0VGFiO1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oVGFiQ29tcG9uZW50KSByZWFkb25seSB0YWJzOiBRdWVyeUxpc3Q8VGFiQ29tcG9uZW50PjtcblxuICBnZXQgaW5kZXgoKTogbnVtYmVyIHtcbiAgICBjb25zdCB0YWJzID0gdGhpcy50YWJzLnRvQXJyYXkoKTtcbiAgICByZXR1cm4gdGFicy5maW5kSW5kZXgodGFiID0+IHRhYi5hY3RpdmUpO1xuICB9XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgX2NkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIGNvbnN0IHRhYnMgPSB0aGlzLnRhYnMudG9BcnJheSgpO1xuICAgIGNvbnN0IGFjdGl2ZXMgPSB0aGlzLnRhYnMuZmlsdGVyKHQgPT4gdC5hY3RpdmUpO1xuXG4gICAgaWYgKGFjdGl2ZXMubGVuZ3RoID4gMSkge1xuICAgICAgY29uc29sZS5lcnJvcihgTXVsdGlwbGUgYWN0aXZlIHRhYnMgc2V0ICdhY3RpdmUnYCk7XG4gICAgfSBlbHNlIGlmICghYWN0aXZlcy5sZW5ndGggJiYgdGFicy5sZW5ndGgpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0YWJzWzBdLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRhYnNbMF0uZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnRhYnMuY2hhbmdlcy5waXBlKHRha2VVbnRpbCh0aGlzLl9kZXN0cm95JCkpLnN1YnNjcmliZSgoKSA9PiB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCkpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fZGVzdHJveSQubmV4dCgpO1xuICAgIHRoaXMuX2Rlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gIH1cblxuICB0YWJDbGlja2VkKGFjdGl2ZVRhYjogVGFiQ29tcG9uZW50KTogdm9pZCB7XG4gICAgdGhpcy50YWJzLmZvckVhY2godGFiID0+ICh0YWIuYWN0aXZlID0gZmFsc2UpKTtcblxuICAgIGFjdGl2ZVRhYi5hY3RpdmUgPSB0cnVlO1xuICAgIHRoaXMudGFicy5mb3JFYWNoKHRhYiA9PiB0YWIuZGV0ZWN0Q2hhbmdlcygpKTtcbiAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG5cbiAgICB0aGlzLnNlbGVjdFRhYi5lbWl0KGFjdGl2ZVRhYik7XG4gIH1cblxuICBtb3ZlKG9mZnNldDogbnVtYmVyKSB7XG4gICAgY29uc3QgdGFicyA9IHRoaXMudGFicy50b0FycmF5KCk7XG4gICAgZm9yIChsZXQgaSA9IHRoaXMuaW5kZXggKyBvZmZzZXQ7IGkgPCB0YWJzLmxlbmd0aCAmJiBpID49IDA7IGkgKz0gb2Zmc2V0KSB7XG4gICAgICBjb25zdCB0YWIgPSB0YWJzW2ldO1xuICAgICAgaWYgKHRhYiAmJiAhdGFiLmRpc2FibGVkKSB7XG4gICAgICAgIHRoaXMudGFiQ2xpY2tlZCh0YWJzW2ldKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5leHQoKTogdm9pZCB7XG4gICAgdGhpcy5tb3ZlKDEpO1xuICB9XG5cbiAgcHJldigpOiB2b2lkIHtcbiAgICB0aGlzLm1vdmUoLTEpO1xuICB9XG59XG4iXX0=