import { __assign, __decorate, __metadata, __values } from "tslib";
import { Injectable, NgZone } from '@angular/core';
import * as Mousetrap from 'mousetrap';
import { Subject } from 'rxjs';
import { HotkeyStatus } from './hotkey-status.enum';
var hotkeys = {};
var hotkeyChangedSource = new Subject();
var isMac = /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
var tags = ['INPUT', 'SELECT', 'TEXTAREA'];
/*tslint:disable*/
var map = {
    command: '\u2318',
    shift: '\u21E7',
    left: '\u2190',
    right: '\u2192',
    up: '\u2191',
    down: '\u2193',
    return: '\u23CE',
    backspace: '\u232B' // âŒ«
};
/*tslint:enable*/
function _getDisplay(combo) {
    var e_1, _a;
    var keys = combo.split('+');
    var result = [];
    try {
        for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
            var k = keys_1_1.value;
            if (k === 'mod') {
                result.push(isMac ? map.command : /* istanbul ignore next */ 'ctrl');
                continue;
            }
            var mapped = map[k];
            result.push(mapped || k);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
}
export function _add(combo, opts) {
    opts.status = opts.status || HotkeyStatus.Active;
    opts.keys = _getDisplay(combo);
    opts.visible = opts.visible !== undefined ? opts.visible : true;
    opts.allowIn = Array.isArray(opts.allowIn) ? opts.allowIn.map(function (tag) { return tag.toUpperCase(); }) : [];
    var mousetrap = new Mousetrap();
    if (opts.allowIn.length) {
        /* istanbul ignore next */
        mousetrap.stopCallback = function (_, element) {
            if (!tags.includes(element.tagName) || opts.allowIn.includes(element.tagName)) {
                return false;
            }
            return true;
        };
    }
    mousetrap.bind(combo, callback);
    if (hotkeys[combo] === undefined) {
        hotkeys[combo] = [];
    }
    hotkeys[combo].push(opts);
    hotkeyChangedSource.next(hotkeys);
    /* istanbul ignore next */
    function callback(event) {
        if (event.preventDefault) {
            event.preventDefault();
        }
        else {
            // internet explorer
            event.returnValue = false;
        }
        if (opts && opts.status === HotkeyStatus.Active) {
            opts.zone.run(function () {
                opts.callback(event);
            });
        }
    }
}
export function _suspend(comp) {
    var e_2, _a;
    for (var comb in hotkeys) {
        var hotkeyList = hotkeys[comb];
        try {
            for (var hotkeyList_1 = (e_2 = void 0, __values(hotkeyList)), hotkeyList_1_1 = hotkeyList_1.next(); !hotkeyList_1_1.done; hotkeyList_1_1 = hotkeyList_1.next()) {
                var hotkey = hotkeyList_1_1.value;
                if (hotkey.component === comp) {
                    hotkey.status = HotkeyStatus.Suspended;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (hotkeyList_1_1 && !hotkeyList_1_1.done && (_a = hotkeyList_1.return)) _a.call(hotkeyList_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    hotkeyChangedSource.next(hotkeys);
}
export function _pauseOthers(comp) {
    var e_3, _a;
    for (var comb in hotkeys) {
        var hotkeyList = hotkeys[comb];
        try {
            for (var hotkeyList_2 = (e_3 = void 0, __values(hotkeyList)), hotkeyList_2_1 = hotkeyList_2.next(); !hotkeyList_2_1.done; hotkeyList_2_1 = hotkeyList_2.next()) {
                var hotkey = hotkeyList_2_1.value;
                if (hotkey.component !== comp) {
                    hotkey.status = "*" + hotkey.status;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (hotkeyList_2_1 && !hotkeyList_2_1.done && (_a = hotkeyList_2.return)) _a.call(hotkeyList_2);
            }
            finally { if (e_3) throw e_3.error; }
        }
    }
    hotkeyChangedSource.next(hotkeys);
}
export function _unpauseOthers(comp) {
    var e_4, _a;
    for (var comb in hotkeys) {
        var hotkeyList = hotkeys[comb];
        try {
            for (var hotkeyList_3 = (e_4 = void 0, __values(hotkeyList)), hotkeyList_3_1 = hotkeyList_3.next(); !hotkeyList_3_1.done; hotkeyList_3_1 = hotkeyList_3.next()) {
                var hotkey = hotkeyList_3_1.value;
                if (hotkey.component !== comp && hotkey.status[0] === '*') {
                    hotkey.status = hotkey.status.replace('*', '');
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (hotkeyList_3_1 && !hotkeyList_3_1.done && (_a = hotkeyList_3.return)) _a.call(hotkeyList_3);
            }
            finally { if (e_4) throw e_4.error; }
        }
    }
    hotkeyChangedSource.next(hotkeys);
}
export function _activate(comp) {
    var e_5, _a;
    for (var comb in hotkeys) {
        var hotkeyList = hotkeys[comb];
        try {
            for (var hotkeyList_4 = (e_5 = void 0, __values(hotkeyList)), hotkeyList_4_1 = hotkeyList_4.next(); !hotkeyList_4_1.done; hotkeyList_4_1 = hotkeyList_4.next()) {
                var hotkey = hotkeyList_4_1.value;
                if (hotkey.component === comp) {
                    hotkey.status = HotkeyStatus.Active;
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (hotkeyList_4_1 && !hotkeyList_4_1.done && (_a = hotkeyList_4.return)) _a.call(hotkeyList_4);
            }
            finally { if (e_5) throw e_5.error; }
        }
    }
    hotkeyChangedSource.next(hotkeys);
}
export function _deregister(comp) {
    for (var comb in hotkeys) {
        var hotkeyList = hotkeys[comb];
        for (var i = 0; i < hotkeyList.length; i++) {
            if (hotkeyList[i].component === comp) {
                hotkeyList[i].status = HotkeyStatus.Disabled;
                hotkeyList.splice(hotkeyList.indexOf(hotkeyList[i]), 1);
            }
        }
        if (!hotkeyList.length) {
            Mousetrap.unbind(comb);
        }
    }
    hotkeyChangedSource.next(hotkeys);
}
export function Hotkey(key, description, options) {
    return function (target, name) {
        var oldInit = target.ngOnInit;
        target.ngOnInit = function () {
            var _this = this;
            if (oldInit)
                oldInit.bind(this)();
            _add(key, __assign({ callback: /* istanbul ignore next */ function () {
                    target[name].bind(_this)();
                }, description: description, component: this, zone: new NgZone({ enableLongStackTrace: false }) }, options));
        };
        var oldDestroy = target.ngOnDestroy;
        target.ngOnDestroy = function () {
            if (oldDestroy)
                oldDestroy.bind(this)();
            _deregister(this);
        };
    };
}
var HotkeysService = /** @class */ (function () {
    function HotkeysService(ngZone) {
        this.ngZone = ngZone;
        this.suspend = _suspend;
        this.activate = _activate;
        this.deregister = _deregister;
        this.pauseOthers = _pauseOthers;
        this.unpauseOthers = _unpauseOthers;
        this.changeEvent = hotkeyChangedSource.asObservable();
    }
    Object.defineProperty(HotkeysService.prototype, "hotkeys", {
        get: function () {
            return hotkeys;
        },
        enumerable: true,
        configurable: true
    });
    HotkeysService.prototype.add = function (combo, opts) {
        _add(combo, __assign({ zone: this.ngZone }, opts));
    };
    HotkeysService.prototype.clear = function () {
        hotkeys = {};
        Mousetrap.reset();
    };
    HotkeysService.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    HotkeysService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [NgZone])
    ], HotkeysService);
    return HotkeysService;
}());
export { HotkeysService };
//# sourceMappingURL=data:application/json;base64,