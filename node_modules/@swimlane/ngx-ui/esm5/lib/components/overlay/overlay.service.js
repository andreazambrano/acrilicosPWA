import { __decorate, __metadata, __read, __spread } from "tslib";
import { Injectable, EventEmitter } from '@angular/core';
import { InjectionService } from '../../services/injection/injection.service';
import { OverlayComponent } from './overlay.component';
var OverlayService = /** @class */ (function () {
    function OverlayService(injectionService) {
        this.injectionService = injectionService;
        // list of components that will close by clicking the overlay
        this.triggerComponents = [];
        this.click = new EventEmitter();
    }
    Object.defineProperty(OverlayService.prototype, "instance", {
        get: function () {
            if (this.component)
                return this.component.instance;
        },
        enumerable: true,
        configurable: true
    });
    OverlayService.prototype.show = function (options) {
        if (options === void 0) { options = {}; }
        if (!options.triggerComponent) {
            throw new Error('ngx-ui OverlayService.show: triggerComponent missing ');
        }
        if (!this.component) {
            this.component = this.injectComponent();
            this.instance.click.subscribe(this.onClick.bind(this));
        }
        this.triggerComponents.push({
            component: options.triggerComponent,
            zIndex: options.zIndex
        });
        this.component.instance.visible = true;
        this.updateZIndex();
        return this.component;
    };
    OverlayService.prototype.hide = function () {
        if (this.triggerComponents.length === 0) {
            this.component.instance.visible = false;
        }
    };
    OverlayService.prototype.destroy = function () {
        var _this = this;
        if (this.component) {
            // destroy is called like this to trigger
            // proper lifecycle events like animations
            this.hide();
            setTimeout(function () {
                // <--- new dialog is being created during this timeout.
                if (_this.component && _this.triggerComponents.length === 0) {
                    _this.component.destroy();
                    _this.component = undefined;
                }
            }, 100);
        }
    };
    OverlayService.prototype.injectComponent = function () {
        return this.injectionService.appendComponent(OverlayComponent);
    };
    OverlayService.prototype.onClick = function () {
        if (this.triggerComponents.length > 0) {
            var lastIdx = this.triggerComponents.length - 1;
            var triggerComponent = this.triggerComponents[lastIdx];
            this.click.emit(triggerComponent.component);
        }
    };
    OverlayService.prototype.removeTriggerComponent = function (component) {
        var idx = this.triggerComponents.findIndex(function (c) { return c.component === component; });
        if (idx !== -1) {
            this.triggerComponents.splice(idx, 1);
        }
        this.updateZIndex();
        if (this.triggerComponents.length === 0) {
            this.destroy();
        }
    };
    OverlayService.prototype.updateZIndex = function () {
        if (this.triggerComponents.length === 0) {
            return;
        }
        var indexes = this.triggerComponents.map(function (tc) { return tc.zIndex; });
        var zIndex = Math.max.apply(Math, __spread(indexes)) - 1;
        this.instance.zIndex = zIndex;
    };
    OverlayService.ctorParameters = function () { return [
        { type: InjectionService }
    ]; };
    OverlayService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [InjectionService])
    ], OverlayService);
    return OverlayService;
}());
export { OverlayService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3aW1sYW5lL25neC11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL292ZXJsYXkvb3ZlcmxheS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFnQixZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDOUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHdkQ7SUFXRSx3QkFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFSdEQsNkRBQTZEO1FBQzdELHNCQUFpQixHQUFVLEVBQUUsQ0FBQztRQUM5QixVQUFLLEdBQVEsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQU15QixDQUFDO0lBSjFELHNCQUFJLG9DQUFRO2FBQVo7WUFDRSxJQUFJLElBQUksQ0FBQyxTQUFTO2dCQUFFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7UUFDckQsQ0FBQzs7O09BQUE7SUFJRCw2QkFBSSxHQUFKLFVBQUssT0FBaUI7UUFBakIsd0JBQUEsRUFBQSxZQUFpQjtRQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFO1lBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsdURBQXVELENBQUMsQ0FBQztTQUMxRTtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3hDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3hEO1FBRUQsSUFBSSxDQUFDLGlCQUFpQixD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LFVBQVUsRUFBRTt5Q0FZMkIsZ0JBQWdCO09BWDNDLGNBQWMsQ0F3RjFCO0lBQUQscUJBQUM7Q0FBQSxBQXhGRCxJQXdGQztTQXhGWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgQ29tcG9uZW50UmVmLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSW5qZWN0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2luamVjdGlvbi9pbmplY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBPdmVybGF5Q29tcG9uZW50IH0gZnJvbSAnLi9vdmVybGF5LmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPdmVybGF5U2VydmljZSB7XG4gIGNvbXBvbmVudDogQ29tcG9uZW50UmVmPE92ZXJsYXlDb21wb25lbnQ+O1xuXG4gIC8vIGxpc3Qgb2YgY29tcG9uZW50cyB0aGF0IHdpbGwgY2xvc2UgYnkgY2xpY2tpbmcgdGhlIG92ZXJsYXlcbiAgdHJpZ2dlckNvbXBvbmVudHM6IGFueVtdID0gW107XG4gIGNsaWNrOiBhbnkgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgZ2V0IGluc3RhbmNlKCkge1xuICAgIGlmICh0aGlzLmNvbXBvbmVudCkgcmV0dXJuIHRoaXMuY29tcG9uZW50Lmluc3RhbmNlO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3Rpb25TZXJ2aWNlOiBJbmplY3Rpb25TZXJ2aWNlKSB7fVxuXG4gIHNob3cob3B0aW9uczogYW55ID0ge30pIHtcbiAgICBpZiAoIW9wdGlvbnMudHJpZ2dlckNvbXBvbmVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCduZ3gtdWkgT3ZlcmxheVNlcnZpY2Uuc2hvdzogdHJpZ2dlckNvbXBvbmVudCBtaXNzaW5nICcpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuY29tcG9uZW50KSB7XG4gICAgICB0aGlzLmNvbXBvbmVudCA9IHRoaXMuaW5qZWN0Q29tcG9uZW50KCk7XG4gICAgICB0aGlzLmluc3RhbmNlLmNsaWNrLnN1YnNjcmliZSh0aGlzLm9uQ2xpY2suYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyQ29tcG9uZW50cy5wdXNoKHtcbiAgICAgIGNvbXBvbmVudDogb3B0aW9ucy50cmlnZ2VyQ29tcG9uZW50LFxuICAgICAgekluZGV4OiBvcHRpb25zLnpJbmRleFxuICAgIH0pO1xuXG4gICAgdGhpcy5jb21wb25lbnQuaW5zdGFuY2UudmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy51cGRhdGVaSW5kZXgoKTtcblxuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudDtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKHRoaXMudHJpZ2dlckNvbXBvbmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudC5pbnN0YW5jZS52aXNpYmxlID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5jb21wb25lbnQpIHtcbiAgICAgIC8vIGRlc3Ryb3kgaXMgY2FsbGVkIGxpa2UgdGhpcyB0byB0cmlnZ2VyXG4gICAgICAvLyBwcm9wZXIgbGlmZWN5Y2xlIGV2ZW50cyBsaWtlIGFuaW1hdGlvbnNcbiAgICAgIHRoaXMuaGlkZSgpO1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgLy8gPC0tLSBuZXcgZGlhbG9nIGlzIGJlaW5nIGNyZWF0ZWQgZHVyaW5nIHRoaXMgdGltZW91dC5cbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50ICYmIHRoaXMudHJpZ2dlckNvbXBvbmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5jb21wb25lbnQuZGVzdHJveSgpO1xuICAgICAgICAgIHRoaXMuY29tcG9uZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9LCAxMDApO1xuICAgIH1cbiAgfVxuXG4gIGluamVjdENvbXBvbmVudCgpOiBDb21wb25lbnRSZWY8T3ZlcmxheUNvbXBvbmVudD4ge1xuICAgIHJldHVybiB0aGlzLmluamVjdGlvblNlcnZpY2UuYXBwZW5kQ29tcG9uZW50KE92ZXJsYXlDb21wb25lbnQpO1xuICB9XG5cbiAgb25DbGljaygpIHtcbiAgICBpZiAodGhpcy50cmlnZ2VyQ29tcG9uZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBsYXN0SWR4ID0gdGhpcy50cmlnZ2VyQ29tcG9uZW50cy5sZW5ndGggLSAxO1xuICAgICAgY29uc3QgdHJpZ2dlckNvbXBvbmVudCA9IHRoaXMudHJpZ2dlckNvbXBvbmVudHNbbGFzdElkeF07XG4gICAgICB0aGlzLmNsaWNrLmVtaXQodHJpZ2dlckNvbXBvbmVudC5jb21wb25lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZVRyaWdnZXJDb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgY29uc3QgaWR4ID0gdGhpcy50cmlnZ2VyQ29tcG9uZW50cy5maW5kSW5kZXgoYyA9PiBjLmNvbXBvbmVudCA9PT0gY29tcG9uZW50KTtcbiAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgdGhpcy50cmlnZ2VyQ29tcG9uZW50cy5zcGxpY2UoaWR4LCAxKTtcbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVpJbmRleCgpO1xuXG4gICAgaWYgKHRoaXMudHJpZ2dlckNvbXBvbmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVaSW5kZXgoKSB7XG4gICAgaWYgKHRoaXMudHJpZ2dlckNvbXBvbmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ZXMgPSB0aGlzLnRyaWdnZXJDb21wb25lbnRzLm1hcCh0YyA9PiB0Yy56SW5kZXgpO1xuICAgIGNvbnN0IHpJbmRleCA9IE1hdGgubWF4KC4uLmluZGV4ZXMpIC0gMTtcbiAgICB0aGlzLmluc3RhbmNlLnpJbmRleCA9IHpJbmRleDtcbiAgfVxufVxuIl19