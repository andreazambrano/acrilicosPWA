import { __decorate, __metadata } from "tslib";
import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
/**
 * Overlay Component for Drawer/Dialogs
 */
var OverlayComponent = /** @class */ (function () {
    function OverlayComponent(cdr) {
        this.cdr = cdr;
        this.click = new EventEmitter();
        this._visible = false;
        this._zIndex = 990;
    }
    Object.defineProperty(OverlayComponent.prototype, "visible", {
        get: function () {
            return this._visible;
        },
        set: function (val) {
            this._visible = coerceBooleanProperty(val);
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OverlayComponent.prototype, "zIndex", {
        get: function () {
            return this._zIndex;
        },
        set: function (val) {
            this._zIndex = coerceNumberProperty(val);
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OverlayComponent.prototype, "animationState", {
        get: function () {
            return this.visible ? 'active' : 'inactive';
        },
        enumerable: true,
        configurable: true
    });
    OverlayComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], OverlayComponent.prototype, "visible", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], OverlayComponent.prototype, "zIndex", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], OverlayComponent.prototype, "click", void 0);
    OverlayComponent = __decorate([
        Component({
            exportAs: 'ngxOverlay',
            selector: 'ngx-overlay',
            template: "<div (click)=\"click.emit(true)\" [style.zIndex]=\"zIndex\" [@overlayTransition]=\"animationState\" class=\"ngx-overlay\">\n  <ng-content></ng-content>\n</div>\n",
            animations: [
                trigger('overlayTransition', [
                    state('active', style({
                        opacity: 0.8,
                        visibility: 'visible'
                    })),
                    state('inactive', style({
                        visibility: 'hidden',
                        opacity: 0
                    })),
                    transition('* => active', [animate('100ms ease-in')]),
                    transition('* => inactive', [animate('100ms ease-out')]),
                    transition('* => void', [
                        style({
                            opacity: 0,
                            visibility: 'hidden',
                            'pointer-events': 'none'
                        }),
                        animate('100ms ease-out')
                    ])
                ])
            ],
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".ngx-overlay{position:fixed;top:0;left:0;bottom:0;right:0;width:100%;overflow:hidden;height:100%;background-color:#000;opacity:0;visibility:hidden;text-align:center;line-height:100vh}"]
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef])
    ], OverlayComponent);
    return OverlayComponent;
}());
export { OverlayComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvb3ZlcmxheS9vdmVybGF5LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRixPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBQ04saUJBQWlCLEVBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXBGOztHQUVHO0FBcUNIO0lBNEJFLDBCQUE2QixHQUFzQjtRQUF0QixRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQVR6QyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQU10QyxhQUFRLEdBQVksS0FBSyxDQUFDO1FBQzFCLFlBQU8sR0FBVyxHQUFHLENBQUM7SUFFd0IsQ0FBQztJQTFCdkQsc0JBQUkscUNBQU87YUFBWDtZQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2QixDQUFDO2FBQ0QsVUFBWSxHQUFZO1lBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDM0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMxQixDQUFDOzs7T0FKQTtJQU9ELHNCQUFJLG9DQUFNO2FBQVY7WUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQzthQUNELFVBQVcsR0FBVztZQUNwQixJQUFJLENBQUMsT0FBTyxHQUFHLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3pDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDMUIsQ0FBQzs7O09BSkE7SUFRRCxzQkFBSSw0Q0FBYzthQUFsQjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7UUFDOUMsQ0FBQzs7O09BQUE7O2dCQUtpQyxpQkFBaUI7O0lBMUJuRDtRQURDLEtBQUssRUFBRTs7O21EQUdQO0lBT0Q7UUFEQyxLQUFLLEVBQUU7OztrREFHUDtJQU1TO1FBQVQsTUFBTSxFQUFFOzttREFBcUM7SUFuQm5DLGdCQUFnQjtRQXBDNUIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLFlBQVk7WUFDdEIsUUFBUSxFQUFFLGFBQWE7WUFDdkIsNktBQXVDO1lBRXZDLFVBQVUsRUFBRTtnQkFDVixPQUFPLENBQUMsbUJBQW1CLEVBQUU7b0JBQzNCLEtBQUssQ0FDSCxRQUFRLEVBQ1IsS0FBSyxDQUFDO3dCQUNKLE9BQU8sRUFBRSxHQUFHO3dCQUNaLFVBQVUsRUFBRSxTQUFTO3FCQUN0QixDQUFDLENBQ0g7b0JBQ0QsS0FBSyxDQUNILFVBQVUsRUFDVixLQUFLLENBQUM7d0JBQ0osVUFBVSxFQUFFLFFBQVE7d0JBQ3BCLE9BQU8sRUFBRSxDQUFDO3FCQUNYLENBQUMsQ0FDSDtvQkFDRCxVQUFVLENBQUMsYUFBYSxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7b0JBQ3JELFVBQVUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO29CQUN4RCxVQUFVLENBQUMsV0FBVyxFQUFFO3dCQUN0QixLQUFLLENBQUM7NEJBQ0osT0FBTyxFQUFFLENBQUM7NEJBQ1YsVUFBVSxFQUFFLFFBQVE7NEJBQ3BCLGdCQUFnQixFQUFFLE1BQU07eUJBQ3pCLENBQUM7d0JBQ0YsT0FBTyxDQUFDLGdCQUFnQixDQUFDO3FCQUMxQixDQUFDO2lCQUNILENBQUM7YUFDSDtZQUNELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO1lBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztTQUNoRCxDQUFDO3lDQTZCa0MsaUJBQWlCO09BNUJ4QyxnQkFBZ0IsQ0E2QjVCO0lBQUQsdUJBQUM7Q0FBQSxBQTdCRCxJQTZCQztTQTdCWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhbmltYXRlLCBzdGF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIFZpZXdFbmNhcHN1bGF0aW9uXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5LCBjb2VyY2VOdW1iZXJQcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5cbi8qKlxuICogT3ZlcmxheSBDb21wb25lbnQgZm9yIERyYXdlci9EaWFsb2dzXG4gKi9cbkBDb21wb25lbnQoe1xuICBleHBvcnRBczogJ25neE92ZXJsYXknLFxuICBzZWxlY3RvcjogJ25neC1vdmVybGF5JyxcbiAgdGVtcGxhdGVVcmw6ICcuL292ZXJsYXkuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9vdmVybGF5LmNvbXBvbmVudC5zY3NzJ10sXG4gIGFuaW1hdGlvbnM6IFtcbiAgICB0cmlnZ2VyKCdvdmVybGF5VHJhbnNpdGlvbicsIFtcbiAgICAgIHN0YXRlKFxuICAgICAgICAnYWN0aXZlJyxcbiAgICAgICAgc3R5bGUoe1xuICAgICAgICAgIG9wYWNpdHk6IDAuOCxcbiAgICAgICAgICB2aXNpYmlsaXR5OiAndmlzaWJsZSdcbiAgICAgICAgfSlcbiAgICAgICksXG4gICAgICBzdGF0ZShcbiAgICAgICAgJ2luYWN0aXZlJyxcbiAgICAgICAgc3R5bGUoe1xuICAgICAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgfSlcbiAgICAgICksXG4gICAgICB0cmFuc2l0aW9uKCcqID0+IGFjdGl2ZScsIFthbmltYXRlKCcxMDBtcyBlYXNlLWluJyldKSxcbiAgICAgIHRyYW5zaXRpb24oJyogPT4gaW5hY3RpdmUnLCBbYW5pbWF0ZSgnMTAwbXMgZWFzZS1vdXQnKV0pLFxuICAgICAgdHJhbnNpdGlvbignKiA9PiB2b2lkJywgW1xuICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAgICAgICAncG9pbnRlci1ldmVudHMnOiAnbm9uZSdcbiAgICAgICAgfSksXG4gICAgICAgIGFuaW1hdGUoJzEwMG1zIGVhc2Utb3V0JylcbiAgICAgIF0pXG4gICAgXSlcbiAgXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgT3ZlcmxheUNvbXBvbmVudCB7XG4gIEBJbnB1dCgpXG4gIGdldCB2aXNpYmxlKCkge1xuICAgIHJldHVybiB0aGlzLl92aXNpYmxlO1xuICB9XG4gIHNldCB2aXNpYmxlKHZhbDogYm9vbGVhbikge1xuICAgIHRoaXMuX3Zpc2libGUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsKTtcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIGdldCB6SW5kZXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3pJbmRleDtcbiAgfVxuICBzZXQgekluZGV4KHZhbDogbnVtYmVyKSB7XG4gICAgdGhpcy5fekluZGV4ID0gY29lcmNlTnVtYmVyUHJvcGVydHkodmFsKTtcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIEBPdXRwdXQoKSBjbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICBnZXQgYW5pbWF0aW9uU3RhdGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy52aXNpYmxlID8gJ2FjdGl2ZScgOiAnaW5hY3RpdmUnO1xuICB9XG5cbiAgcHJpdmF0ZSBfdmlzaWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF96SW5kZXg6IG51bWJlciA9IDk5MDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG59XG4iXX0=