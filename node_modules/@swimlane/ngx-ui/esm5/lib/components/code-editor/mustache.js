import CodeMirror from 'codemirror';
// Adds mustache as an overlay to text/html
CodeMirror.defineMode('mustache', 
/* istanbul ignore next */ function (config, parserConfig) {
    var mustacheOverlay = {
        token: function (stream, _) {
            var ch;
            if (stream.match('{{')) {
                // tslint:disable-next-line:no-conditional-assignment
                while ((ch = stream.next()) != null)
                    if (ch === '}' && stream.next() === '}') {
                        stream.eat('}');
                        return 'mustache';
                    }
            }
            while (stream.next() != null && !stream.match('{{', false)) {
                continue;
            }
            return null;
        }
    };
    return CodeMirror.overlayMode(CodeMirror.getMode(config, parserConfig.backdrop || 'text/html'), mustacheOverlay);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVzdGFjaGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvY29kZS1lZGl0b3IvbXVzdGFjaGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxVQUFVLE1BQU0sWUFBWSxDQUFDO0FBRXBDLDJDQUEyQztBQUMzQyxVQUFVLENBQUMsVUFBVSxDQUNuQixVQUFVO0FBQ1YsMEJBQTBCLENBQUMsVUFBUyxNQUFXLEVBQUUsWUFBaUI7SUFDaEUsSUFBTSxlQUFlLEdBQUc7UUFDdEIsS0FBSyxFQUFMLFVBQU0sTUFBVyxFQUFFLENBQU07WUFDdkIsSUFBSSxFQUFPLENBQUM7WUFDWixJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3RCLHFEQUFxRDtnQkFDckQsT0FBTyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxJQUFJO29CQUNqQyxJQUFJLEVBQUUsS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsRUFBRTt3QkFDdkMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDaEIsT0FBTyxVQUFVLENBQUM7cUJBQ25CO2FBQ0o7WUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRTtnQkFDMUQsU0FBUzthQUNWO1lBRUQsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO0tBQ0YsQ0FBQztJQUNGLE9BQU8sVUFBVSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsUUFBUSxJQUFJLFdBQVcsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ25ILENBQUMsQ0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvZGVNaXJyb3IgZnJvbSAnY29kZW1pcnJvcic7XG5cbi8vIEFkZHMgbXVzdGFjaGUgYXMgYW4gb3ZlcmxheSB0byB0ZXh0L2h0bWxcbkNvZGVNaXJyb3IuZGVmaW5lTW9kZShcbiAgJ211c3RhY2hlJyxcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZnVuY3Rpb24oY29uZmlnOiBhbnksIHBhcnNlckNvbmZpZzogYW55KSB7XG4gICAgY29uc3QgbXVzdGFjaGVPdmVybGF5ID0ge1xuICAgICAgdG9rZW4oc3RyZWFtOiBhbnksIF86IGFueSkge1xuICAgICAgICBsZXQgY2g6IGFueTtcbiAgICAgICAgaWYgKHN0cmVhbS5tYXRjaCgne3snKSkge1xuICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25kaXRpb25hbC1hc3NpZ25tZW50XG4gICAgICAgICAgd2hpbGUgKChjaCA9IHN0cmVhbS5uZXh0KCkpICE9IG51bGwpXG4gICAgICAgICAgICBpZiAoY2ggPT09ICd9JyAmJiBzdHJlYW0ubmV4dCgpID09PSAnfScpIHtcbiAgICAgICAgICAgICAgc3RyZWFtLmVhdCgnfScpO1xuICAgICAgICAgICAgICByZXR1cm4gJ211c3RhY2hlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoc3RyZWFtLm5leHQoKSAhPSBudWxsICYmICFzdHJlYW0ubWF0Y2goJ3t7JywgZmFsc2UpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDb2RlTWlycm9yLm92ZXJsYXlNb2RlKENvZGVNaXJyb3IuZ2V0TW9kZShjb25maWcsIHBhcnNlckNvbmZpZy5iYWNrZHJvcCB8fCAndGV4dC9odG1sJyksIG11c3RhY2hlT3ZlcmxheSk7XG4gIH1cbik7XG4iXX0=