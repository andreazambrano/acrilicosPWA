import { __decorate, __metadata, __read, __spread } from "tslib";
import { Component, Input, Output, EventEmitter, ViewEncapsulation, forwardRef, ViewChild, TemplateRef, ChangeDetectionStrategy } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import moment from 'moment-timezone';
import { DialogService } from '../dialog/dialog.service';
import { DateTimeType } from './date-time-type.enum';
import { InputComponent } from '../input';
var nextId = 0;
var DATE_TIME_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return DateTimeComponent; }),
    multi: true
};
var DateTimeComponent = /** @class */ (function () {
    function DateTimeComponent(dialogService) {
        this.dialogService = dialogService;
        this.id = "datetime-" + ++nextId;
        this.placeholder = '';
        this.inputFormats = ['L', "LT", 'L LT', moment.ISO_8601];
        this.change = new EventEmitter();
        this.displayValue = '';
        this.modes = ['millisecond', 'second', 'minute', 'hour', 'date', 'month', 'year'];
        this._disabled = false;
        this._autofocus = false;
        this.onTouchedCallback = function () {
            // placeholder
        };
        this.onChangeCallback = function () {
            // placeholder
        };
    }
    Object.defineProperty(DateTimeComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (disabled) {
            this._disabled = coerceBooleanProperty(disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTimeComponent.prototype, "tabindex", {
        get: function () {
            return this._tabindex;
        },
        set: function (tabindex) {
            this._tabindex = coerceNumberProperty(tabindex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTimeComponent.prototype, "autofocus", {
        get: function () {
            return this._autofocus;
        },
        set: function (autofocus) {
            this._autofocus = coerceBooleanProperty(autofocus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTimeComponent.prototype, "inputType", {
        get: function () {
            if (!this._inputType) {
                return DateTimeType.date;
            }
            return this._inputType;
        },
        set: function (val) {
            this._inputType = val;
            this.displayValue = this.getDisplayValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTimeComponent.prototype, "format", {
        get: function () {
            if (!this._format) {
                if (this.inputType === DateTimeType.date) {
                    return 'L';
                }
                else if (this.inputType === DateTimeType.datetime) {
                    return 'L LT';
                }
                else {
                    return 'LT';
                }
            }
            return this._format;
        },
        set: function (val) {
            this._format = val;
            this.displayValue = this.getDisplayValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateTimeComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (val) {
            var date;
            var isSame;
            if (val) {
                date = this.parseDate(val);
                var sameDiff = void 0;
                if (this.precision) {
                    sameDiff = this.precision;
                }
                else {
                    sameDiff = this.inputType === DateTimeType.date ? 'day' : 'second';
                }
                isSame = this._value && date.isSame(this._value, sameDiff);
            }
            else {
                // if we have a val and had no val before, ensure
                // we set the property correctly even if its same
                isSame = val === this._value;
            }
            if (val && date) {
                this.validate(date);
            }
            this._value = date && date.isValid() ? date.toDate() : val;
            if (!isSame) {
                this.onChangeCallback(val);
                this.change.emit(val);
            }
        },
        enumerable: true,
        configurable: true
    });
    DateTimeComponent.prototype.ngOnDestroy = function () {
        this.close();
    };
    DateTimeComponent.prototype.writeValue = function (val) {
        this.value = val;
        this.displayValue = this.getDisplayValue();
    };
    DateTimeComponent.prototype.onBlur = function () {
        this.onTouchedCallback();
        var value = this.parseDate(this.value);
        if (this.validate(value)) {
            var displayValue = this.getDisplayValue();
            if (this.input.value !== displayValue) {
                this.input.value = displayValue;
            }
        }
    };
    DateTimeComponent.prototype.open = function () {
        var value = moment(this._value);
        var isValid = value.isValid();
        this.setDialogDate(isValid ? value : new Date());
        this.dialog = this.dialogService.create({
            cssClass: 'ngx-date-time-dialog',
            template: this.calendarTpl,
            closeButton: false
        });
    };
    DateTimeComponent.prototype.apply = function () {
        this.value = this.dialogModel.toDate();
        this.displayValue = this.getDisplayValue();
        this.close();
    };
    DateTimeComponent.prototype.setDialogDate = function (date) {
        this.dialogModel = this.createMoment(date);
        this.hour = +this.dialogModel.format('hh');
        this.minute = this.dialogModel.format('mm');
        this.amPmVal = this.dialogModel.format('A');
    };
    DateTimeComponent.prototype.minuteChanged = function (newVal) {
        this.dialogModel = this.dialogModel.clone().minute(newVal);
        this.minute = this.dialogModel.format('mm');
    };
    DateTimeComponent.prototype.hourChanged = function (newVal) {
        newVal = +newVal % 12;
        if (this.amPmVal === 'PM') {
            newVal = 12 + newVal;
        }
        this.dialogModel = this.dialogModel.clone().hour(newVal);
        this.hour = +this.dialogModel.format('hh');
    };
    DateTimeComponent.prototype.selectCurrent = function () {
        this.setDialogDate(new Date());
    };
    DateTimeComponent.prototype.isCurrent = function () {
        var now = this.createMoment(new Date());
        if (this.inputType === 'time') {
            return now.hour() === this.dialogModel.hour() && now.minute() === this.dialogModel.minute();
        }
        return now.isSame(this.dialogModel, 'minute');
    };
    DateTimeComponent.prototype.clear = function () {
        this.value = undefined;
        this.displayValue = this.getDisplayValue();
        this.close();
    };
    DateTimeComponent.prototype.onAmPmChange = function (newVal) {
        var clone = this.dialogModel.clone();
        if (newVal === 'AM' && this.amPmVal === 'PM') {
            this.dialogModel = clone.subtract(12, 'h');
        }
        else if (newVal === 'PM' && this.amPmVal === 'AM') {
            this.dialogModel = clone.add(12, 'h');
        }
        this.amPmVal = this.dialogModel.format('A');
    };
    DateTimeComponent.prototype.getDayDisabled = function (date) {
        if (!date)
            return false;
        var isBeforeMin = this.minDate && date.isBefore(this.parseDate(this.minDate));
        var isAfterMax = this.maxDate && date.isAfter(this.parseDate(this.maxDate));
        return isBeforeMin || isAfterMax;
    };
    DateTimeComponent.prototype.isTimeDisabled = function (mode) {
        return this.modes.indexOf("" + this.precision) > this.modes.indexOf("" + mode);
    };
    DateTimeComponent.prototype.inputChanged = function (val) {
        var date = this.parseDate(val);
        this.value = date.isValid() ? date.toDate() : val;
    };
    DateTimeComponent.prototype.close = function () {
        if (!this.dialog)
            return;
        // tear down the dialog instance
        this.dialogService.destroy(this.dialog);
        var date = this.parseDate(this.value);
        this.validate(date);
    };
    DateTimeComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    DateTimeComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    DateTimeComponent.prototype.roundTo = function (val, key) {
        /* istanbul ignore if */
        if (!key || !val) {
            return val;
        }
        val = val.clone();
        var idx = this.modes.indexOf(key);
        if (idx > 0) {
            this.modes.forEach(function (mode, index) {
                if (index < idx) {
                    val = val[mode](mode === 'date' ? 1 : 0);
                }
            });
        }
        return val;
    };
    DateTimeComponent.prototype.validate = function (date) {
        var isValid = date.isValid();
        var outOfRange = this.getDayDisabled(date);
        var errorMsg = '';
        if (!isValid)
            errorMsg = 'Invalid Date';
        if (outOfRange)
            errorMsg = 'Date out of range';
        this.errorMsg = errorMsg;
        return isValid && !outOfRange;
    };
    DateTimeComponent.prototype.getDisplayValue = function () {
        // note same as {{ value | amTimeZone: timezone | amDateFormat: format }}
        if (!this.value) {
            return '';
        }
        var m = this.createMoment(this.value);
        return m.isValid() ? m.format(this.format) : '' + String(this.value);
    };
    DateTimeComponent.prototype.parseDate = function (date) {
        if (date instanceof Date) {
            /* istanbul ignore next */
            date = isNaN(date.getTime()) ? date.toString() : date.toISOString();
        }
        var inputFormats = __spread(this.inputFormats);
        if (this.format && !inputFormats.includes(this.format)) {
            inputFormats.unshift(this.format);
        }
        var m = this.timezone ? moment.tz(date, inputFormats, this.timezone) : moment(date, inputFormats);
        m = this.precision ? this.roundTo(m, this.precision) : m;
        return m;
    };
    DateTimeComponent.prototype.createMoment = function (date) {
        var m = moment(date).clone();
        m = this.timezone ? m.tz(this.timezone) : m;
        m = this.precision ? this.roundTo(m, this.precision) : m;
        return m;
    };
    DateTimeComponent.ctorParameters = function () { return [
        { type: DialogService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DateTimeComponent.prototype, "id", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DateTimeComponent.prototype, "name", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DateTimeComponent.prototype, "label", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DateTimeComponent.prototype, "hint", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DateTimeComponent.prototype, "placeholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DateTimeComponent.prototype, "minDate", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DateTimeComponent.prototype, "maxDate", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DateTimeComponent.prototype, "precision", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DateTimeComponent.prototype, "timezone", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], DateTimeComponent.prototype, "inputFormats", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DateTimeComponent.prototype, "disabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DateTimeComponent.prototype, "tabindex", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DateTimeComponent.prototype, "autofocus", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DateTimeComponent.prototype, "inputType", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], DateTimeComponent.prototype, "format", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], DateTimeComponent.prototype, "change", void 0);
    __decorate([
        ViewChild('dialogTpl', { static: true }),
        __metadata("design:type", TemplateRef)
    ], DateTimeComponent.prototype, "calendarTpl", void 0);
    __decorate([
        ViewChild('input', { static: true }),
        __metadata("design:type", InputComponent)
    ], DateTimeComponent.prototype, "input", void 0);
    DateTimeComponent = __decorate([
        Component({
            exportAs: 'ngxDateTime',
            selector: 'ngx-date-time',
            template: "<div class=\"ngx-date-time\">\n  <ng-template #dialogTpl>\n    <div class=\"selected-header text-center\">\n      <h1>\n        <span *ngIf=\"dialogModel && (inputType === 'datetime' || inputType === 'date')\">\n          {{ dialogModel | amTimeZone: timezone | amDateFormat: 'ddd, MMM D YYYY' }}\n          <small *ngIf=\"inputType === 'datetime'\">\n            {{ dialogModel | amTimeZone: timezone | amDateFormat: 'h:mm a' }}\n          </small>\n        </span>\n        <span *ngIf=\"dialogModel && inputType === 'time'\">\n          {{ dialogModel | amTimeZone: timezone | amDateFormat: 'h:mm a' }}\n        </span>\n        <span *ngIf=\"!dialogModel\">No value</span>\n      </h1>\n    </div>\n    <ngx-calendar\n      [id]=\"id + '-cal'\"\n      *ngIf=\"inputType === 'date' || inputType === 'datetime'\"\n      (change)=\"setDialogDate($event)\"\n      [minDate]=\"minDate\"\n      [maxDate]=\"maxDate\"\n      [ngModel]=\"dialogModel\"\n      [timezone]=\"timezone\"\n      [minView]=\"precision\"\n      name=\"calendar\"\n    >\n    </ngx-calendar>\n    <div class=\"time-row\" *ngIf=\"inputType === 'time' || inputType === 'datetime'\">\n      <div fxLayout=\"row\" fxLayoutGap=\"10px\" fxLayoutWrap=\"nowrap\" fxLayoutAlign=\"center baseline\">\n        <div fxFlex>\n          <ngx-input\n            type=\"number\"\n            hint=\"Hour\"\n            [id]=\"id + '-hour'\"\n            [ngModel]=\"hour\"\n            min=\"1\"\n            max=\"12\"\n            (change)=\"hourChanged($event)\"\n            [disabled]=\"isTimeDisabled('hour')\"\n          >\n          </ngx-input>\n        </div>\n        <div fxFlex>\n          <ngx-input\n            type=\"number\"\n            hint=\"Minute\"\n            [id]=\"id + '-minute'\"\n            [ngModel]=\"minute\"\n            min=\"0\"\n            max=\"59\"\n            (change)=\"minuteChanged($event)\"\n            [disabled]=\"isTimeDisabled('minute')\"\n          >\n          </ngx-input>\n        </div>\n        <div fxFlex>\n          <button\n            class=\"ampm\"\n            type=\"button\"\n            [class.selected]=\"amPmVal === 'AM'\"\n            (click)=\"onAmPmChange('AM')\"\n            [disabled]=\"isTimeDisabled('hour')\"\n          >\n            AM\n          </button>\n          <button\n            class=\"ampm\"\n            type=\"button\"\n            [class.selected]=\"amPmVal === 'PM'\"\n            (click)=\"onAmPmChange('PM')\"\n            [disabled]=\"isTimeDisabled('hour')\"\n          >\n            PM\n          </button>\n        </div>\n      </div>\n    </div>\n    <nav role=\"navigation\" class=\"ngx-dialog-footer\">\n      <div fxLayout=\"row\" fxLayoutWrap=\"nowrap\">\n        <div class=\"text-left\" fxFlex=\"1 1 50%\">\n          <button type=\"button\" class=\"btn btn-link today-btn\" (click)=\"selectCurrent()\" [hidden]=\"isCurrent()\">\n            Current\n          </button>\n        </div>\n        <div class=\"text-right\" fxFlex=\"1 1 50%\">\n          <button type=\"button\" class=\"btn btn-link clear-btn\" (click)=\"clear()\">Clear</button>\n          <button type=\"button\" class=\"btn btn-link apply-btn\" (click)=\"apply()\">Apply</button>\n        </div>\n      </div>\n    </nav>\n  </ng-template>\n  <ngx-input\n    #input\n    [id]=\"id + '-input'\"\n    [autocorrect]=\"false\"\n    [autocomplete]=\"false\"\n    [spellcheck]=\"false\"\n    [disabled]=\"disabled\"\n    [placeholder]=\"placeholder\"\n    [autofocus]=\"autofocus\"\n    [tabindex]=\"tabindex\"\n    [label]=\"label\"\n    [ngModel]=\"displayValue\"\n    (ngModelChange)=\"inputChanged($event)\"\n    (blur)=\"onBlur()\"\n  >\n    <ngx-input-hint>\n      <div fxLayout=\"row\" fxLayoutGap=\"10px\" fxLayoutWrap=\"nowrap\">\n        <div fxFlex *ngIf=\"hint\" class=\"text-left\">{{ hint }}</div>\n        <div *ngIf=\"errorMsg\" fxFlex class=\"text-right input-error\">{{ errorMsg }}</div>\n      </div>\n    </ngx-input-hint>\n  </ngx-input>\n  <button\n    title=\"Show date/time selector\"\n    type=\"button\"\n    [disabled]=\"disabled\"\n    (click)=\"open()\"\n    [ngClass]=\"{\n      'icon-calendar': inputType === 'date',\n      'icon-calendar-clock': inputType === 'datetime',\n      'icon-clock': inputType === 'time'\n    }\"\n    class=\"calendar-dialog-btn\"\n  ></button>\n</div>\n",
            providers: [DATE_TIME_VALUE_ACCESSOR],
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: ["input[type=number],input[type=password],input[type=tel],input[type=text],textarea{display:inline-block;box-sizing:border-box;outline:0}.form-input{background:#313847;border:1px solid #455066;color:#b6b6b6;-webkit-transition:box-shadow .2s;transition:box-shadow .2s;border-radius:0;font-size:13px;height:32px;line-height:32px;width:100%;padding:6px;margin-bottom:1em}.form-input::-webkit-input-placeholder{color:#647493}.form-input::-moz-placeholder{color:#647493}.form-input::-ms-input-placeholder{color:#647493}.form-input::placeholder{color:#647493}.form-input:focus{box-shadow:0 1px 5px 0 rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.12)}.form-input[disabled]{cursor:not-allowed;color:#363636}textarea.form-input{min-height:120px;line-height:1.3em}.ngx-date-time{position:relative}.ngx-date-time .calendar-dialog-btn{position:absolute;right:5px;height:30px;line-height:30px;top:-5px;color:#afb7c8;padding:20px 0;padding-top:calc(.7em + 8px);padding-bottom:calc(.7em + 8px)}.ngx-date-time .input-error{color:#ff4514}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog{padding:0!important;width:auto}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog h1{font-size:1.2rem;white-space:nowrap}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog h1 small{color:#cfcfcf}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .selected-header{padding:5px 20px;background:#1483ff;color:#cfcfcf}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .time-row{background:#1c2029;border:1px solid #2d3544;padding:8px 15px;margin-top:0}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .time-row .ngx-input{margin-top:0;padding-top:0}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .time-row .ngx-input .ngx-input-underline{background-color:#b6b6b6}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .time-row button.ampm{color:#5a6884}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .time-row button.ampm.selected{color:#fff}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-calendar{box-shadow:none}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-calendar .title-row{background:0 0}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-calendar .day-name-row{margin-top:0}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-dialog-footer{border:1px solid #2d3544;border-top:0;padding:.5rem 0}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-dialog-footer .btn{font-size:1em;color:#72819f;margin:0;padding:0}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-dialog-footer .today-btn{margin-left:15px;opacity:1;-webkit-transition:opacity .2s;transition:opacity .2s}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-dialog-footer .today-btn[hidden]{display:inline-block!important;opacity:0}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-dialog-footer .apply-btn{margin-right:15px;color:#479eff}.ngx-dialog .ngx-dialog-content.ngx-date-time-dialog .ngx-dialog-footer .clear-btn{margin-right:15px}"]
        }),
        __metadata("design:paramtypes", [DialogService])
    ], DateTimeComponent);
    return DateTimeComponent;
}());
export { DateTimeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10aW1lLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9kYXRlLXRpbWUvZGF0ZS10aW1lLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixpQkFBaUIsRUFDakIsVUFBVSxFQUNWLFNBQVMsRUFDVCxXQUFXLEVBR1gsdUJBQXVCLEVBQ3hCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVwRixPQUFPLE1BQU0sTUFBTSxpQkFBaUIsQ0FBQztBQUVyQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDekQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXJELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFMUMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBRWYsSUFBTSx3QkFBd0IsR0FBRztJQUMvQixPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLGlCQUFpQixFQUFqQixDQUFpQixDQUFDO0lBQ2hELEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQztBQVdGO0lBZ0lFLDJCQUE2QixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQS9IaEQsT0FBRSxHQUFXLGNBQVksRUFBRSxNQUFRLENBQUM7UUFJcEMsZ0JBQVcsR0FBVyxFQUFFLENBQUM7UUFPekIsaUJBQVksR0FBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FB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QU0sRUFBRTs7cURBQTRDO0lBR3JEO1FBREMsU0FBUyxDQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztrQ0FDbkIsV0FBVzswREFBYTtJQUc5QztRQURDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7a0NBQ3JCLGNBQWM7b0RBQUM7SUE5R3BCLGlCQUFpQjtRQVQ3QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsYUFBYTtZQUN2QixRQUFRLEVBQUUsZUFBZTtZQUN6Qixrd0lBQXlDO1lBRXpDLFNBQVMsRUFBRSxDQUFDLHdCQUF3QixDQUFDO1lBQ3JDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO1lBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztTQUNoRCxDQUFDO3lDQWlJNEMsYUFBYTtPQWhJOUMsaUJBQWlCLENBa1U3QjtJQUFELHdCQUFDO0NBQUEsQUFsVUQsSUFrVUM7U0FsVVksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBmb3J3YXJkUmVmLFxuICBWaWV3Q2hpbGQsXG4gIFRlbXBsYXRlUmVmLFxuICBPbkRlc3Ryb3ksXG4gIEVsZW1lbnRSZWYsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5LCBjb2VyY2VOdW1iZXJQcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5cbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50LXRpbWV6b25lJztcblxuaW1wb3J0IHsgRGlhbG9nU2VydmljZSB9IGZyb20gJy4uL2RpYWxvZy9kaWFsb2cuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRlVGltZVR5cGUgfSBmcm9tICcuL2RhdGUtdGltZS10eXBlLmVudW0nO1xuaW1wb3J0IHsgRGF0ZWxpa2UgfSBmcm9tICcuL2RhdGUtbGlrZS50eXBlJztcbmltcG9ydCB7IElucHV0Q29tcG9uZW50IH0gZnJvbSAnLi4vaW5wdXQnO1xuXG5sZXQgbmV4dElkID0gMDtcblxuY29uc3QgREFURV9USU1FX1ZBTFVFX0FDQ0VTU09SID0ge1xuICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gRGF0ZVRpbWVDb21wb25lbnQpLFxuICBtdWx0aTogdHJ1ZVxufTtcblxuQENvbXBvbmVudCh7XG4gIGV4cG9ydEFzOiAnbmd4RGF0ZVRpbWUnLFxuICBzZWxlY3RvcjogJ25neC1kYXRlLXRpbWUnLFxuICB0ZW1wbGF0ZVVybDogJy4vZGF0ZS10aW1lLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vZGF0ZS10aW1lLmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW0RBVEVfVElNRV9WQUxVRV9BQ0NFU1NPUl0sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIERhdGVUaW1lQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIEBJbnB1dCgpIGlkOiBzdHJpbmcgPSBgZGF0ZXRpbWUtJHsrK25leHRJZH1gO1xuICBASW5wdXQoKSBuYW1lOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGhpbnQ6IHN0cmluZztcbiAgQElucHV0KCkgcGxhY2Vob2xkZXI6IHN0cmluZyA9ICcnO1xuXG4gIEBJbnB1dCgpIG1pbkRhdGU6IHN0cmluZyB8IERhdGU7XG4gIEBJbnB1dCgpIG1heERhdGU6IHN0cmluZyB8IERhdGU7XG4gIEBJbnB1dCgpIHByZWNpc2lvbjogbW9tZW50LnVuaXRPZlRpbWUuU3RhcnRPZjtcblxuICBASW5wdXQoKSB0aW1lem9uZTogc3RyaW5nO1xuICBASW5wdXQoKSBpbnB1dEZvcm1hdHM6IGFueVtdID0gWydMJywgYExUYCwgJ0wgTFQnLCBtb21lbnQuSVNPXzg2MDFdO1xuXG4gIEBJbnB1dCgpXG4gIGdldCBkaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cbiAgc2V0IGRpc2FibGVkKGRpc2FibGVkKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkoZGlzYWJsZWQpO1xuICB9XG5cbiAgQElucHV0KClcbiAgZ2V0IHRhYmluZGV4KCkge1xuICAgIHJldHVybiB0aGlzLl90YWJpbmRleDtcbiAgfVxuICBzZXQgdGFiaW5kZXgodGFiaW5kZXgpIHtcbiAgICB0aGlzLl90YWJpbmRleCA9IGNvZXJjZU51bWJlclByb3BlcnR5KHRhYmluZGV4KTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIGdldCBhdXRvZm9jdXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2F1dG9mb2N1cztcbiAgfVxuICBzZXQgYXV0b2ZvY3VzKGF1dG9mb2N1cykge1xuICAgIHRoaXMuX2F1dG9mb2N1cyA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eShhdXRvZm9jdXMpO1xuICB9XG5cbiAgQElucHV0KClcbiAgZ2V0IGlucHV0VHlwZSgpOiBzdHJpbmcge1xuICAgIGlmICghdGhpcy5faW5wdXRUeXBlKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWVUeXBlLmRhdGU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9pbnB1dFR5cGU7XG4gIH1cbiAgc2V0IGlucHV0VHlwZSh2YWw6IHN0cmluZykge1xuICAgIHRoaXMuX2lucHV0VHlwZSA9IHZhbDtcbiAgICB0aGlzLmRpc3BsYXlWYWx1ZSA9IHRoaXMuZ2V0RGlzcGxheVZhbHVlKCk7XG4gIH1cblxuICBASW5wdXQoKVxuICBnZXQgZm9ybWF0KCk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLl9mb3JtYXQpIHtcbiAgICAgIGlmICh0aGlzLmlucHV0VHlwZSA9PT0gRGF0ZVRpbWVUeXBlLmRhdGUpIHtcbiAgICAgICAgcmV0dXJuICdMJztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pbnB1dFR5cGUgPT09IERhdGVUaW1lVHlwZS5kYXRldGltZSkge1xuICAgICAgICByZXR1cm4gJ0wgTFQnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICdMVCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2Zvcm1hdDtcbiAgfVxuICBzZXQgZm9ybWF0KHZhbDogc3RyaW5nKSB7XG4gICAgdGhpcy5fZm9ybWF0ID0gdmFsO1xuICAgIHRoaXMuZGlzcGxheVZhbHVlID0gdGhpcy5nZXREaXNwbGF5VmFsdWUoKTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cbiAgc2V0IHZhbHVlKHZhbDogRGF0ZSB8IHN0cmluZykge1xuICAgIGxldCBkYXRlOiBtb21lbnQuTW9tZW50O1xuICAgIGxldCBpc1NhbWU6IGJvb2xlYW47XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICBkYXRlID0gdGhpcy5wYXJzZURhdGUodmFsKTtcbiAgICAgIGxldCBzYW1lRGlmZjogbW9tZW50LnVuaXRPZlRpbWUuU3RhcnRPZjtcblxuICAgICAgaWYgKHRoaXMucHJlY2lzaW9uKSB7XG4gICAgICAgIHNhbWVEaWZmID0gdGhpcy5wcmVjaXNpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzYW1lRGlmZiA9IHRoaXMuaW5wdXRUeXBlID09PSBEYXRlVGltZVR5cGUuZGF0ZSA/ICdkYXknIDogJ3NlY29uZCc7XG4gICAgICB9XG5cbiAgICAgIGlzU2FtZSA9IHRoaXMuX3ZhbHVlICYmIGRhdGUuaXNTYW1lKHRoaXMuX3ZhbHVlLCBzYW1lRGlmZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIHdlIGhhdmUgYSB2YWwgYW5kIGhhZCBubyB2YWwgYmVmb3JlLCBlbnN1cmVcbiAgICAgIC8vIHdlIHNldCB0aGUgcHJvcGVydHkgY29ycmVjdGx5IGV2ZW4gaWYgaXRzIHNhbWVcbiAgICAgIGlzU2FtZSA9IHZhbCA9PT0gdGhpcy5fdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHZhbCAmJiBkYXRlKSB7XG4gICAgICB0aGlzLnZhbGlkYXRlKGRhdGUpO1xuICAgIH1cbiAgICB0aGlzLl92YWx1ZSA9IGRhdGUgJiYgZGF0ZS5pc1ZhbGlkKCkgPyBkYXRlLnRvRGF0ZSgpIDogdmFsO1xuXG4gICAgaWYgKCFpc1NhbWUpIHtcbiAgICAgIHRoaXMub25DaGFuZ2VDYWxsYmFjayh2YWwpO1xuICAgICAgdGhpcy5jaGFuZ2UuZW1pdCh2YWwpO1xuICAgIH1cbiAgfVxuXG4gIEBPdXRwdXQoKSBjaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZyB8IERhdGU+KCk7XG5cbiAgQFZpZXdDaGlsZCgnZGlhbG9nVHBsJywgeyBzdGF0aWM6IHRydWUgfSlcbiAgcmVhZG9ubHkgY2FsZW5kYXJUcGw6IFRlbXBsYXRlUmVmPEVsZW1lbnRSZWY+O1xuXG4gIEBWaWV3Q2hpbGQoJ2lucHV0JywgeyBzdGF0aWM6IHRydWUgfSlcbiAgcmVhZG9ubHkgaW5wdXQ6IElucHV0Q29tcG9uZW50O1xuXG4gIGVycm9yTXNnOiBzdHJpbmc7XG4gIGRpYWxvZzogYW55O1xuICBkaWFsb2dNb2RlbDogbW9tZW50Lk1vbWVudDtcbiAgaG91cjogbnVtYmVyO1xuICBtaW51dGU6IHN0cmluZztcbiAgYW1QbVZhbDogc3RyaW5nO1xuICBkaXNwbGF5VmFsdWUgPSAnJztcbiAgbW9kZXMgPSBbJ21pbGxpc2Vjb25kJywgJ3NlY29uZCcsICdtaW51dGUnLCAnaG91cicsICdkYXRlJywgJ21vbnRoJywgJ3llYXInXTtcblxuICBwcml2YXRlIF92YWx1ZTogRGF0ZSB8IHN0cmluZztcbiAgcHJpdmF0ZSBfZm9ybWF0OiBzdHJpbmc7XG4gIHByaXZhdGUgX2lucHV0VHlwZTogc3RyaW5nO1xuICBwcml2YXRlIF9kaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF9hdXRvZm9jdXM6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfdGFiaW5kZXg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGRpYWxvZ1NlcnZpY2U6IERpYWxvZ1NlcnZpY2UpIHt9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWw6IGFueSk6IHZvaWQge1xuICAgIHRoaXMudmFsdWUgPSB2YWw7XG4gICAgdGhpcy5kaXNwbGF5VmFsdWUgPSB0aGlzLmdldERpc3BsYXlWYWx1ZSgpO1xuICB9XG5cbiAgb25CbHVyKCkge1xuICAgIHRoaXMub25Ub3VjaGVkQ2FsbGJhY2soKTtcblxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5wYXJzZURhdGUodGhpcy52YWx1ZSk7XG4gICAgaWYgKHRoaXMudmFsaWRhdGUodmFsdWUpKSB7XG4gICAgICBjb25zdCBkaXNwbGF5VmFsdWUgPSB0aGlzLmdldERpc3BsYXlWYWx1ZSgpO1xuICAgICAgaWYgKHRoaXMuaW5wdXQudmFsdWUgIT09IGRpc3BsYXlWYWx1ZSkge1xuICAgICAgICB0aGlzLmlucHV0LnZhbHVlID0gZGlzcGxheVZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9wZW4oKTogdm9pZCB7XG4gICAgY29uc3QgdmFsdWUgPSBtb21lbnQodGhpcy5fdmFsdWUpO1xuICAgIGNvbnN0IGlzVmFsaWQgPSB2YWx1ZS5pc1ZhbGlkKCk7XG5cbiAgICB0aGlzLnNldERpYWxvZ0RhdGUoaXNWYWxpZCA/IHZhbHVlIDogbmV3IERhdGUoKSk7XG5cbiAgICB0aGlzLmRpYWxvZyA9IHRoaXMuZGlhbG9nU2VydmljZS5jcmVhdGUoe1xuICAgICAgY3NzQ2xhc3M6ICduZ3gtZGF0ZS10aW1lLWRpYWxvZycsXG4gICAgICB0ZW1wbGF0ZTogdGhpcy5jYWxlbmRhclRwbCxcbiAgICAgIGNsb3NlQnV0dG9uOiBmYWxzZVxuICAgIH0pO1xuICB9XG5cbiAgYXBwbHkoKTogdm9pZCB7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMuZGlhbG9nTW9kZWwudG9EYXRlKCk7XG4gICAgdGhpcy5kaXNwbGF5VmFsdWUgPSB0aGlzLmdldERpc3BsYXlWYWx1ZSgpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHNldERpYWxvZ0RhdGUoZGF0ZTogRGF0ZWxpa2UpIHtcbiAgICB0aGlzLmRpYWxvZ01vZGVsID0gdGhpcy5jcmVhdGVNb21lbnQoZGF0ZSk7XG4gICAgdGhpcy5ob3VyID0gK3RoaXMuZGlhbG9nTW9kZWwuZm9ybWF0KCdoaCcpO1xuICAgIHRoaXMubWludXRlID0gdGhpcy5kaWFsb2dNb2RlbC5mb3JtYXQoJ21tJyk7XG4gICAgdGhpcy5hbVBtVmFsID0gdGhpcy5kaWFsb2dNb2RlbC5mb3JtYXQoJ0EnKTtcbiAgfVxuXG4gIG1pbnV0ZUNoYW5nZWQobmV3VmFsOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmRpYWxvZ01vZGVsID0gdGhpcy5kaWFsb2dNb2RlbC5jbG9uZSgpLm1pbnV0ZShuZXdWYWwpO1xuICAgIHRoaXMubWludXRlID0gdGhpcy5kaWFsb2dNb2RlbC5mb3JtYXQoJ21tJyk7XG4gIH1cblxuICBob3VyQ2hhbmdlZChuZXdWYWw6IG51bWJlcik6IHZvaWQge1xuICAgIG5ld1ZhbCA9ICtuZXdWYWwgJSAxMjtcbiAgICBpZiAodGhpcy5hbVBtVmFsID09PSAnUE0nKSB7XG4gICAgICBuZXdWYWwgPSAxMiArIG5ld1ZhbDtcbiAgICB9XG4gICAgdGhpcy5kaWFsb2dNb2RlbCA9IHRoaXMuZGlhbG9nTW9kZWwuY2xvbmUoKS5ob3VyKG5ld1ZhbCk7XG4gICAgdGhpcy5ob3VyID0gK3RoaXMuZGlhbG9nTW9kZWwuZm9ybWF0KCdoaCcpO1xuICB9XG5cbiAgc2VsZWN0Q3VycmVudCgpOiB2b2lkIHtcbiAgICB0aGlzLnNldERpYWxvZ0RhdGUobmV3IERhdGUoKSk7XG4gIH1cblxuICBpc0N1cnJlbnQoKSB7XG4gICAgY29uc3Qgbm93ID0gdGhpcy5jcmVhdGVNb21lbnQobmV3IERhdGUoKSk7XG4gICAgaWYgKHRoaXMuaW5wdXRUeXBlID09PSAndGltZScpIHtcbiAgICAgIHJldHVybiBub3cuaG91cigpID09PSB0aGlzLmRpYWxvZ01vZGVsLmhvdXIoKSAmJiBub3cubWludXRlKCkgPT09IHRoaXMuZGlhbG9nTW9kZWwubWludXRlKCk7XG4gICAgfVxuICAgIHJldHVybiBub3cuaXNTYW1lKHRoaXMuZGlhbG9nTW9kZWwsICdtaW51dGUnKTtcbiAgfVxuXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kaXNwbGF5VmFsdWUgPSB0aGlzLmdldERpc3BsYXlWYWx1ZSgpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIG9uQW1QbUNoYW5nZShuZXdWYWw6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGNsb25lID0gdGhpcy5kaWFsb2dNb2RlbC5jbG9uZSgpO1xuICAgIGlmIChuZXdWYWwgPT09ICdBTScgJiYgdGhpcy5hbVBtVmFsID09PSAnUE0nKSB7XG4gICAgICB0aGlzLmRpYWxvZ01vZGVsID0gY2xvbmUuc3VidHJhY3QoMTIsICdoJyk7XG4gICAgfSBlbHNlIGlmIChuZXdWYWwgPT09ICdQTScgJiYgdGhpcy5hbVBtVmFsID09PSAnQU0nKSB7XG4gICAgICB0aGlzLmRpYWxvZ01vZGVsID0gY2xvbmUuYWRkKDEyLCAnaCcpO1xuICAgIH1cbiAgICB0aGlzLmFtUG1WYWwgPSB0aGlzLmRpYWxvZ01vZGVsLmZvcm1hdCgnQScpO1xuICB9XG5cbiAgZ2V0RGF5RGlzYWJsZWQoZGF0ZTogbW9tZW50Lk1vbWVudCk6IGJvb2xlYW4ge1xuICAgIGlmICghZGF0ZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgY29uc3QgaXNCZWZvcmVNaW4gPSB0aGlzLm1pbkRhdGUgJiYgZGF0ZS5pc0JlZm9yZSh0aGlzLnBhcnNlRGF0ZSh0aGlzLm1pbkRhdGUpKTtcbiAgICBjb25zdCBpc0FmdGVyTWF4ID0gdGhpcy5tYXhEYXRlICYmIGRhdGUuaXNBZnRlcih0aGlzLnBhcnNlRGF0ZSh0aGlzLm1heERhdGUpKTtcblxuICAgIHJldHVybiBpc0JlZm9yZU1pbiB8fCBpc0FmdGVyTWF4O1xuICB9XG5cbiAgaXNUaW1lRGlzYWJsZWQobW9kZTogbW9tZW50LnVuaXRPZlRpbWUuU3RhcnRPZik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm1vZGVzLmluZGV4T2YoYCR7dGhpcy5wcmVjaXNpb259YCkgPiB0aGlzLm1vZGVzLmluZGV4T2YoYCR7bW9kZX1gKTtcbiAgfVxuXG4gIGlucHV0Q2hhbmdlZCh2YWw6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGRhdGUgPSB0aGlzLnBhcnNlRGF0ZSh2YWwpO1xuICAgIHRoaXMudmFsdWUgPSBkYXRlLmlzVmFsaWQoKSA/IGRhdGUudG9EYXRlKCkgOiB2YWw7XG4gIH1cblxuICBjbG9zZSgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZGlhbG9nKSByZXR1cm47XG5cbiAgICAvLyB0ZWFyIGRvd24gdGhlIGRpYWxvZyBpbnN0YW5jZVxuICAgIHRoaXMuZGlhbG9nU2VydmljZS5kZXN0cm95KHRoaXMuZGlhbG9nKTtcblxuICAgIGNvbnN0IGRhdGUgPSB0aGlzLnBhcnNlRGF0ZSh0aGlzLnZhbHVlKTtcbiAgICB0aGlzLnZhbGlkYXRlKGRhdGUpO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjayA9IGZuO1xuICB9XG5cbiAgcHJpdmF0ZSByb3VuZFRvKHZhbDogbW9tZW50Lk1vbWVudCwga2V5OiBzdHJpbmcpOiBtb21lbnQuTW9tZW50IHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWtleSB8fCAhdmFsKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgICB2YWwgPSB2YWwuY2xvbmUoKTtcblxuICAgIGNvbnN0IGlkeCA9IHRoaXMubW9kZXMuaW5kZXhPZihrZXkpO1xuICAgIGlmIChpZHggPiAwKSB7XG4gICAgICB0aGlzLm1vZGVzLmZvckVhY2goKG1vZGUsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChpbmRleCA8IGlkeCkge1xuICAgICAgICAgIHZhbCA9IHZhbFttb2RlXShtb2RlID09PSAnZGF0ZScgPyAxIDogMCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZShkYXRlOiBtb21lbnQuTW9tZW50KSB7XG4gICAgY29uc3QgaXNWYWxpZCA9IGRhdGUuaXNWYWxpZCgpO1xuICAgIGNvbnN0IG91dE9mUmFuZ2UgPSB0aGlzLmdldERheURpc2FibGVkKGRhdGUpO1xuXG4gICAgbGV0IGVycm9yTXNnID0gJyc7XG4gICAgaWYgKCFpc1ZhbGlkKSBlcnJvck1zZyA9ICdJbnZhbGlkIERhdGUnO1xuICAgIGlmIChvdXRPZlJhbmdlKSBlcnJvck1zZyA9ICdEYXRlIG91dCBvZiByYW5nZSc7XG4gICAgdGhpcy5lcnJvck1zZyA9IGVycm9yTXNnO1xuXG4gICAgcmV0dXJuIGlzVmFsaWQgJiYgIW91dE9mUmFuZ2U7XG4gIH1cblxuICBwcml2YXRlIG9uVG91Y2hlZENhbGxiYWNrOiAoKSA9PiB2b2lkID0gKCkgPT4ge1xuICAgIC8vIHBsYWNlaG9sZGVyXG4gIH07XG5cbiAgcHJpdmF0ZSBvbkNoYW5nZUNhbGxiYWNrOiAoXzogYW55KSA9PiB2b2lkID0gKCkgPT4ge1xuICAgIC8vIHBsYWNlaG9sZGVyXG4gIH07XG5cbiAgcHJpdmF0ZSBnZXREaXNwbGF5VmFsdWUoKTogc3RyaW5nIHtcbiAgICAvLyBub3RlIHNhbWUgYXMge3sgdmFsdWUgfCBhbVRpbWVab25lOiB0aW1lem9uZSB8IGFtRGF0ZUZvcm1hdDogZm9ybWF0IH19XG4gICAgaWYgKCF0aGlzLnZhbHVlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGNvbnN0IG0gPSB0aGlzLmNyZWF0ZU1vbWVudCh0aGlzLnZhbHVlKTtcbiAgICByZXR1cm4gbS5pc1ZhbGlkKCkgPyBtLmZvcm1hdCh0aGlzLmZvcm1hdCkgOiAnJyArIFN0cmluZyh0aGlzLnZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VEYXRlKGRhdGU6IHN0cmluZyB8IERhdGUpOiBtb21lbnQuTW9tZW50IHtcbiAgICBpZiAoZGF0ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICBkYXRlID0gaXNOYU4oZGF0ZS5nZXRUaW1lKCkpID8gZGF0ZS50b1N0cmluZygpIDogZGF0ZS50b0lTT1N0cmluZygpO1xuICAgIH1cbiAgICBjb25zdCBpbnB1dEZvcm1hdHMgPSBbLi4udGhpcy5pbnB1dEZvcm1hdHNdO1xuICAgIGlmICh0aGlzLmZvcm1hdCAmJiAhaW5wdXRGb3JtYXRzLmluY2x1ZGVzKHRoaXMuZm9ybWF0KSkge1xuICAgICAgaW5wdXRGb3JtYXRzLnVuc2hpZnQodGhpcy5mb3JtYXQpO1xuICAgIH1cbiAgICBsZXQgbSA9IHRoaXMudGltZXpvbmUgPyBtb21lbnQudHooZGF0ZSwgaW5wdXRGb3JtYXRzLCB0aGlzLnRpbWV6b25lKSA6IG1vbWVudChkYXRlLCBpbnB1dEZvcm1hdHMpO1xuICAgIG0gPSB0aGlzLnByZWNpc2lvbiA/IHRoaXMucm91bmRUbyhtLCB0aGlzLnByZWNpc2lvbikgOiBtO1xuICAgIHJldHVybiBtO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVNb21lbnQoZGF0ZTogRGF0ZWxpa2UpOiBtb21lbnQuTW9tZW50IHtcbiAgICBsZXQgbSA9IG1vbWVudChkYXRlKS5jbG9uZSgpO1xuICAgIG0gPSB0aGlzLnRpbWV6b25lID8gbS50eih0aGlzLnRpbWV6b25lKSA6IG07XG4gICAgbSA9IHRoaXMucHJlY2lzaW9uID8gdGhpcy5yb3VuZFRvKG0sIHRoaXMucHJlY2lzaW9uKSA6IG07XG4gICAgcmV0dXJuIG07XG4gIH1cbn1cbiJdfQ==