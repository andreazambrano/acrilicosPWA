import { __decorate, __extends, __metadata } from "tslib";
import { Injectable, ComponentRef, Renderer2, RendererFactory2 } from '@angular/core';
import { InjectionService } from '../../services/injection/injection.service';
import { InjectionRegistryService } from '../../services/injection-registry/injection-registry.service';
import { DrawerComponent } from './drawer.component';
import { OverlayService } from '../overlay/overlay.service';
import { DrawerDirection } from './drawer-direction.enum';
var DrawerService = /** @class */ (function (_super) {
    __extends(DrawerService, _super);
    function DrawerService(injectionService, overlayService, rendererFactory) {
        var _this = _super.call(this, injectionService) || this;
        _this.injectionService = injectionService;
        _this.overlayService = overlayService;
        _this.rendererFactory = rendererFactory;
        _this.type = DrawerComponent;
        _this.defaults = {
            inputs: {
                direction: DrawerDirection.Left
            }
        };
        _this.zIndex = 995;
        _this.size = 80;
        _this.renderer = _this.rendererFactory.createRenderer(null, null);
        return _this;
    }
    DrawerService.prototype.create = function (options) {
        var component = _super.prototype.create.call(this, options);
        this.createSubscriptions(component, options.isRoot, options.parentContainer);
        return component;
    };
    DrawerService.prototype.destroy = function (component) {
        var _this = this;
        // race case clicking fast errors here
        if (component && component.instance) {
            component.instance.size = 0;
        }
        setTimeout(function () {
            _this.zIndex = _this.zIndex - 2;
            _this.size = _this.size + 10;
            _this.overlayService.removeTriggerComponent(component);
            _super.prototype.destroy.call(_this, component);
        }, 10);
    };
    DrawerService.prototype.assignDefaults = function (options) {
        options = _super.prototype.assignDefaults.call(this, options);
        if (!options.inputs.zIndex) {
            this.zIndex = this.overlayService.instance
                ? this.overlayService.instance.zIndex + 3
                : /* istanbul ignore next */ this.zIndex + 2;
            options.inputs.zIndex = this.zIndex;
        }
        this.size = this.size - 10;
        if (!options.inputs.size) {
            options.inputs.size = this.size;
        }
        return options;
    };
    DrawerService.prototype.createSubscriptions = function (component, isRoot, parentContainer) {
        var _this = this;
        if (isRoot === void 0) { isRoot = true; }
        if (isRoot) {
            this.overlayService.show({
                triggerComponent: component,
                zIndex: this.zIndex
            });
        }
        var closeSub;
        var overlaySub;
        var kill = function (c) {
            /* istanbul ignore if */
            if (component !== c) {
                return;
            }
            closeSub.unsubscribe();
            if (overlaySub) {
                overlaySub.unsubscribe();
            }
            if (_this.parentListenerFunc && _this.components.get(_this.type).length === 1) {
                _this.parentListenerFunc();
            }
            _this.destroy(component);
        };
        closeSub = component.instance.close.subscribe(kill.bind(this, component));
        if (component.instance.closeOnOutsideClick) {
            if (isRoot) {
                overlaySub = this.overlayService.click.subscribe(kill);
            }
            else {
                var components_1 = this.components.get(this.type);
                this.parentListenerFunc = this.renderer.listen(parentContainer, 'click', function (evt) {
                    /* istanbul ignore else */
                    if (evt.target === parentContainer) {
                        kill(components_1[components_1.length - 1]);
                    }
                });
            }
        }
    };
    DrawerService.ctorParameters = function () { return [
        { type: InjectionService },
        { type: OverlayService },
        { type: RendererFactory2 }
    ]; };
    DrawerService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [InjectionService,
            OverlayService,
            RendererFactory2])
    ], DrawerService);
    return DrawerService;
}(InjectionRegistryService));
export { DrawerService };
//# sourceMappingURL=data:application/json;base64,