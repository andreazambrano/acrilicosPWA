import { __decorate, __metadata, __values } from "tslib";
import { Component, Input, Output, EventEmitter, ViewChild, AfterViewInit, ElementRef, TemplateRef, ChangeDetectionStrategy } from '@angular/core';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { KeyboardKeys } from '../../enums';
import { containsFilter } from './contains-filter.util';
var SelectDropdownComponent = /** @class */ (function () {
    function SelectDropdownComponent(elementRef) {
        this.elementRef = elementRef;
        this.allowAdditionsText = 'Add Value';
        this.keyup = new EventEmitter();
        this.selection = new EventEmitter();
        this.close = new EventEmitter();
        this._filterCaseSensitive = false;
    }
    Object.defineProperty(SelectDropdownComponent.prototype, "tagging", {
        get: function () {
            return this._tagging;
        },
        set: function (tagging) {
            this._tagging = coerceBooleanProperty(tagging);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectDropdownComponent.prototype, "allowAdditions", {
        get: function () {
            return this._allowAdditions;
        },
        set: function (allowAdditions) {
            this._allowAdditions = coerceBooleanProperty(allowAdditions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectDropdownComponent.prototype, "filterable", {
        get: function () {
            return this._filterable;
        },
        set: function (filterable) {
            this._filterable = coerceBooleanProperty(filterable);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectDropdownComponent.prototype, "filterCaseSensitive", {
        get: function () {
            return this._filterCaseSensitive;
        },
        set: function (filterCaseSensitive) {
            this._filterCaseSensitive = coerceBooleanProperty(filterCaseSensitive);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectDropdownComponent.prototype, "focusIndex", {
        get: function () {
            return this._focusIndex;
        },
        set: function (val) {
            this._focusIndex = coerceNumberProperty(val);
            this.focusElement(this._focusIndex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectDropdownComponent.prototype, "filterQuery", {
        get: function () {
            return this._filterQuery;
        },
        set: function (val) {
            this._filterQuery = val;
            this.groups = this.calculateGroups(this.groupBy, this.options, val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectDropdownComponent.prototype, "groupBy", {
        get: function () {
            return this._groupBy;
        },
        set: function (val) {
            this._groupBy = val;
            this.groups = this.calculateGroups(val, this.options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectDropdownComponent.prototype, "options", {
        get: function () {
            return this._options;
        },
        set: function (val) {
            this.groups = this.calculateGroups(this.groupBy, val);
            this._options = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectDropdownComponent.prototype, "element", {
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectDropdownComponent.prototype, "isNotTemplate", {
        get: function () {
            return !(typeof this.allowAdditionsText === 'object' && this.allowAdditionsText instanceof TemplateRef);
        },
        enumerable: true,
        configurable: true
    });
    SelectDropdownComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.filterable && !this.tagging) {
            setTimeout(function () {
                _this.filterInput.nativeElement.focus();
            }, 5);
        }
    };
    SelectDropdownComponent.prototype.isSelected = function (option) {
        var _this = this;
        if (!this.selected || !this.selected.length)
            return false;
        var idx = this.selected.findIndex(function (o) {
            if (_this.identifier)
                return o[_this.identifier] === option.value[_this.identifier];
            return o === option.value;
        });
        return idx > -1;
    };
    SelectDropdownComponent.prototype.onInputKeyUp = function (event) {
        event.preventDefault();
        event.stopPropagation();
        var key = event.key;
        var value = event.target.value;
        if (key === KeyboardKeys.ESCAPE) {
            this.close.emit(true);
        }
        else if (event.key === KeyboardKeys.ARROW_DOWN) {
            ++this.focusIndex;
        }
        if (this.filterQuery !== value) {
            this.filterQuery = value;
        }
        this.keyup.emit({ event: event, value: value });
    };
    SelectDropdownComponent.prototype.onOptionKeyDown = function (event) {
        event.preventDefault();
        event.stopPropagation();
        var key = event.key;
        if (key === KeyboardKeys.ARROW_DOWN) {
            if (this.focusIndex < this.options.length - 1)
                ++this.focusIndex;
        }
        else if (key === KeyboardKeys.ARROW_UP) {
            if (this.focusIndex > 0)
                --this.focusIndex;
        }
        else if (key === KeyboardKeys.ENTER) {
            this.selection.emit(this.options[this.focusIndex]);
        }
    };
    SelectDropdownComponent.prototype.onAddClicked = function (event, value) {
        event.preventDefault();
        event.stopPropagation();
        this.selection.emit({ value: value, name: value });
        event.target.value = '';
        this.close.emit();
    };
    SelectDropdownComponent.prototype.focusElement = function (index) {
        var elements = this.element.getElementsByClassName('ngx-select-dropdown-option');
        var element = elements[index];
        if (element) {
            setTimeout(function () { return element.focus(); }, 5);
        }
    };
    SelectDropdownComponent.prototype.calculateGroups = function (groupBy, options, filter) {
        var e_1, _a;
        if (!options)
            return [];
        var filterOptions = { filterCaseSensitive: this.filterCaseSensitive };
        // no group by defined, skip and just return
        // empty group object...
        if (!groupBy) {
            if (filter) {
                // filter options
                options = options.filter(function (o) {
                    return containsFilter({ name: o.name, value: o.value }, filter, filterOptions);
                });
            }
            // need to map indexes
            options = options.map(function (option, index) {
                return { option: option, index: index };
            });
            return [{ options: options }];
        }
        var map = new Map();
        var i = 0;
        try {
            for (var options_1 = __values(options), options_1_1 = options_1.next(); !options_1_1.done; options_1_1 = options_1.next()) {
                var option = options_1_1.value;
                // only show items in filter criteria
                if (filter && !containsFilter({ name: option.name, value: option.value }, filter, filterOptions)) {
                    continue;
                }
                var group = option.value[groupBy];
                var opt = map.get(group);
                // need to map the true indexes
                var kv = { option: option, index: i++ };
                if (!opt) {
                    map.set(group, [kv]);
                }
                else {
                    opt.push(kv);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (options_1_1 && !options_1_1.done && (_a = options_1.return)) _a.call(options_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var result = [];
        map.forEach(function (value, key) {
            result.push({ name: key, options: value });
        });
        return result;
    };
    SelectDropdownComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], SelectDropdownComponent.prototype, "selected", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SelectDropdownComponent.prototype, "identifier", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SelectDropdownComponent.prototype, "filterPlaceholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SelectDropdownComponent.prototype, "filterEmptyPlaceholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SelectDropdownComponent.prototype, "emptyPlaceholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SelectDropdownComponent.prototype, "allowAdditionsText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], SelectDropdownComponent.prototype, "tagging", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], SelectDropdownComponent.prototype, "allowAdditions", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], SelectDropdownComponent.prototype, "filterable", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], SelectDropdownComponent.prototype, "filterCaseSensitive", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SelectDropdownComponent.prototype, "focusIndex", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], SelectDropdownComponent.prototype, "filterQuery", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], SelectDropdownComponent.prototype, "groupBy", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], SelectDropdownComponent.prototype, "options", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SelectDropdownComponent.prototype, "keyup", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SelectDropdownComponent.prototype, "selection", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SelectDropdownComponent.prototype, "close", void 0);
    __decorate([
        ViewChild('filterInput'),
        __metadata("design:type", ElementRef)
    ], SelectDropdownComponent.prototype, "filterInput", void 0);
    SelectDropdownComponent = __decorate([
        Component({
            exportAs: 'ngxSelectDropdown',
            selector: 'ngx-select-dropdown',
            template: "<div>\n  <div class=\"ngx-select-filter\" *ngIf=\"filterable && !tagging\">\n    <input\n      #filterInput\n      type=\"search\"\n      tabindex=\"\"\n      autocomplete=\"off\"\n      autocorrect=\"off\"\n      spellcheck=\"off\"\n      class=\"ngx-select-filter-input\"\n      [placeholder]=\"filterPlaceholder\"\n      (keyup)=\"onInputKeyUp($event)\"\n    />\n  </div>\n  <ul class=\"vertical-list ngx-select-dropdown-options\">\n    <li *ngFor=\"let group of groups\" class=\"ngx-select-option-group\">\n      <span class=\"ngx-select-option-group-name\" *ngIf=\"group.name\" [innerHTML]=\"group.name\"> </span>\n      <ul class=\"vertical-list ngx-select-dropdown-options\">\n        <li\n          *ngFor=\"let kv of group.options\"\n          class=\"ngx-select-dropdown-option\"\n          [class.disabled]=\"kv.option.disabled\"\n          [class.active]=\"kv.index === focusIndex\"\n          [class.selected]=\"isSelected(kv.option)\"\n          [hidden]=\"kv.option.hidden\"\n          tabindex=\"-1\"\n          (click)=\"selection.emit(kv.option)\"\n          (keydown)=\"onOptionKeyDown($event)\"\n        >\n          <ng-template\n            *ngIf=\"kv.option.optionTemplate\"\n            [ngTemplateOutlet]=\"kv.option.optionTemplate\"\n            [ngTemplateOutletContext]=\"{ option: kv.option }\"\n          >\n          </ng-template>\n          <span *ngIf=\"!kv.option.optionTemplate\" [innerHTML]=\"kv.option.name\"> </span>\n        </li>\n        <li\n          *ngIf=\"filterQuery && filterEmptyPlaceholder && !group.options?.length\"\n          class=\"ngx-select-empty-placeholder\"\n        >\n          <span class=\"ngx-select-empty-placeholder-text\" [innerHTML]=\"filterEmptyPlaceholder\"> </span>\n          <a\n            *ngIf=\"allowAdditions\"\n            href=\"#\"\n            class=\"ngx-select-empty-placeholder-add\"\n            (click)=\"onAddClicked($event, filterQuery)\"\n          >\n            <span *ngIf=\"isNotTemplate; else tpl\" [innerHTML]=\"allowAdditionsText\"> </span>\n            <ng-template #tpl>\n              <ng-container *ngTemplateOutlet=\"allowAdditionsText\"></ng-container>\n            </ng-template>\n          </a>\n        </li>\n        <li\n          *ngIf=\"!filterQuery && emptyPlaceholder && !group.options?.length\"\n          class=\"ngx-select-empty-placeholder\"\n          [innerHTML]=\"emptyPlaceholder\"\n        ></li>\n      </ul>\n    </li>\n  </ul>\n</div>\n",
            host: {
                class: 'ngx-select-dropdown',
                '[class.groupings]': 'groupBy'
            },
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SelectDropdownComponent);
    return SelectDropdownComponent;
}());
export { SelectDropdownComponent };
//# sourceMappingURL=data:application/json;base64,