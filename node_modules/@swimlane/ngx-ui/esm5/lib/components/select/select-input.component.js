import { __decorate, __metadata, __read, __spread, __values } from "tslib";
import { Component, Input, Output, EventEmitter, ViewChild, TemplateRef, ElementRef, ChangeDetectionStrategy } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { KeyboardKeys } from '../../enums';
var SelectInputComponent = /** @class */ (function () {
    function SelectInputComponent() {
        this.toggle = new EventEmitter();
        this.selection = new EventEmitter();
        this.activate = new EventEmitter();
        this.keyup = new EventEmitter();
        this.selectedOptions = [];
    }
    Object.defineProperty(SelectInputComponent.prototype, "autofocus", {
        get: function () {
            return this._autofocus;
        },
        set: function (autofocus) {
            this._autofocus = coerceBooleanProperty(autofocus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectInputComponent.prototype, "allowClear", {
        get: function () {
            return this._allowClear;
        },
        set: function (allowClear) {
            this._allowClear = coerceBooleanProperty(allowClear);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectInputComponent.prototype, "multiple", {
        get: function () {
            return this._multiple;
        },
        set: function (multiple) {
            this._multiple = coerceBooleanProperty(multiple);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectInputComponent.prototype, "tagging", {
        get: function () {
            return this._tagging;
        },
        set: function (tagging) {
            this._tagging = coerceBooleanProperty(tagging);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectInputComponent.prototype, "allowAdditions", {
        get: function () {
            return this._allowAdditions;
        },
        set: function (allowAdditions) {
            this._allowAdditions = coerceBooleanProperty(allowAdditions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectInputComponent.prototype, "disableDropdown", {
        get: function () {
            return this._disableDropdown;
        },
        set: function (disableDropdown) {
            this._disableDropdown = coerceBooleanProperty(disableDropdown);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectInputComponent.prototype, "selected", {
        get: function () {
            return this._selected;
        },
        set: function (val) {
            this._selected = val;
            this.selectedOptions = this.calcSelectedOptions(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectInputComponent.prototype, "caretVisible", {
        get: function () {
            if (this.disableDropdown)
                return false;
            if (this.tagging && (!this.options || !this.options.length))
                return false;
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectInputComponent.prototype, "isNotTemplate", {
        get: function () {
            return !(typeof this.selectCaret === 'object' && this.selectCaret instanceof TemplateRef);
        },
        enumerable: true,
        configurable: true
    });
    SelectInputComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.tagging && this.autofocus) {
            setTimeout(function () {
                _this.inputElement.nativeElement.focus();
            }, 5);
        }
    };
    SelectInputComponent.prototype.onKeyUp = function (event) {
        event.stopPropagation();
        var key = event.key;
        var value = event.target.value;
        if (key === KeyboardKeys.ENTER) {
            if (value !== '') {
                var hasSelection = this.selected.find(function (selection) {
                    return value === selection;
                });
                if (!hasSelection) {
                    var newSelections = __spread(this.selected, [value]);
                    this.selection.emit(newSelections);
                    event.target.value = '';
                }
            }
            event.preventDefault();
        }
        else if (key === KeyboardKeys.ESCAPE) {
            this.toggle.emit();
        }
        this.keyup.emit({ event: event, value: value });
    };
    SelectInputComponent.prototype.onKeyDown = function (event) {
        if (this.disableDropdown)
            return;
        event.stopPropagation();
        if (!this.tagging) {
            this.keyup.emit({ event: event });
        }
    };
    SelectInputComponent.prototype.onClick = function (event) {
        var _this = this;
        if (this.disableDropdown)
            return;
        this.activate.emit(event);
        if (this.tagging) {
            setTimeout(function () {
                _this.inputElement.nativeElement.focus();
            }, 5);
        }
    };
    SelectInputComponent.prototype.onOptionRemove = function (event, option) {
        var _this = this;
        event.stopPropagation();
        var newSelections = this.selected.filter(function (selection) {
            if (_this.identifier !== undefined) {
                return option.value[_this.identifier] !== selection[_this.identifier];
            }
            return option.value !== selection;
        });
        this.selection.emit(newSelections);
    };
    SelectInputComponent.prototype.calcSelectedOptions = function (selected) {
        var e_1, _a;
        var _this = this;
        var results = [];
        // result out if nothing here
        if (!selected)
            return results;
        var _loop_1 = function (selection) {
            var match = void 0;
            if (this_1.options) {
                match = this_1.options.find(function (option) {
                    if (_this.identifier) {
                        return selection[_this.identifier] === option.value[_this.identifier];
                    }
                    return selection === option.value;
                });
            }
            if ((this_1.tagging || this_1.allowAdditions) && !match) {
                match = { value: selection, name: selection };
            }
            if (match)
                results.push(match);
        };
        var this_1 = this;
        try {
            for (var selected_1 = __values(selected), selected_1_1 = selected_1.next(); !selected_1_1.done; selected_1_1 = selected_1.next()) {
                var selection = selected_1_1.value;
                _loop_1(selection);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (selected_1_1 && !selected_1_1.done && (_a = selected_1.return)) _a.call(selected_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return results;
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SelectInputComponent.prototype, "placeholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SelectInputComponent.prototype, "identifier", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], SelectInputComponent.prototype, "options", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SelectInputComponent.prototype, "label", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SelectInputComponent.prototype, "hint", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SelectInputComponent.prototype, "selectCaret", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SelectInputComponent.prototype, "requiredIndicator", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], SelectInputComponent.prototype, "autofocus", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], SelectInputComponent.prototype, "allowClear", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], SelectInputComponent.prototype, "multiple", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], SelectInputComponent.prototype, "tagging", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], SelectInputComponent.prototype, "allowAdditions", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], SelectInputComponent.prototype, "disableDropdown", null);
    __decorate([
        Input(),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], SelectInputComponent.prototype, "selected", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SelectInputComponent.prototype, "toggle", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SelectInputComponent.prototype, "selection", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SelectInputComponent.prototype, "activate", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SelectInputComponent.prototype, "keyup", void 0);
    __decorate([
        ViewChild('tagInput'),
        __metadata("design:type", ElementRef)
    ], SelectInputComponent.prototype, "inputElement", void 0);
    SelectInputComponent = __decorate([
        Component({
            exportAs: 'ngxSelectInput',
            selector: 'ngx-select-input',
            template: "<div tabindex=\"-1\" (keydown)=\"onKeyDown($event)\" class=\"ngx-select-input-box\" (click)=\"onClick($event)\">\n  <span *ngIf=\"label !== undefined\" class=\"ngx-select-label\">\n    <span [innerHTML]=\"label\"></span>\n    <span [innerHTML]=\"requiredIndicator\"></span>\n  </span>\n  <span\n    *ngIf=\"!selected?.length && placeholder !== undefined\"\n    class=\"ngx-select-placeholder\"\n    [innerHTML]=\"placeholder\"\n  >\n  </span>\n  <ul class=\"horizontal-list ngx-select-input-list\">\n    <li *ngFor=\"let option of selectedOptions\" class=\"ngx-select-input-option\" [class.disabled]=\"option.disabled\">\n      <ng-template\n        *ngIf=\"option.inputTemplate\"\n        [ngTemplateOutlet]=\"option.inputTemplate\"\n        [ngTemplateOutletContext]=\"{ option: option }\"\n      >\n      </ng-template>\n      <span *ngIf=\"!option.inputTemplate\" class=\"ngx-select-input-name\" [innerHTML]=\"option.name || option.value\">\n      </span>\n      <span\n        *ngIf=\"allowClear && (multiple || tagging) && !option.disabled\"\n        title=\"Remove Selection\"\n        class=\"ngx-select-clear icon-x\"\n        (click)=\"onOptionRemove($event, option)\"\n      >\n      </span>\n    </li>\n    <li *ngIf=\"tagging\" class=\"ngx-select-input-box-wrapper\">\n      <input\n        #tagInput\n        type=\"search\"\n        class=\"ng-select-text-box\"\n        tabindex=\"\"\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        spellcheck=\"off\"\n        (keyup)=\"onKeyUp($event)\"\n      />\n    </li>\n  </ul>\n</div>\n<div class=\"ngx-select-input-underline\">\n  <div class=\"underline-fill\"></div>\n</div>\n<div class=\"ngx-select-hint\">\n  <span *ngIf=\"hint !== undefined\" [innerHTML]=\"hint\"></span>\n  <ng-content select=\"ngx-input-hint\"></ng-content>\n</div>\n<span\n  *ngIf=\"allowClear && !multiple && !tagging && selectedOptions?.length\"\n  title=\"Clear Selections\"\n  class=\"ngx-select-clear icon-x\"\n  (click)=\"selection.emit([])\"\n>\n</span>\n<span\n  *ngIf=\"caretVisible\"\n  class=\"ngx-select-caret icon-arrow-down\"\n  [class.icon-arrow-down]=\"!selectCaret\"\n  (click)=\"toggle.emit()\"\n>\n  <span *ngIf=\"isNotTemplate; else tpl\" [innerHTML]=\"selectCaret\"> </span>\n  <ng-template #tpl>\n    <ng-container *ngTemplateOutlet=\"selectCaret\"></ng-container>\n  </ng-template>\n</span>\n",
            host: { class: 'ngx-select-input' },
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], SelectInputComponent);
    return SelectInputComponent;
}());
export { SelectInputComponent };
//# sourceMappingURL=data:application/json;base64,