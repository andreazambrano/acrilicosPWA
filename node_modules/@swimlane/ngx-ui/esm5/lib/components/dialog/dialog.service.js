import { __decorate, __extends, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { InjectionService } from '../../services/injection/injection.service';
import { InjectionRegistryService } from '../../services/injection-registry/injection-registry.service';
import { OverlayService } from '../overlay/overlay.service';
import { DialogComponent } from './dialog.component';
var DialogService = /** @class */ (function (_super) {
    __extends(DialogService, _super);
    function DialogService(injectionService, overlayService) {
        var _this = _super.call(this, injectionService) || this;
        _this.injectionService = injectionService;
        _this.overlayService = overlayService;
        _this.defaults = {
            inputs: {
                zIndex: 991,
                closeOnBlur: true,
                closeOnEscape: true,
                closeButton: true,
                showOverlay: true,
                visible: true
            }
        };
        _this.type = DialogComponent;
        _this.zIndex = 995;
        return _this;
    }
    DialogService.prototype.create = function (options) {
        var component = _super.prototype.create.call(this, options);
        this.createSubscriptions(component);
        return component;
    };
    DialogService.prototype.destroy = function (component) {
        var _this = this;
        var hasOverlay = component.instance.showOverlay;
        this.zIndex = this.zIndex - 2;
        if (hasOverlay) {
            this.overlayService.removeTriggerComponent(component);
        }
        setTimeout(function () {
            _super.prototype.destroy.call(_this, component);
        });
    };
    DialogService.prototype.createSubscriptions = function (triggerComponent) {
        var _this = this;
        var closeSub;
        var overlaySub;
        var kill = function (c) {
            /* istanbul ignore if */
            if (c !== triggerComponent) {
                return;
            }
            closeSub.unsubscribe();
            if (overlaySub)
                overlaySub.unsubscribe();
            _this.destroy(triggerComponent);
        };
        closeSub = triggerComponent.instance.close.subscribe(kill.bind(this, triggerComponent));
        var zIndex = this.zIndex;
        if (triggerComponent.instance.showOverlay) {
            setTimeout(function () {
                _this.overlayService.show({
                    triggerComponent: triggerComponent,
                    zIndex: zIndex
                });
                if (triggerComponent.instance.closeOnBlur) {
                    overlaySub = _this.overlayService.click.subscribe(kill);
                }
            });
        }
    };
    DialogService.prototype.assignDefaults = function (options) {
        options = _super.prototype.assignDefaults.call(this, options);
        /* istanbul ignore else */
        if (!options.zIndex) {
            this.zIndex = this.overlayService.instance ? this.overlayService.instance.zIndex + 3 : this.zIndex + 2;
            options.inputs.zIndex = this.zIndex;
        }
        return options;
    };
    DialogService.ctorParameters = function () { return [
        { type: InjectionService },
        { type: OverlayService }
    ]; };
    DialogService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [InjectionService, OverlayService])
    ], DialogService);
    return DialogService;
}(InjectionRegistryService));
export { DialogService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZGlhbG9nL2RpYWxvZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzlFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhEQUE4RCxDQUFDO0FBQ3hHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJckQ7SUFBd0QsaUNBQTJCO0lBZWpGLHVCQUFxQixnQkFBa0MsRUFBVyxjQUE4QjtRQUFoRyxZQUNFLGtCQUFNLGdCQUFnQixDQUFDLFNBQ3hCO1FBRm9CLHNCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFBVyxvQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFkdkYsY0FBUSxHQUFrQjtZQUNqQyxNQUFNLEVBQUU7Z0JBQ04sTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsV0FBVyxFQUFFLElBQUk7Z0JBQ2pCLGFBQWEsRUFBRSxJQUFJO2dCQUNuQixXQUFXLEVBQUUsSUFBSTtnQkFDakIsV0FBVyxFQUFFLElBQUk7Z0JBQ2pCLE9BQU8sRUFBRSxJQUFJO2FBQ2Q7U0FDRixDQUFDO1FBRVEsVUFBSSxHQUFRLGVBQWUsQ0FBQztRQUM5QixZQUFNLEdBQVcsR0FBRyxDQUFDOztJQUk3QixDQUFDO0lBRUQsOEJBQU0sR0FBTixVQUFPLE9BQXNCO1FBQzNCLElBQU0sU0FBUyxHQUFHLGlCQUFNLE1BQU0sWUFBQyxPQUFPLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEMsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELCtCQUFPLEdBQVAsVUFBUSxTQUFjO1FBQXRCLGlCQVdDO1FBVkMsSUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDbEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLFVBQVUsRUFBRTtZQUNkLElBQUksQ0FBQyxjQUFjLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDdkQ7UUFFRCxVQUFVLENBQUM7WUFDVCxpQkFBTSxPQUFPLGFBQUMsU0FBUyxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsMkNBQW1CLEdBQW5CLFVBQW9CLGdCQUFxQjtRQUF6QyxpQkE2QkM7UUE1QkMsSUFBSSxRQUFzQixDQUFDO1FBQzNCLElBQUksVUFBd0IsQ0FBQztRQUU3QixJQUFNLElBQUksR0FBRyxVQUFDLENBQU07WUFDbEIsd0JBQXdCO1lBQ3hCLElBQUksQ0FBQyxLQUFLLGdCQUFnQixFQUFFO2dCQUMxQixPQUFPO2FBQ1I7WUFFRCxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDdkIsSUFBSSxVQUFVO2dCQUFFLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN6QyxLQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDO1FBRUYsUUFBUSxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUN4RixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRTNCLElBQUksZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRTtZQUN6QyxVQUFVLENBQUM7Z0JBQ1QsS0FBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUM7b0JBQ3ZCLGdCQUFnQixrQkFBQTtvQkFDaEIsTUFBTSxRQUFBO2lCQUNQLENBQUMsQ0FBQztnQkFDSCxJQUFJLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUU7b0JBQ3pDLFVBQVUsR0FBRyxLQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3hEO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxzQ0FBYyxHQUFkLFVBQWUsT0FBc0I7UUFDbkMsT0FBTyxHQUFHLGlCQUFNLGNBQWMsWUFBQyxPQUFPLENBQUMsQ0FBQztRQUV4QywwQkFBMEI7UUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFFdkcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNyQztRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7O2dCQWpFc0MsZ0JBQWdCO2dCQUEyQixjQUFjOztJQWZyRixhQUFhO1FBRHpCLFVBQVUsRUFBRTt5Q0FnQjRCLGdCQUFnQixFQUEyQixjQUFjO09BZnJGLGFBQWEsQ0FpRnpCO0lBQUQsb0JBQUM7Q0FBQSxBQWpGRCxDQUF3RCx3QkFBd0IsR0FpRi9FO1NBakZZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgSW5qZWN0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2luamVjdGlvbi9pbmplY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBJbmplY3Rpb25SZWdpc3RyeVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9pbmplY3Rpb24tcmVnaXN0cnkvaW5qZWN0aW9uLXJlZ2lzdHJ5LnNlcnZpY2UnO1xuaW1wb3J0IHsgT3ZlcmxheVNlcnZpY2UgfSBmcm9tICcuLi9vdmVybGF5L292ZXJsYXkuc2VydmljZSc7XG5pbXBvcnQgeyBEaWFsb2dDb21wb25lbnQgfSBmcm9tICcuL2RpYWxvZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGlhbG9nT3B0aW9ucyB9IGZyb20gJy4vZGlhbG9nLW9wdGlvbnMuaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERpYWxvZ1NlcnZpY2U8VCA9IERpYWxvZ0NvbXBvbmVudD4gZXh0ZW5kcyBJbmplY3Rpb25SZWdpc3RyeVNlcnZpY2U8VD4ge1xuICByZWFkb25seSBkZWZhdWx0czogRGlhbG9nT3B0aW9ucyA9IHtcbiAgICBpbnB1dHM6IHtcbiAgICAgIHpJbmRleDogOTkxLFxuICAgICAgY2xvc2VPbkJsdXI6IHRydWUsXG4gICAgICBjbG9zZU9uRXNjYXBlOiB0cnVlLFxuICAgICAgY2xvc2VCdXR0b246IHRydWUsXG4gICAgICBzaG93T3ZlcmxheTogdHJ1ZSxcbiAgICAgIHZpc2libGU6IHRydWVcbiAgICB9XG4gIH07XG5cbiAgcHJvdGVjdGVkIHR5cGU6IGFueSA9IERpYWxvZ0NvbXBvbmVudDtcbiAgcHJpdmF0ZSB6SW5kZXg6IG51bWJlciA9IDk5NTtcblxuICBjb25zdHJ1Y3RvcihyZWFkb25seSBpbmplY3Rpb25TZXJ2aWNlOiBJbmplY3Rpb25TZXJ2aWNlLCByZWFkb25seSBvdmVybGF5U2VydmljZTogT3ZlcmxheVNlcnZpY2UpIHtcbiAgICBzdXBlcihpbmplY3Rpb25TZXJ2aWNlKTtcbiAgfVxuXG4gIGNyZWF0ZShvcHRpb25zOiBEaWFsb2dPcHRpb25zKSB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gc3VwZXIuY3JlYXRlKG9wdGlvbnMpO1xuICAgIHRoaXMuY3JlYXRlU3Vic2NyaXB0aW9ucyhjb21wb25lbnQpO1xuICAgIHJldHVybiBjb21wb25lbnQ7XG4gIH1cblxuICBkZXN0cm95KGNvbXBvbmVudDogYW55KTogdm9pZCB7XG4gICAgY29uc3QgaGFzT3ZlcmxheSA9IGNvbXBvbmVudC5pbnN0YW5jZS5zaG93T3ZlcmxheTtcbiAgICB0aGlzLnpJbmRleCA9IHRoaXMuekluZGV4IC0gMjtcblxuICAgIGlmIChoYXNPdmVybGF5KSB7XG4gICAgICB0aGlzLm92ZXJsYXlTZXJ2aWNlLnJlbW92ZVRyaWdnZXJDb21wb25lbnQoY29tcG9uZW50KTtcbiAgICB9XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHN1cGVyLmRlc3Ryb3koY29tcG9uZW50KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZVN1YnNjcmlwdGlvbnModHJpZ2dlckNvbXBvbmVudDogYW55KTogdm9pZCB7XG4gICAgbGV0IGNsb3NlU3ViOiBTdWJzY3JpcHRpb247XG4gICAgbGV0IG92ZXJsYXlTdWI6IFN1YnNjcmlwdGlvbjtcblxuICAgIGNvbnN0IGtpbGwgPSAoYzogYW55KSA9PiB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChjICE9PSB0cmlnZ2VyQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xvc2VTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgIGlmIChvdmVybGF5U3ViKSBvdmVybGF5U3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLmRlc3Ryb3kodHJpZ2dlckNvbXBvbmVudCk7XG4gICAgfTtcblxuICAgIGNsb3NlU3ViID0gdHJpZ2dlckNvbXBvbmVudC5pbnN0YW5jZS5jbG9zZS5zdWJzY3JpYmUoa2lsbC5iaW5kKHRoaXMsIHRyaWdnZXJDb21wb25lbnQpKTtcbiAgICBjb25zdCB6SW5kZXggPSB0aGlzLnpJbmRleDtcblxuICAgIGlmICh0cmlnZ2VyQ29tcG9uZW50Lmluc3RhbmNlLnNob3dPdmVybGF5KSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5vdmVybGF5U2VydmljZS5zaG93KHtcbiAgICAgICAgICB0cmlnZ2VyQ29tcG9uZW50LFxuICAgICAgICAgIHpJbmRleFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRyaWdnZXJDb21wb25lbnQuaW5zdGFuY2UuY2xvc2VPbkJsdXIpIHtcbiAgICAgICAgICBvdmVybGF5U3ViID0gdGhpcy5vdmVybGF5U2VydmljZS5jbGljay5zdWJzY3JpYmUoa2lsbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGFzc2lnbkRlZmF1bHRzKG9wdGlvbnM6IERpYWxvZ09wdGlvbnMpOiBEaWFsb2dPcHRpb25zIHtcbiAgICBvcHRpb25zID0gc3VwZXIuYXNzaWduRGVmYXVsdHMob3B0aW9ucyk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICghb3B0aW9ucy56SW5kZXgpIHtcbiAgICAgIHRoaXMuekluZGV4ID0gdGhpcy5vdmVybGF5U2VydmljZS5pbnN0YW5jZSA/IHRoaXMub3ZlcmxheVNlcnZpY2UuaW5zdGFuY2UuekluZGV4ICsgMyA6IHRoaXMuekluZGV4ICsgMjtcblxuICAgICAgb3B0aW9ucy5pbnB1dHMuekluZGV4ID0gdGhpcy56SW5kZXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cbn1cbiJdfQ==