import { __decorate, __extends, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { InjectionService } from '../../../services/injection/injection.service';
import { OverlayService } from '../../overlay/overlay.service';
import { DialogService } from '../dialog.service';
import { AlertComponent } from './alert.component';
import { AlertTypes } from './alert-types.enum';
import { AlertStyles } from './alert-styles.enum';
var AlertService = /** @class */ (function (_super) {
    __extends(AlertService, _super);
    function AlertService(injectionService, overlayService) {
        var _a;
        var _this = _super.call(this, injectionService, overlayService) || this;
        _this.injectionService = injectionService;
        _this.overlayService = overlayService;
        _this.defaults = {
            inputs: {
                zIndex: 991,
                closeOnBlur: false,
                closeOnEscape: false,
                closeButton: false,
                showOverlay: true,
                visible: true
            }
        };
        _this.type = AlertComponent;
        _this.clsMap = (_a = {},
            _a[AlertStyles.Danger] = 'ngx-alert-danger',
            _a[AlertStyles.Warning] = 'ngx-alert-warning',
            _a[AlertStyles.Info] = 'ngx-alert-info',
            _a);
        return _this;
    }
    AlertService.prototype.alert = function (options) {
        return this.createDialog(options, AlertTypes.Alert);
    };
    AlertService.prototype.confirm = function (options) {
        return this.createDialog(options, AlertTypes.Confirm);
    };
    AlertService.prototype.prompt = function (options) {
        return this.createDialog(options, AlertTypes.Prompt);
    };
    AlertService.prototype.createDialog = function (options, type) {
        var subject = new Subject();
        var title = options.title, content = options.content, longPress = options.longPress;
        var cssClass = 'ngx-alert-dialog ' + this.clsMap[options.style];
        var component = this.create({
            title: title,
            content: content,
            longPress: longPress,
            type: type,
            cssClass: cssClass
        });
        var list = component.instance.ok.subscribe(function (data) {
            subject.next({
                type: 'ok',
                data: data
            });
            subject.complete();
            list.unsubscribe();
            list2.unsubscribe();
        });
        var list2 = component.instance.cancel.subscribe(function (data) {
            subject.next({
                type: 'cancel',
                data: data
            });
            subject.complete();
            list.unsubscribe();
            list2.unsubscribe();
        });
        return subject;
    };
    AlertService.ctorParameters = function () { return [
        { type: InjectionService },
        { type: OverlayService }
    ]; };
    AlertService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [InjectionService, OverlayService])
    ], AlertService);
    return AlertService;
}(DialogService));
export { AlertService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9kaWFsb2cvYWxlcnQvYWxlcnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRS9CLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFJbEQ7SUFBa0MsZ0NBQTZCO0lBbUI3RCxzQkFBcUIsZ0JBQWtDLEVBQVcsY0FBOEI7O1FBQWhHLFlBQ0Usa0JBQU0sZ0JBQWdCLEVBQUUsY0FBYyxDQUFDLFNBQ3hDO1FBRm9CLHNCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFBVyxvQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFsQnZGLGNBQVEsR0FBa0I7WUFDakMsTUFBTSxFQUFFO2dCQUNOLE1BQU0sRUFBRSxHQUFHO2dCQUNYLFdBQVcsRUFBRSxLQUFLO2dCQUNsQixhQUFhLEVBQUUsS0FBSztnQkFDcEIsV0FBVyxFQUFFLEtBQUs7Z0JBQ2xCLFdBQVcsRUFBRSxJQUFJO2dCQUNqQixPQUFPLEVBQUUsSUFBSTthQUNkO1NBQ0YsQ0FBQztRQUVRLFVBQUksR0FBUSxjQUFjLENBQUM7UUFDcEIsWUFBTTtZQUNyQixHQUFDLFdBQVcsQ0FBQyxNQUFNLElBQUcsa0JBQWtCO1lBQ3hDLEdBQUMsV0FBVyxDQUFDLE9BQU8sSUFBRyxtQkFBbUI7WUFDMUMsR0FBQyxXQUFXLENBQUMsSUFBSSxJQUFHLGdCQUFnQjtnQkFDcEM7O0lBSUYsQ0FBQztJQUVELDRCQUFLLEdBQUwsVUFBTSxPQUFzQjtRQUMxQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsOEJBQU8sR0FBUCxVQUFRLE9BQXNCO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCw2QkFBTSxHQUFOLFVBQU8sT0FBc0I7UUFDM0IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVPLG1DQUFZLEdBQXBCLFVBQXFCLE9BQXNCLEVBQUUsSUFBZ0I7UUFDM0QsSUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQStCLENBQUM7UUFDbkQsSUFBQSxxQkFBSyxFQUFFLHlCQUFPLEVBQUUsNkJBQVMsQ0FBYTtRQUM5QyxJQUFNLFFBQVEsR0FBRyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVsRSxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQzVCLEtBQUssT0FBQTtZQUNMLE9BQU8sU0FBQTtZQUNQLFNBQVMsV0FBQTtZQUNULElBQUksTUFBQTtZQUNKLFFBQVEsVUFBQTtTQUNULENBQUMsQ0FBQztRQUVILElBQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxVQUFDLElBQW1CO1lBQy9ELE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ1gsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsSUFBSSxNQUFBO2FBQ0wsQ0FBQyxDQUFDO1lBRUgsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ25CLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNuQixLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBQyxJQUFtQjtZQUNwRSxPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUNYLElBQUksRUFBRSxRQUFRO2dCQUNkLElBQUksTUFBQTthQUNMLENBQUMsQ0FBQztZQUVILE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNuQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbkIsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7Z0JBcERzQyxnQkFBZ0I7Z0JBQTJCLGNBQWM7O0lBbkJyRixZQUFZO1FBRHhCLFVBQVUsRUFBRTt5Q0FvQjRCLGdCQUFnQixFQUEyQixjQUFjO09BbkJyRixZQUFZLENBd0V4QjtJQUFELG1CQUFDO0NBQUEsQUF4RUQsQ0FBa0MsYUFBYSxHQXdFOUM7U0F4RVksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgSW5qZWN0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL2luamVjdGlvbi9pbmplY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBPdmVybGF5U2VydmljZSB9IGZyb20gJy4uLy4uL292ZXJsYXkvb3ZlcmxheS5zZXJ2aWNlJztcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2UgfSBmcm9tICcuLi9kaWFsb2cuc2VydmljZSc7XG5pbXBvcnQgeyBBbGVydENvbXBvbmVudCB9IGZyb20gJy4vYWxlcnQuY29tcG9uZW50JztcbmltcG9ydCB7IEFsZXJ0VHlwZXMgfSBmcm9tICcuL2FsZXJ0LXR5cGVzLmVudW0nO1xuaW1wb3J0IHsgQWxlcnRTdHlsZXMgfSBmcm9tICcuL2FsZXJ0LXN0eWxlcy5lbnVtJztcbmltcG9ydCB7IERpYWxvZ09wdGlvbnMgfSBmcm9tICcuLi9kaWFsb2ctb3B0aW9ucy5pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWxlcnRTZXJ2aWNlIGV4dGVuZHMgRGlhbG9nU2VydmljZTxBbGVydENvbXBvbmVudD4ge1xuICByZWFkb25seSBkZWZhdWx0czogRGlhbG9nT3B0aW9ucyA9IHtcbiAgICBpbnB1dHM6IHtcbiAgICAgIHpJbmRleDogOTkxLFxuICAgICAgY2xvc2VPbkJsdXI6IGZhbHNlLFxuICAgICAgY2xvc2VPbkVzY2FwZTogZmFsc2UsXG4gICAgICBjbG9zZUJ1dHRvbjogZmFsc2UsXG4gICAgICBzaG93T3ZlcmxheTogdHJ1ZSxcbiAgICAgIHZpc2libGU6IHRydWVcbiAgICB9XG4gIH07XG5cbiAgcHJvdGVjdGVkIHR5cGU6IGFueSA9IEFsZXJ0Q29tcG9uZW50O1xuICBwcml2YXRlIHJlYWRvbmx5IGNsc01hcCA9IHtcbiAgICBbQWxlcnRTdHlsZXMuRGFuZ2VyXTogJ25neC1hbGVydC1kYW5nZXInLFxuICAgIFtBbGVydFN0eWxlcy5XYXJuaW5nXTogJ25neC1hbGVydC13YXJuaW5nJyxcbiAgICBbQWxlcnRTdHlsZXMuSW5mb106ICduZ3gtYWxlcnQtaW5mbydcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihyZWFkb25seSBpbmplY3Rpb25TZXJ2aWNlOiBJbmplY3Rpb25TZXJ2aWNlLCByZWFkb25seSBvdmVybGF5U2VydmljZTogT3ZlcmxheVNlcnZpY2UpIHtcbiAgICBzdXBlcihpbmplY3Rpb25TZXJ2aWNlLCBvdmVybGF5U2VydmljZSk7XG4gIH1cblxuICBhbGVydChvcHRpb25zOiBEaWFsb2dPcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlRGlhbG9nKG9wdGlvbnMsIEFsZXJ0VHlwZXMuQWxlcnQpO1xuICB9XG5cbiAgY29uZmlybShvcHRpb25zOiBEaWFsb2dPcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlRGlhbG9nKG9wdGlvbnMsIEFsZXJ0VHlwZXMuQ29uZmlybSk7XG4gIH1cblxuICBwcm9tcHQob3B0aW9uczogRGlhbG9nT3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZURpYWxvZyhvcHRpb25zLCBBbGVydFR5cGVzLlByb21wdCk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZURpYWxvZyhvcHRpb25zOiBEaWFsb2dPcHRpb25zLCB0eXBlOiBBbGVydFR5cGVzKSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IG5ldyBTdWJqZWN0PHsgdHlwZTogc3RyaW5nOyBkYXRhOiBhbnkgfT4oKTtcbiAgICBjb25zdCB7IHRpdGxlLCBjb250ZW50LCBsb25nUHJlc3MgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgY3NzQ2xhc3MgPSAnbmd4LWFsZXJ0LWRpYWxvZyAnICsgdGhpcy5jbHNNYXBbb3B0aW9ucy5zdHlsZV07XG5cbiAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmNyZWF0ZSh7XG4gICAgICB0aXRsZSxcbiAgICAgIGNvbnRlbnQsXG4gICAgICBsb25nUHJlc3MsXG4gICAgICB0eXBlLFxuICAgICAgY3NzQ2xhc3NcbiAgICB9KTtcblxuICAgIGNvbnN0IGxpc3QgPSBjb21wb25lbnQuaW5zdGFuY2Uub2suc3Vic2NyaWJlKChkYXRhOiB7IGRhdGE6IGFueSB9KSA9PiB7XG4gICAgICBzdWJqZWN0Lm5leHQoe1xuICAgICAgICB0eXBlOiAnb2snLFxuICAgICAgICBkYXRhXG4gICAgICB9KTtcblxuICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xuICAgICAgbGlzdC51bnN1YnNjcmliZSgpO1xuICAgICAgbGlzdDIudW5zdWJzY3JpYmUoKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGxpc3QyID0gY29tcG9uZW50Lmluc3RhbmNlLmNhbmNlbC5zdWJzY3JpYmUoKGRhdGE6IHsgZGF0YTogYW55IH0pID0+IHtcbiAgICAgIHN1YmplY3QubmV4dCh7XG4gICAgICAgIHR5cGU6ICdjYW5jZWwnLFxuICAgICAgICBkYXRhXG4gICAgICB9KTtcblxuICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xuICAgICAgbGlzdC51bnN1YnNjcmliZSgpO1xuICAgICAgbGlzdDIudW5zdWJzY3JpYmUoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBzdWJqZWN0O1xuICB9XG59XG4iXX0=