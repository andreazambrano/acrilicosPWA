import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, EventEmitter, forwardRef, OnInit, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, AfterViewInit } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import moment from 'moment-timezone';
import { getMonth, getDecadeStartYear } from './utils';
import { CalendarView } from './calendar-view.enum';
var CALENDAR_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return CalendarComponent; }),
    multi: true
};
var CalendarComponent = /** @class */ (function () {
    function CalendarComponent(cdr) {
        this.cdr = cdr;
        this.daysOfWeek = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
        this.inputFormats = ['L', "LT", 'L LT', moment.ISO_8601];
        this.change = new EventEmitter();
        this.monthsList = moment.monthsShort();
        this.onTouchedCallback = function () {
            // placeholder
        };
        this.onChangeCallback = function () {
            // placeholder
        };
    }
    Object.defineProperty(CalendarComponent.prototype, "minView", {
        get: function () {
            return this._minView ? this._minView : CalendarView.Date;
        },
        set: function (val) {
            this._minView = val;
            this.validateView();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "defaultView", {
        get: function () {
            return this._defaultView ? this._defaultView : this.minView;
        },
        set: function (val) {
            this._defaultView = val;
            this.validateView();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (val) {
            var date = this.createMoment(val);
            if (date.isValid()) {
                if (!date.isSame(this._value, 'day')) {
                    this._value = val;
                    this.onChangeCallback(this._value);
                }
                this.change.emit(this._value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarComponent.prototype, "current", {
        get: function () {
            return this._current;
        },
        enumerable: true,
        configurable: true
    });
    CalendarComponent.prototype.ngOnInit = function () {
        this.activeDate = this.createMoment(this.value);
        this.weeks = getMonth(this.activeDate);
        this.monthsList = moment.monthsShort();
        this._current = this.activeDate;
        this.startYear = getDecadeStartYear(this._current.year());
        this.validateView();
    };
    CalendarComponent.prototype.ngAfterViewInit = function () {
        this.cdr.markForCheck();
    };
    CalendarComponent.prototype.changeViews = function () {
        if (this.currentView === CalendarView.Date) {
            this.currentView = CalendarView.Month;
        }
        else if (this.currentView === CalendarView.Month) {
            this.currentView = CalendarView.Year;
        }
        else {
            this.currentView = this.minView;
        }
        this.weeks = getMonth(this.activeDate);
    };
    CalendarComponent.prototype.validateView = function () {
        var viewsList = [CalendarView.Date, CalendarView.Month, CalendarView.Year];
        // date time picker precision validation
        if (!viewsList.includes(this.minView)) {
            this.minView = CalendarView.Date;
        }
        // defaultView cannot be below minView
        if (viewsList.indexOf(this.minView) > viewsList.indexOf(this.defaultView)) {
            this.defaultView = this.minView;
        }
        this.currentView = this.defaultView;
    };
    /**
     * Checks if `date` matches selected value
     */
    CalendarComponent.prototype.isDayActive = function (date) {
        return date.isSame(this.value, 'day');
    };
    /**
     * Checks if `month` matches selected value, in the viewed year
     */
    CalendarComponent.prototype.isMonthActive = function (month) {
        var date = this.createMoment(this.value).month(month);
        return date.isSame(this.value, 'month') && date.isSame(this.activeDate, 'year');
    };
    /**
     * Checks if `month` and year matches current
     */
    CalendarComponent.prototype.isCurrentMonth = function (month) {
        var date = this.activeDate.clone().month(month);
        return date.isSame(this._current, 'month') && date.isSame(this._current, 'year');
    };
    /**
     * Checks if `year` matches selected year
     */
    CalendarComponent.prototype.isYearActive = function (year) {
        var date = this.createMoment(this.value).year(year);
        return date.isSame(this.value, 'year');
    };
    /**
     * Checks if year matches current year
     */
    CalendarComponent.prototype.isCurrentYear = function (year) {
        var date = this.createMoment(this.value).year(year);
        return date.isSame(this._current, 'year');
    };
    CalendarComponent.prototype.isDisabled = function (value, type) {
        if (this.disabled)
            return true;
        if (!value)
            return false;
        var date;
        switch (type) {
            case 'day':
                date = value;
                break;
            case 'month':
                date = this.activeDate.clone().month(value);
                break;
            case 'year':
                date = this.activeDate.clone().year(value);
                break;
            default:
                return false;
        }
        var isBeforeMin = this.minDate && date.isBefore(this.parseDate(this.minDate), type);
        var isAfterMax = this.maxDate && date.isAfter(this.parseDate(this.maxDate), type);
        return isBeforeMin || isAfterMax;
    };
    CalendarComponent.prototype.onDayClick = function (day) {
        this.activeDate = day.date.clone();
        this.value = this.activeDate.toDate();
        if (day.prevMonth || day.nextMonth) {
            this.weeks = getMonth(this.activeDate);
        }
    };
    CalendarComponent.prototype.onMonthClick = function (month) {
        this.activeDate.month(month);
        this.value = this.activeDate.toDate();
        if (this.minView !== CalendarView.Month) {
            this.currentView = CalendarView.Date;
            this.weeks = getMonth(this.activeDate);
        }
    };
    CalendarComponent.prototype.onYearClick = function (year) {
        this.activeDate.year(year);
        this.value = this.activeDate.toDate();
        if (this.minView !== CalendarView.Year) {
            this.currentView = CalendarView.Month;
            this.weeks = getMonth(this.activeDate);
        }
    };
    CalendarComponent.prototype.prevMonth = function () {
        var date = this.activeDate.clone();
        this.activeDate = date.subtract(1, 'month');
        this.weeks = getMonth(this.activeDate);
    };
    CalendarComponent.prototype.nextMonth = function () {
        var date = this.activeDate.clone();
        this.activeDate = date.add(1, 'month');
        this.weeks = getMonth(this.activeDate);
    };
    CalendarComponent.prototype.prevYear = function () {
        var date = this.activeDate.clone();
        this.activeDate = date.subtract(1, 'year');
    };
    CalendarComponent.prototype.nextYear = function () {
        var date = this.activeDate.clone();
        this.activeDate = date.add(1, 'year');
    };
    CalendarComponent.prototype.prevTwoDecades = function () {
        this.startYear = this.startYear - 20;
    };
    CalendarComponent.prototype.nextTwoDecades = function () {
        this.startYear = this.startYear + 20;
    };
    CalendarComponent.prototype.writeValue = function (val) {
        var activeDate = this.createMoment(val);
        if (activeDate.isValid() && !activeDate.isSame(this.value, 'day')) {
            this.activeDate = activeDate;
            this.weeks = getMonth(this.activeDate);
            this._value = val;
            this.startYear = getDecadeStartYear(this.activeDate.year());
        }
        this.cdr.markForCheck();
    };
    CalendarComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    CalendarComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    CalendarComponent.prototype.parseDate = function (date) {
        date = date instanceof Date ? date.toISOString() : date;
        return this.timezone ? moment.tz(date, this.inputFormats, this.timezone) : moment(date, this.inputFormats);
    };
    CalendarComponent.prototype.createMoment = function (date) {
        var m = moment(date).clone();
        return this.timezone ? m.tz(this.timezone) : m;
    };
    CalendarComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CalendarComponent.prototype, "minDate", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], CalendarComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CalendarComponent.prototype, "maxDate", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], CalendarComponent.prototype, "daysOfWeek", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CalendarComponent.prototype, "timezone", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], CalendarComponent.prototype, "inputFormats", void 0);
    __decorate([
        Input('minView'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], CalendarComponent.prototype, "minView", null);
    __decorate([
        Input('defaultView'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], CalendarComponent.prototype, "defaultView", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], CalendarComponent.prototype, "change", void 0);
    CalendarComponent = __decorate([
        Component({
            selector: 'ngx-calendar',
            exportAs: 'ngxCalendar',
            template: "<div class=\"ngx-calendar-wrap\">\n  <div fxFlex=\"100%\" class=\"text-center\" [ngSwitch]=\"currentView\">\n    <div *ngSwitchCase=\"'date'\">\n      <div class=\"title-row\" fxLayout=\"row\" fxLayoutWrap=\"nowrap\" fxLayoutAlign=\"center center\">\n        <button type=\"button\" class=\"prev-month\" [disabled]=\"disabled\" title=\"Previous Month\" (click)=\"prevMonth()\">\n          <span class=\"icon-arrow-left\"></span>\n        </button>\n        <span class=\"title\" (click)=\"changeViews()\">\n          {{ activeDate | amTimeZone: timezone | amDateFormat: 'MMMM YYYY' }}\n        </span>\n        <button type=\"button\" class=\"next-month\" title=\"Next Month\" [disabled]=\"disabled\" (click)=\"nextMonth()\">\n          <span class=\"icon-arrow-right\"></span>\n        </button>\n      </div>\n      <div class=\"day-name-row\">\n        <div fxLayout=\"row\" fxLayoutWrap=\"nowrap\" fxFill>\n          <div class=\"day-name text-center\" fxFlex=\"30px\" *ngFor=\"let d of daysOfWeek\">\n            {{ d }}\n          </div>\n        </div>\n      </div>\n      <div class=\"day-container\">\n        <div *ngFor=\"let week of weeks\" class=\"day-row\" fxLayout=\"row\" fxLayoutWrap=\"nowrap\" fxFill>\n          <div *ngFor=\"let day of week\" class=\"day-cell text-center\" fxFlex=\"30px\">\n            <button\n              *ngIf=\"day.num\"\n              class=\"day\"\n              type=\"button\"\n              [title]=\"day.date | amTimeZone: timezone | amDateFormat: 'LL'\"\n              [class.active]=\"isDayActive(day.date)\"\n              [ngClass]=\"day.classes\"\n              [disabled]=\"isDisabled(day.date, 'day')\"\n              (click)=\"onDayClick(day)\"\n            >\n              {{ day.num }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div *ngSwitchCase=\"'month'\">\n      <div class=\"title-row\" fxLayout=\"row\" fxLayoutWrap=\"nowrap\" fxLayoutAlign=\"center center\">\n        <button type=\"button\" class=\"prev-month\" [disabled]=\"disabled\" title=\"Previous Year\" (click)=\"prevYear()\">\n          <span class=\"icon-arrow-left\"></span>\n        </button>\n        <span class=\"title\" (click)=\"changeViews()\">\n          {{ activeDate | amTimeZone: timezone | amDateFormat: 'YYYY' }}\n        </span>\n        <button type=\"button\" class=\"next-month\" title=\"Next Year\" [disabled]=\"disabled\" (click)=\"nextYear()\">\n          <span class=\"icon-arrow-right\"></span>\n        </button>\n      </div>\n      <div class=\"months-container\">\n        <div class=\"months-row\">\n          <button\n            class=\"month\"\n            type=\"button\"\n            [class.active]=\"isMonthActive(month)\"\n            [class.current]=\"isCurrentMonth(month)\"\n            *ngFor=\"let month of monthsList\"\n            (click)=\"onMonthClick(month)\"\n            [disabled]=\"isDisabled(month, 'month')\"\n          >\n            {{ month }}\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <div *ngSwitchCase=\"'year'\">\n      <div class=\"title-row\" fxLayout=\"row\" fxLayoutWrap=\"nowrap\" fxLayoutAlign=\"center center\">\n        <button\n          type=\"button\"\n          class=\"prev-month\"\n          [disabled]=\"disabled\"\n          title=\"Previous Two Decades\"\n          (click)=\"prevTwoDecades()\"\n        >\n          <span class=\"icon-arrow-left\"></span>\n        </button>\n        <span class=\"title\" (click)=\"changeViews()\"> {{ startYear }} - {{ startYear + 20 }} </span>\n        <button\n          type=\"button\"\n          class=\"next-month\"\n          title=\"Next Two Decades\"\n          [disabled]=\"disabled\"\n          (click)=\"nextTwoDecades()\"\n        >\n          <span class=\"icon-arrow-right\"></span>\n        </button>\n      </div>\n      <div class=\"years-container\">\n        <div class=\"years-row\">\n          <button\n            class=\"year\"\n            type=\"button\"\n            *ngFor=\"let dummy of ' '.repeat(20).split(''); let x = index\"\n            [class.active]=\"isYearActive(x + startYear)\"\n            [class.current]=\"isCurrentYear(x + startYear)\"\n            (click)=\"onYearClick(x + startYear)\"\n            [disabled]=\"isDisabled(x + startYear, 'year')\"\n          >\n            {{ x + startYear }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
            host: {
                class: 'ngx-calendar',
                tabindex: '1',
                '(blur)': 'onTouchedCallback()'
            },
            providers: [CALENDAR_VALUE_ACCESSOR],
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".ngx-calendar{position:relative;font-size:.9rem;box-shadow:0 1px 8px 0 rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 3px 3px -2px rgba(0,0,0,.12);background:#1c2029;display:inline-block;border:1px solid #313847;width:270px;padding:.5rem;height:270px}.ngx-calendar:focus{outline:0}.ngx-calendar .title-row{background:#1c2029;color:#e9e9e9;padding:.69rem 0;font-weight:600;line-height:0}.ngx-calendar .title-row .title{color:#479eff;min-width:100px;cursor:pointer}.ngx-calendar .title-row button{color:#818fa9;font-size:.6rem}.ngx-calendar .day-name-row{color:#818fa9;font-weight:600}.ngx-calendar .day-cell,.ngx-calendar .day-name{margin:.1rem .2rem;line-height:1.8rem;text-align:center;width:1.8rem;height:1.8rem}.ngx-calendar .day-container{margin-top:0}.ngx-calendar .day-container .day{color:#e9e9e9;height:100%;width:100%;max-height:30px;max-width:30px;line-height:100%;border-radius:50%;text-align:center;-webkit-transition:background .2s;transition:background .2s;padding:0}.ngx-calendar .day-container .day.next-month,.ngx-calendar .day-container .day.prev-month{color:#818fa9;opacity:.2}.ngx-calendar .day-container .day.today{background:#262c38}.ngx-calendar .day-container .day.active{background:#479eff;color:#e9e9e9}.ngx-calendar .day-container .day:hover:not(.active):hover:not([disabled]){background:#479eff;color:#e9e9e9;opacity:1}.ngx-calendar .months-container,.ngx-calendar .years-container{margin:.5rem;border:1px solid #313847;border-bottom:0;color:#e9e9e9}.ngx-calendar .months-container .months-row,.ngx-calendar .months-container .years-row,.ngx-calendar .years-container .months-row,.ngx-calendar .years-container .years-row{display:-ms-grid;display:grid}.ngx-calendar .months-container .month,.ngx-calendar .months-container .year,.ngx-calendar .years-container .month,.ngx-calendar .years-container .year{border-right:1px solid #313847;border-bottom:1px solid #313847;grid-auto-rows:auto;text-transform:uppercase;text-align:center;font-size:14px}.ngx-calendar .months-container .month.active,.ngx-calendar .months-container .year.active,.ngx-calendar .years-container .month.active,.ngx-calendar .years-container .year.active{background-color:#479eff}.ngx-calendar .months-container .month.current:not(.active),.ngx-calendar .months-container .year.current:not(.active),.ngx-calendar .years-container .month.current:not(.active),.ngx-calendar .years-container .year.current:not(.active){background-color:#262c38}.ngx-calendar .months-container .month:hover:not(.active):hover:not([disabled]),.ngx-calendar .months-container .year:hover:not(.active):hover:not([disabled]),.ngx-calendar .years-container .month:hover:not(.active):hover:not([disabled]),.ngx-calendar .years-container .year:hover:not(.active):hover:not([disabled]){background:#479eff;color:#e9e9e9;opacity:1}.ngx-calendar .months-container .months-row{-ms-grid-columns:(1fr)[3];grid-template-columns:repeat(3,1fr)}.ngx-calendar .months-container .month{padding:.75rem}.ngx-calendar .months-container .month:nth-child(3n){border-right:0}.ngx-calendar .years-container .years-row{-ms-grid-columns:(1fr)[4];grid-template-columns:repeat(4,1fr)}.ngx-calendar .years-container .year{padding:.475rem}.ngx-calendar .years-container .year:nth-child(4n){border-right:0}"]
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef])
    ], CalendarComponent);
    return CalendarComponent;
}());
export { CalendarComponent };
//# sourceMappingURL=data:application/json;base64,