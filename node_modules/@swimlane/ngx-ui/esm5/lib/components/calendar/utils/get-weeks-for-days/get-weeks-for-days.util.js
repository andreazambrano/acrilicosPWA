import { __read, __spread } from "tslib";
import { getNumberRange } from '../get-number-range';
/**
 * Gets a array of days split by week
 * @param days
 * @param offset
 * @return days by week
 */
export function getWeeksForDays(days, startDay) {
    var weeks = [];
    var offset = 7;
    // fill front row
    if (startDay < 7) {
        offset = 7 - startDay;
    }
    var _loop_1 = function () {
        var wk = days.slice(0, offset);
        days.splice(0, offset);
        // fill front row
        if (offset < 7) {
            var firstDay_1 = wk[0].date;
            var fill = getNumberRange(0, startDay).map(function (_, i) {
                var date = firstDay_1.clone().subtract(startDay - i, 'd');
                return {
                    num: date.date(),
                    dayOfWeek: date.day(),
                    date: date,
                    prevMonth: true
                };
            });
            wk = __spread(fill, wk);
            offset = 7;
        }
        // fill last row
        if (!days.length && wk.length !== 7) {
            var lastDay_1 = wk[wk.length - 1].date;
            var fill = getNumberRange(wk.length, 7).map(function (_, i) {
                var date = lastDay_1.clone().add(i + 1, 'd');
                return {
                    num: date.date(),
                    dayOfWeek: date.day(),
                    date: date,
                    nextMonth: true
                };
            });
            wk = __spread(wk, fill);
        }
        wk.forEach(function (day) {
            day.classes = {
                'first-day-of-month': day.num === 1,
                'last-day-of-week': day.dayOfWeek === 6,
                today: day.today,
                'next-month': day.nextMonth,
                'prev-month': day.prevMonth
            };
        });
        weeks.push(wk);
    };
    while (days.length) {
        _loop_1();
    }
    return weeks;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXdlZWtzLWZvci1kYXlzLnV0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvY2FsZW5kYXIvdXRpbHMvZ2V0LXdlZWtzLWZvci1kYXlzL2dldC13ZWVrcy1mb3ItZGF5cy51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFckQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsZUFBZSxDQUFDLElBQW1CLEVBQUUsUUFBZ0I7SUFDbkUsSUFBTSxLQUFLLEdBQWtCLEVBQUUsQ0FBQztJQUNoQyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFFZixpQkFBaUI7SUFDakIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFO1FBQ2hCLE1BQU0sR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDO0tBQ3ZCOztRQUdDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXZCLGlCQUFpQjtRQUNqQixJQUFJLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDZCxJQUFNLFVBQVEsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQzVCLElBQU0sSUFBSSxHQUFHLGNBQWMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ2hELElBQU0sSUFBSSxHQUFHLFVBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDMUQsT0FBTztvQkFDTCxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRTtvQkFDaEIsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7b0JBQ3JCLElBQUksTUFBQTtvQkFDSixTQUFTLEVBQUUsSUFBSTtpQkFDaEIsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUFDO1lBRUgsRUFBRSxZQUFPLElBQUksRUFBSyxFQUFFLENBQUMsQ0FBQztZQUN0QixNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ1o7UUFFRCxnQkFBZ0I7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbkMsSUFBTSxTQUFPLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3ZDLElBQU0sSUFBSSxHQUFHLGNBQWMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDO2dCQUNqRCxJQUFNLElBQUksR0FBRyxTQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQzdDLE9BQU87b0JBQ0wsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUU7b0JBQ2hCLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO29CQUNyQixJQUFJLE1BQUE7b0JBQ0osU0FBUyxFQUFFLElBQUk7aUJBQ2hCLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztZQUVILEVBQUUsWUFBTyxFQUFFLEVBQUssSUFBSSxDQUFDLENBQUM7U0FDdkI7UUFFRCxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRztZQUNaLEdBQUcsQ0FBQyxPQUFPLEdBQUc7Z0JBQ1osb0JBQW9CLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUNuQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsU0FBUyxLQUFLLENBQUM7Z0JBQ3ZDLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSztnQkFDaEIsWUFBWSxFQUFFLEdBQUcsQ0FBQyxTQUFTO2dCQUMzQixZQUFZLEVBQUUsR0FBRyxDQUFDLFNBQVM7YUFDNUIsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO1FBRUgsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQzs7SUEvQ2pCLE9BQU8sSUFBSSxDQUFDLE1BQU07O0tBZ0RqQjtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhbGVuZGFyTW9udGggfSBmcm9tICcuLi8uLi9jYWxlbmRhci1tb250aC50eXBlJztcbmltcG9ydCB7IENhbGVuZGFyRGF5IH0gZnJvbSAnLi4vLi4vY2FsZW5kYXItZGF5LmludGVyZmFjZSc7XG5cbmltcG9ydCB7IGdldE51bWJlclJhbmdlIH0gZnJvbSAnLi4vZ2V0LW51bWJlci1yYW5nZSc7XG5cbi8qKlxuICogR2V0cyBhIGFycmF5IG9mIGRheXMgc3BsaXQgYnkgd2Vla1xuICogQHBhcmFtIGRheXNcbiAqIEBwYXJhbSBvZmZzZXRcbiAqIEByZXR1cm4gZGF5cyBieSB3ZWVrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrc0ZvckRheXMoZGF5czogQ2FsZW5kYXJEYXlbXSwgc3RhcnREYXk6IG51bWJlcikge1xuICBjb25zdCB3ZWVrczogQ2FsZW5kYXJNb250aCA9IFtdO1xuICBsZXQgb2Zmc2V0ID0gNztcblxuICAvLyBmaWxsIGZyb250IHJvd1xuICBpZiAoc3RhcnREYXkgPCA3KSB7XG4gICAgb2Zmc2V0ID0gNyAtIHN0YXJ0RGF5O1xuICB9XG5cbiAgd2hpbGUgKGRheXMubGVuZ3RoKSB7XG4gICAgbGV0IHdrID0gZGF5cy5zbGljZSgwLCBvZmZzZXQpO1xuICAgIGRheXMuc3BsaWNlKDAsIG9mZnNldCk7XG5cbiAgICAvLyBmaWxsIGZyb250IHJvd1xuICAgIGlmIChvZmZzZXQgPCA3KSB7XG4gICAgICBjb25zdCBmaXJzdERheSA9IHdrWzBdLmRhdGU7XG4gICAgICBjb25zdCBmaWxsID0gZ2V0TnVtYmVyUmFuZ2UoMCwgc3RhcnREYXkpLm1hcCgoXywgaSkgPT4ge1xuICAgICAgICBjb25zdCBkYXRlID0gZmlyc3REYXkuY2xvbmUoKS5zdWJ0cmFjdChzdGFydERheSAtIGksICdkJyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbnVtOiBkYXRlLmRhdGUoKSxcbiAgICAgICAgICBkYXlPZldlZWs6IGRhdGUuZGF5KCksXG4gICAgICAgICAgZGF0ZSxcbiAgICAgICAgICBwcmV2TW9udGg6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuXG4gICAgICB3ayA9IFsuLi5maWxsLCAuLi53a107XG4gICAgICBvZmZzZXQgPSA3O1xuICAgIH1cblxuICAgIC8vIGZpbGwgbGFzdCByb3dcbiAgICBpZiAoIWRheXMubGVuZ3RoICYmIHdrLmxlbmd0aCAhPT0gNykge1xuICAgICAgY29uc3QgbGFzdERheSA9IHdrW3drLmxlbmd0aCAtIDFdLmRhdGU7XG4gICAgICBjb25zdCBmaWxsID0gZ2V0TnVtYmVyUmFuZ2Uod2subGVuZ3RoLCA3KS5tYXAoKF8sIGkpID0+IHtcbiAgICAgICAgY29uc3QgZGF0ZSA9IGxhc3REYXkuY2xvbmUoKS5hZGQoaSArIDEsICdkJyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbnVtOiBkYXRlLmRhdGUoKSxcbiAgICAgICAgICBkYXlPZldlZWs6IGRhdGUuZGF5KCksXG4gICAgICAgICAgZGF0ZSxcbiAgICAgICAgICBuZXh0TW9udGg6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuXG4gICAgICB3ayA9IFsuLi53aywgLi4uZmlsbF07XG4gICAgfVxuXG4gICAgd2suZm9yRWFjaChkYXkgPT4ge1xuICAgICAgZGF5LmNsYXNzZXMgPSB7XG4gICAgICAgICdmaXJzdC1kYXktb2YtbW9udGgnOiBkYXkubnVtID09PSAxLFxuICAgICAgICAnbGFzdC1kYXktb2Ytd2Vlayc6IGRheS5kYXlPZldlZWsgPT09IDYsXG4gICAgICAgIHRvZGF5OiBkYXkudG9kYXksXG4gICAgICAgICduZXh0LW1vbnRoJzogZGF5Lm5leHRNb250aCxcbiAgICAgICAgJ3ByZXYtbW9udGgnOiBkYXkucHJldk1vbnRoXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgd2Vla3MucHVzaCh3ayk7XG4gIH1cblxuICByZXR1cm4gd2Vla3M7XG59XG4iXX0=