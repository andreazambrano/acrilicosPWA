import { __decorate, __metadata } from "tslib";
import { Component, Input, EventEmitter, Output, ViewEncapsulation, TemplateRef, ChangeDetectionStrategy } from '@angular/core';
var TreeNodeComponent = /** @class */ (function () {
    function TreeNodeComponent() {
        this.icons = {
            collapse: 'icon-tree-collapse',
            expand: 'icon-tree-expand'
        };
        this.activate = new EventEmitter();
        this.deactivate = new EventEmitter();
        this.selectNode = new EventEmitter();
        // backwards compatibility. Use selectNode
        this.select = this.selectNode;
        this.expand = new EventEmitter();
        this.collapse = new EventEmitter();
    }
    TreeNodeComponent.prototype.ngOnChanges = function () {
        this.data = {
            $implicit: this.node,
            label: this.label,
            children: this.children,
            model: this.model
        };
    };
    TreeNodeComponent.prototype.onExpandClick = function (event) {
        if (this.disabled || !this.expandable)
            return;
        event.stopPropagation();
        this.expanded = !this.expanded;
        if (this.expanded) {
            this.expand.emit(this.data);
        }
        else {
            this.collapse.emit(this.data);
        }
    };
    TreeNodeComponent.prototype.onClick = function () {
        if (!this.selectable || this.disabled)
            return;
        this.selectNode.emit(this.data);
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TreeNodeComponent.prototype, "label", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], TreeNodeComponent.prototype, "model", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], TreeNodeComponent.prototype, "node", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], TreeNodeComponent.prototype, "children", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TreeNodeComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TreeNodeComponent.prototype, "expandable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TreeNodeComponent.prototype, "expanded", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TreeNodeComponent.prototype, "selectable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", TemplateRef)
    ], TreeNodeComponent.prototype, "template", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], TreeNodeComponent.prototype, "icons", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], TreeNodeComponent.prototype, "activate", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], TreeNodeComponent.prototype, "deactivate", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], TreeNodeComponent.prototype, "selectNode", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], TreeNodeComponent.prototype, "select", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], TreeNodeComponent.prototype, "expand", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], TreeNodeComponent.prototype, "collapse", void 0);
    TreeNodeComponent = __decorate([
        Component({
            exportAs: 'ngxTreeNode',
            selector: 'ngx-tree-node',
            template: "<li\n  class=\"ngx-tree-node\"\n  [class.selectable]=\"selectable\"\n  (focus)=\"activate.emit(this.data)\"\n  (blur)=\"deactivate.emit(this.data)\"\n  tabindex=\"-1\"\n>\n  <span\n    *ngIf=\"expandable\"\n    class=\"ngx-expander\"\n    (click)=\"onExpandClick($event)\"\n    [class.disabled]=\"disabled\"\n    [ngClass]=\"expanded ? icons.collapse : icons.expand\"\n    >\n  </span>\n  <span *ngIf=\"!template\" [innerHTML]=\"label\" [class.disabled]=\"disabled\" class=\"ngx-node-label\" (click)=\"onClick()\"> </span>\n  <ng-template *ngIf=\"template\" [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"data\"> </ng-template>  \n  <ng-content *ngIf=\"expanded\"></ng-content>\n  <ngx-tree\n    *ngIf=\"children?.length && expandable && expanded\"\n    class=\"ngx-sub-tree\"\n    [nodes]=\"children\"\n    [template]=\"template\"\n    [icons]=\"icons\"\n    (selectNode)=\"selectNode.emit($event)\"\n  >\n  </ngx-tree>\n</li>\n",
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], TreeNodeComponent);
    return TreeNodeComponent;
}());
export { TreeNodeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90cmVlL3RyZWUtbm9kZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLFlBQVksRUFDWixNQUFNLEVBRU4saUJBQWlCLEVBQ2pCLFdBQVcsRUFDWCx1QkFBdUIsRUFDeEIsTUFBTSxlQUFlLENBQUM7QUFXdkI7SUFBQTtRQVVXLFVBQUssR0FBRztZQUNmLFFBQVEsRUFBRSxvQkFBb0I7WUFDOUIsTUFBTSxFQUFFLGtCQUFrQjtTQUMzQixDQUFDO1FBRVEsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDOUIsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDaEMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDMUMsMENBQTBDO1FBQ2hDLFdBQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3pCLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzVCLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBK0IxQyxDQUFDO0lBM0JDLHVDQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHO1lBQ1YsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ3BCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1NBQ2xCLENBQUM7SUFDSixDQUFDO0lBRUQseUNBQWEsR0FBYixVQUFjLEtBQVk7UUFDeEIsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVU7WUFBRSxPQUFPO1FBRTlDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUV4QixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUUvQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzdCO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDL0I7SUFDSCxDQUFDO0lBRUQsbUNBQU8sR0FBUDtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxRQUFRO1lBQUUsT0FBTztRQUM5QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQWxEUTtRQUFSLEtBQUssRUFBRTs7b0RBQWU7SUFDZDtRQUFSLEtBQUssRUFBRTs7b0RBQVk7SUFDWDtRQUFSLEtBQUssRUFBRTs7bURBQWdCO0lBQ2Y7UUFBUixLQUFLLEVBQUU7O3VEQUFpQjtJQUNoQjtRQUFSLEtBQUssRUFBRTs7dURBQW1CO0lBQ2xCO1FBQVIsS0FBSyxFQUFFOzt5REFBcUI7SUFDcEI7UUFBUixLQUFLLEVBQUU7O3VEQUFtQjtJQUNsQjtRQUFSLEtBQUssRUFBRTs7eURBQXFCO0lBQ3BCO1FBQVIsS0FBSyxFQUFFO2tDQUFXLFdBQVc7dURBQU07SUFDM0I7UUFBUixLQUFLLEVBQUU7O29EQUdOO0lBRVE7UUFBVCxNQUFNLEVBQUU7O3VEQUErQjtJQUM5QjtRQUFULE1BQU0sRUFBRTs7eURBQWlDO0lBQ2hDO1FBQVQsTUFBTSxFQUFFOzt5REFBaUM7SUFFaEM7UUFBVCxNQUFNLEVBQUU7O3FEQUEwQjtJQUN6QjtRQUFULE1BQU0sRUFBRTs7cURBQTZCO0lBQzVCO1FBQVQsTUFBTSxFQUFFOzt1REFBK0I7SUFyQjdCLGlCQUFpQjtRQVA3QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsYUFBYTtZQUN2QixRQUFRLEVBQUUsZUFBZTtZQUN6QiwwN0JBQXlDO1lBQ3pDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO1lBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1NBQ2hELENBQUM7T0FDVyxpQkFBaUIsQ0FvRDdCO0lBQUQsd0JBQUM7Q0FBQSxBQXBERCxJQW9EQztTQXBEWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIE91dHB1dCxcbiAgT25DaGFuZ2VzLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgVGVtcGxhdGVSZWYsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBUcmVlTm9kZSB9IGZyb20gJy4vdHJlZS1ub2RlLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIGV4cG9ydEFzOiAnbmd4VHJlZU5vZGUnLFxuICBzZWxlY3RvcjogJ25neC10cmVlLW5vZGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vdHJlZS1ub2RlLmNvbXBvbmVudC5odG1sJyxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgVHJlZU5vZGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBsYWJlbDogc3RyaW5nO1xuICBASW5wdXQoKSBtb2RlbDogYW55O1xuICBASW5wdXQoKSBub2RlOiBUcmVlTm9kZTtcbiAgQElucHV0KCkgY2hpbGRyZW46IGFueVtdO1xuICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbjtcbiAgQElucHV0KCkgZXhwYW5kYWJsZTogYm9vbGVhbjtcbiAgQElucHV0KCkgZXhwYW5kZWQ6IGJvb2xlYW47XG4gIEBJbnB1dCgpIHNlbGVjdGFibGU6IGJvb2xlYW47XG4gIEBJbnB1dCgpIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICBASW5wdXQoKSBpY29ucyA9IHtcbiAgICBjb2xsYXBzZTogJ2ljb24tdHJlZS1jb2xsYXBzZScsXG4gICAgZXhwYW5kOiAnaWNvbi10cmVlLWV4cGFuZCdcbiAgfTtcblxuICBAT3V0cHV0KCkgYWN0aXZhdGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBkZWFjdGl2YXRlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgc2VsZWN0Tm9kZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuIFVzZSBzZWxlY3ROb2RlXG4gIEBPdXRwdXQoKSBzZWxlY3QgPSB0aGlzLnNlbGVjdE5vZGU7XG4gIEBPdXRwdXQoKSBleHBhbmQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBjb2xsYXBzZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBkYXRhOiBhbnk7XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgdGhpcy5kYXRhID0ge1xuICAgICAgJGltcGxpY2l0OiB0aGlzLm5vZGUsXG4gICAgICBsYWJlbDogdGhpcy5sYWJlbCxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLmNoaWxkcmVuLFxuICAgICAgbW9kZWw6IHRoaXMubW9kZWxcbiAgICB9O1xuICB9XG5cbiAgb25FeHBhbmRDbGljayhldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCAhdGhpcy5leHBhbmRhYmxlKSByZXR1cm47XG5cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIHRoaXMuZXhwYW5kZWQgPSAhdGhpcy5leHBhbmRlZDtcblxuICAgIGlmICh0aGlzLmV4cGFuZGVkKSB7XG4gICAgICB0aGlzLmV4cGFuZC5lbWl0KHRoaXMuZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29sbGFwc2UuZW1pdCh0aGlzLmRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2xpY2soKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnNlbGVjdGFibGUgfHwgdGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuICAgIHRoaXMuc2VsZWN0Tm9kZS5lbWl0KHRoaXMuZGF0YSk7XG4gIH1cbn1cbiJdfQ==