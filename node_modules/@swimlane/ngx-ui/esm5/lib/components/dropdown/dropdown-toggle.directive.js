import { __decorate, __metadata } from "tslib";
import { Directive, Input, ElementRef, HostListener, EventEmitter, Output } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
var DropdownToggleDirective = /** @class */ (function () {
    function DropdownToggleDirective(el) {
        this.el = el;
        this.showEvent = "click" /* Click */;
        this.toggle = new EventEmitter();
        this._disabled = false;
        this.element = this.el.nativeElement;
    }
    Object.defineProperty(DropdownToggleDirective.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (disabled) {
            this._disabled = coerceBooleanProperty(disabled);
        },
        enumerable: true,
        configurable: true
    });
    DropdownToggleDirective.prototype.onClick = function (event) {
        if (this.showEvent === "click" /* Click */ && !this.disabled) {
            event.preventDefault();
            this.toggle.emit(event);
        }
    };
    DropdownToggleDirective.prototype.onContextmenu = function (event) {
        if (this.showEvent === "contextmenu" /* Contextmenu */ && !this.disabled) {
            event.preventDefault();
            this.toggle.emit(event);
        }
    };
    DropdownToggleDirective.prototype.onDblclick = function (event) {
        if (this.showEvent === "dblclick" /* Dblclick */ && !this.disabled) {
            event.preventDefault();
            this.toggle.emit(event);
        }
    };
    DropdownToggleDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DropdownToggleDirective.prototype, "showEvent", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], DropdownToggleDirective.prototype, "disabled", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], DropdownToggleDirective.prototype, "toggle", void 0);
    __decorate([
        HostListener('click', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Event]),
        __metadata("design:returntype", void 0)
    ], DropdownToggleDirective.prototype, "onClick", null);
    __decorate([
        HostListener('contextmenu', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Event]),
        __metadata("design:returntype", void 0)
    ], DropdownToggleDirective.prototype, "onContextmenu", null);
    __decorate([
        HostListener('dblclick', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Event]),
        __metadata("design:returntype", void 0)
    ], DropdownToggleDirective.prototype, "onDblclick", null);
    DropdownToggleDirective = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            exportAs: 'ngxDropdownToggle',
            selector: 'ngx-dropdown-toggle',
            host: {
                class: 'ngx-dropdown-toggle',
                '[class.disabled]': 'disabled'
            }
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], DropdownToggleDirective);
    return DropdownToggleDirective;
}());
export { DropdownToggleDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tdG9nZ2xlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9kcm9wZG93bi9kcm9wZG93bi10b2dnbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFhOUQ7SUFnQkUsaUNBQTZCLEVBQTJCO1FBQTNCLE9BQUUsR0FBRixFQUFFLENBQXlCO1FBZi9DLGNBQVMsdUJBQThDO1FBVXRELFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBUyxDQUFDO1FBR3JDLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFHeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQztJQUN2QyxDQUFDO0lBZEQsc0JBQUksNkNBQVE7YUFBWjtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDO2FBQ0QsVUFBYSxRQUFpQjtZQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25ELENBQUM7OztPQUhBO0lBZUQseUNBQU8sR0FBUCxVQUFRLEtBQVk7UUFDbEIsSUFBSSxJQUFJLENBQUMsU0FBUyx3QkFBNEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDaEUsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUdELCtDQUFhLEdBQWIsVUFBYyxLQUFZO1FBQ3hCLElBQUksSUFBSSxDQUFDLFNBQVMsb0NBQWtDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3RFLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6QjtJQUNILENBQUM7SUFHRCw0Q0FBVSxHQUFWLFVBQVcsS0FBWTtRQUNyQixJQUFJLElBQUksQ0FBQyxTQUFTLDhCQUErQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNuRSxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekI7SUFDSCxDQUFDOztnQkExQmdDLFVBQVU7O0lBZmxDO1FBQVIsS0FBSyxFQUFFOzs4REFBd0Q7SUFHaEU7UUFEQyxLQUFLLEVBQUU7OzsyREFHUDtJQUtTO1FBQVQsTUFBTSxFQUFFOzsyREFBb0M7SUFVN0M7UUFEQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7O3lDQUNuQixLQUFLOzswREFLbkI7SUFHRDtRQURDLFlBQVksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7eUNBQ25CLEtBQUs7O2dFQUt6QjtJQUdEO1FBREMsWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzt5Q0FDbkIsS0FBSzs7NkRBS3RCO0lBMUNVLHVCQUF1QjtRQVRuQyxTQUFTLENBQUM7WUFDVCw4Q0FBOEM7WUFDOUMsUUFBUSxFQUFFLG1CQUFtQjtZQUM3QixRQUFRLEVBQUUscUJBQXFCO1lBQy9CLElBQUksRUFBRTtnQkFDSixLQUFLLEVBQUUscUJBQXFCO2dCQUM1QixrQkFBa0IsRUFBRSxVQUFVO2FBQy9CO1NBQ0YsQ0FBQzt5Q0FpQmlDLFVBQVU7T0FoQmhDLHVCQUF1QixDQTJDbkM7SUFBRCw4QkFBQztDQUFBLEFBM0NELElBMkNDO1NBM0NZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5cbmltcG9ydCB7IERyb3Bkb3duU2hvd1R5cGVzIH0gZnJvbSAnLi9kcm9wZG93bi5zaG93LXR5cGVzLmVudW0nO1xuXG5ARGlyZWN0aXZlKHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICBleHBvcnRBczogJ25neERyb3Bkb3duVG9nZ2xlJyxcbiAgc2VsZWN0b3I6ICduZ3gtZHJvcGRvd24tdG9nZ2xlJyxcbiAgaG9zdDoge1xuICAgIGNsYXNzOiAnbmd4LWRyb3Bkb3duLXRvZ2dsZScsXG4gICAgJ1tjbGFzcy5kaXNhYmxlZF0nOiAnZGlzYWJsZWQnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgRHJvcGRvd25Ub2dnbGVEaXJlY3RpdmUge1xuICBASW5wdXQoKSBzaG93RXZlbnQ6IERyb3Bkb3duU2hvd1R5cGVzID0gRHJvcGRvd25TaG93VHlwZXMuQ2xpY2s7XG5cbiAgQElucHV0KClcbiAgZ2V0IGRpc2FibGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuICBzZXQgZGlzYWJsZWQoZGlzYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kaXNhYmxlZCA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eShkaXNhYmxlZCk7XG4gIH1cblxuICBAT3V0cHV0KCkgdG9nZ2xlID0gbmV3IEV2ZW50RW1pdHRlcjxFdmVudD4oKTtcblxuICByZWFkb25seSBlbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBfZGlzYWJsZWQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGVsOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50Pikge1xuICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgb25DbGljayhldmVudDogRXZlbnQpIHtcbiAgICBpZiAodGhpcy5zaG93RXZlbnQgPT09IERyb3Bkb3duU2hvd1R5cGVzLkNsaWNrICYmICF0aGlzLmRpc2FibGVkKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy50b2dnbGUuZW1pdChldmVudCk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY29udGV4dG1lbnUnLCBbJyRldmVudCddKVxuICBvbkNvbnRleHRtZW51KGV2ZW50OiBFdmVudCkge1xuICAgIGlmICh0aGlzLnNob3dFdmVudCA9PT0gRHJvcGRvd25TaG93VHlwZXMuQ29udGV4dG1lbnUgJiYgIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnRvZ2dsZS5lbWl0KGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdkYmxjbGljaycsIFsnJGV2ZW50J10pXG4gIG9uRGJsY2xpY2soZXZlbnQ6IEV2ZW50KSB7XG4gICAgaWYgKHRoaXMuc2hvd0V2ZW50ID09PSBEcm9wZG93blNob3dUeXBlcy5EYmxjbGljayAmJiAhdGhpcy5kaXNhYmxlZCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMudG9nZ2xlLmVtaXQoZXZlbnQpO1xuICAgIH1cbiAgfVxufVxuIl19