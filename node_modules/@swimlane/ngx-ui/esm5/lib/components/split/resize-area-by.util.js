import { __read } from "tslib";
import { isPercent } from './is-percent.util';
import { basisToValue } from './basis-to-value.util';
import { getMinMaxPct } from './get-min-max-pct.util';
export function resizeAreaBy(area, _delta, basisToPx) {
    if (area.fxFlexFill) {
        // area is fxFlexFill, distribute delta right
        return _delta;
    }
    var _a = __read(area.currentFlexBasis, 3), grow = _a[0], shrink = _a[1], basis = _a[2];
    var isPct = isPercent(basis);
    var basisValue = basisToValue(basis);
    // get baseBasis in percent
    var baseBasis = area.initialFlexBasis[2];
    var baseBasisPct = basisToValue(baseBasis) / (isPercent(baseBasis) ? basisToPx : 1);
    // get basis in px and %
    var basisPx = isPct ? basisValue * basisToPx : basisValue;
    // determine which dir and calc the diff
    var newBasisPx = basisPx + _delta;
    var newBasisPct = newBasisPx / basisToPx;
    var _b = __read(getMinMaxPct(area.minBasis, area.maxBasis, grow, shrink, baseBasisPct, basisToPx), 2), minBasisPct = _b[0], maxBasisPct = _b[1];
    // obey max and min
    newBasisPct = Math.max(newBasisPct, minBasisPct);
    newBasisPct = Math.min(newBasisPct, maxBasisPct);
    // calculate new basis on px
    newBasisPx = newBasisPct * basisToPx;
    // update flexlayout
    area.updateStyle(isPct ? newBasisPct : newBasisPx);
    // return actual change in px
    return newBasisPx - basisPx;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLWFyZWEtYnkudXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9zcGxpdC9yZXNpemUtYXJlYS1ieS51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUV0RCxNQUFNLFVBQVUsWUFBWSxDQUFDLElBQXdCLEVBQUUsTUFBYyxFQUFFLFNBQWlCO0lBQ3RGLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNuQiw2Q0FBNkM7UUFDN0MsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUVLLElBQUEscUNBQTZDLEVBQTVDLFlBQUksRUFBRSxjQUFNLEVBQUUsYUFBOEIsQ0FBQztJQUNwRCxJQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsSUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXZDLDJCQUEyQjtJQUMzQixJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsSUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRGLHdCQUF3QjtJQUN4QixJQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztJQUU1RCx3Q0FBd0M7SUFDeEMsSUFBSSxVQUFVLEdBQUcsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUNsQyxJQUFJLFdBQVcsR0FBRyxVQUFVLEdBQUcsU0FBUyxDQUFDO0lBRW5DLElBQUEsaUdBQThHLEVBQTdHLG1CQUFXLEVBQUUsbUJBQWdHLENBQUM7SUFFckgsbUJBQW1CO0lBQ25CLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNqRCxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFakQsNEJBQTRCO0lBQzVCLFVBQVUsR0FBRyxXQUFXLEdBQUcsU0FBUyxDQUFDO0lBRXJDLG9CQUFvQjtJQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVuRCw2QkFBNkI7SUFDN0IsT0FBTyxVQUFVLEdBQUcsT0FBTyxDQUFDO0FBQzlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTcGxpdEFyZWFEaXJlY3RpdmUgfSBmcm9tICcuL3NwbGl0LWFyZWEuZGlyZWN0aXZlJztcbmltcG9ydCB7IGlzUGVyY2VudCB9IGZyb20gJy4vaXMtcGVyY2VudC51dGlsJztcbmltcG9ydCB7IGJhc2lzVG9WYWx1ZSB9IGZyb20gJy4vYmFzaXMtdG8tdmFsdWUudXRpbCc7XG5pbXBvcnQgeyBnZXRNaW5NYXhQY3QgfSBmcm9tICcuL2dldC1taW4tbWF4LXBjdC51dGlsJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2l6ZUFyZWFCeShhcmVhOiBTcGxpdEFyZWFEaXJlY3RpdmUsIF9kZWx0YTogbnVtYmVyLCBiYXNpc1RvUHg6IG51bWJlcikge1xuICBpZiAoYXJlYS5meEZsZXhGaWxsKSB7XG4gICAgLy8gYXJlYSBpcyBmeEZsZXhGaWxsLCBkaXN0cmlidXRlIGRlbHRhIHJpZ2h0XG4gICAgcmV0dXJuIF9kZWx0YTtcbiAgfVxuXG4gIGNvbnN0IFtncm93LCBzaHJpbmssIGJhc2lzXSA9IGFyZWEuY3VycmVudEZsZXhCYXNpcztcbiAgY29uc3QgaXNQY3QgPSBpc1BlcmNlbnQoYmFzaXMpO1xuICBjb25zdCBiYXNpc1ZhbHVlID0gYmFzaXNUb1ZhbHVlKGJhc2lzKTtcblxuICAvLyBnZXQgYmFzZUJhc2lzIGluIHBlcmNlbnRcbiAgY29uc3QgYmFzZUJhc2lzID0gYXJlYS5pbml0aWFsRmxleEJhc2lzWzJdO1xuICBjb25zdCBiYXNlQmFzaXNQY3QgPSBiYXNpc1RvVmFsdWUoYmFzZUJhc2lzKSAvIChpc1BlcmNlbnQoYmFzZUJhc2lzKSA/IGJhc2lzVG9QeCA6IDEpO1xuXG4gIC8vIGdldCBiYXNpcyBpbiBweCBhbmQgJVxuICBjb25zdCBiYXNpc1B4ID0gaXNQY3QgPyBiYXNpc1ZhbHVlICogYmFzaXNUb1B4IDogYmFzaXNWYWx1ZTtcblxuICAvLyBkZXRlcm1pbmUgd2hpY2ggZGlyIGFuZCBjYWxjIHRoZSBkaWZmXG4gIGxldCBuZXdCYXNpc1B4ID0gYmFzaXNQeCArIF9kZWx0YTtcbiAgbGV0IG5ld0Jhc2lzUGN0ID0gbmV3QmFzaXNQeCAvIGJhc2lzVG9QeDtcblxuICBjb25zdCBbbWluQmFzaXNQY3QsIG1heEJhc2lzUGN0XSA9IGdldE1pbk1heFBjdChhcmVhLm1pbkJhc2lzLCBhcmVhLm1heEJhc2lzLCBncm93LCBzaHJpbmssIGJhc2VCYXNpc1BjdCwgYmFzaXNUb1B4KTtcblxuICAvLyBvYmV5IG1heCBhbmQgbWluXG4gIG5ld0Jhc2lzUGN0ID0gTWF0aC5tYXgobmV3QmFzaXNQY3QsIG1pbkJhc2lzUGN0KTtcbiAgbmV3QmFzaXNQY3QgPSBNYXRoLm1pbihuZXdCYXNpc1BjdCwgbWF4QmFzaXNQY3QpO1xuXG4gIC8vIGNhbGN1bGF0ZSBuZXcgYmFzaXMgb24gcHhcbiAgbmV3QmFzaXNQeCA9IG5ld0Jhc2lzUGN0ICogYmFzaXNUb1B4O1xuXG4gIC8vIHVwZGF0ZSBmbGV4bGF5b3V0XG4gIGFyZWEudXBkYXRlU3R5bGUoaXNQY3QgPyBuZXdCYXNpc1BjdCA6IG5ld0Jhc2lzUHgpO1xuXG4gIC8vIHJldHVybiBhY3R1YWwgY2hhbmdlIGluIHB4XG4gIHJldHVybiBuZXdCYXNpc1B4IC0gYmFzaXNQeDtcbn1cbiJdfQ==