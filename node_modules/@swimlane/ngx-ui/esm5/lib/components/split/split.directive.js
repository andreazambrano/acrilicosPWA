import { __decorate, __metadata, __read } from "tslib";
import { Input, ContentChildren, AfterContentInit, QueryList, ElementRef, Directive, OnChanges } from '@angular/core';
import { SplitAreaDirective } from './split-area.directive';
import { SplitHandleComponent } from './split-handle.component';
import { SplitDirection } from './split-direction.enum';
import { getMinMaxPct } from './get-min-max-pct.util';
import { basisToValue } from './basis-to-value.util';
import { isPercent } from './is-percent.util';
import { resizeAreaBy } from './resize-area-by.util';
var SplitDirective = /** @class */ (function () {
    function SplitDirective(elementRef) {
        this.elementRef = elementRef;
        this.direction = SplitDirection.Row;
    }
    Object.defineProperty(SplitDirective.prototype, "rowCss", {
        get: function () {
            return this.direction === SplitDirection.Row;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SplitDirective.prototype, "columnCss", {
        get: function () {
            return this.direction === SplitDirection.Column;
        },
        enumerable: true,
        configurable: true
    });
    SplitDirective.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.handles.forEach(function (d) { return d.drag.subscribe(function (ev) { return _this.onDrag(ev); }); });
        this.handles.forEach(function (d) { return d.dblclick.subscribe(function () { return _this.onDblClick(); }); });
        this.updateHandles();
    };
    SplitDirective.prototype.ngOnChanges = function () {
        this.updateHandles();
    };
    SplitDirective.prototype.updateHandles = function () {
        var _this = this;
        if (this.handles) {
            this.handles.forEach(function (d) { return (d.direction = _this.direction); });
        }
    };
    SplitDirective.prototype.onDblClick = function () {
        var basisToPx = (this.rowCss ? this.elementRef.nativeElement.clientWidth : this.elementRef.nativeElement.clientHeight) / 100;
        var area = this.areas.first;
        /* istanbul ignore if */
        if (!area)
            return;
        var _a = __read(area.currentFlexBasis, 3), grow = _a[0], shrink = _a[1], basis = _a[2];
        var isPct = isPercent(basis);
        var basisValue = basisToValue(basis);
        // get basis in px and %
        var basisPx = isPct ? basisValue * basisToPx : basisValue;
        var basisPct = basisPx / basisToPx;
        // get baseBasis in percent
        var baseBasis = area.initialFlexBasis[2];
        var baseBasisPct = basisToValue(baseBasis) / (isPercent(baseBasis) ? basisToPx : 1);
        var _b = __read(getMinMaxPct(area.minBasis, area.maxBasis, grow, shrink, baseBasisPct, basisToPx), 2), minBasisPct = _b[0], maxBasisPct = _b[1];
        // max and min deltas
        var deltaMin = basisPct - minBasisPct;
        var deltaMax = maxBasisPct - basisPct;
        var delta = deltaMin < deltaMax ? deltaMax : -deltaMin;
        var deltaPx = delta * basisToPx;
        this.resize(deltaPx);
    };
    SplitDirective.prototype.onDrag = function (_a) {
        var movementX = _a.movementX, movementY = _a.movementY;
        var deltaPx = this.direction === SplitDirection.Row ? movementX : movementY;
        this.resize(deltaPx);
    };
    SplitDirective.prototype.resize = function (delta) {
        var basisToPx = (this.rowCss ? this.elementRef.nativeElement.clientWidth : this.elementRef.nativeElement.clientHeight) / 100;
        var areas = this.areas.toArray();
        // for now assuming splitter is after first area
        var _a = __read(areas), first = _a[0], rest = _a.slice(1);
        [first].forEach(function (area) { return (delta = resizeAreaBy(area, delta, basisToPx)); });
        // delta is distributed left to right
        rest.forEach(function (area) { return (delta += resizeAreaBy(area, -delta, basisToPx)); });
    };
    SplitDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input('ngxSplit'),
        __metadata("design:type", Object)
    ], SplitDirective.prototype, "direction", void 0);
    __decorate([
        ContentChildren(SplitHandleComponent, { descendants: false }),
        __metadata("design:type", QueryList)
    ], SplitDirective.prototype, "handles", void 0);
    __decorate([
        ContentChildren(SplitAreaDirective, { descendants: false }),
        __metadata("design:type", QueryList)
    ], SplitDirective.prototype, "areas", void 0);
    SplitDirective = __decorate([
        Directive({
            exportAs: 'ngxSplit',
            selector: '[ngxSplit]',
            host: {
                class: 'ngx-split',
                '[class.row-split]': 'rowCss',
                '[class.column-split]': 'columnCss'
            }
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SplitDirective);
    return SplitDirective;
}());
export { SplitDirective };
//# sourceMappingURL=data:application/json;base64,