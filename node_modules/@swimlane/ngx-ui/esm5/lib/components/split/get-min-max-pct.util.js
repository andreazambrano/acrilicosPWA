import { basisToValue } from './basis-to-value.util';
import { isPercent } from './is-percent.util';
export function getMinMaxPct(minBasis, maxBasis, grow, shrink, baseBasisPct, basisToPx) {
    // minimum and maximum basis determined by max/min inputs
    var minBasisPct = basisToValue(minBasis) / (isPercent(minBasis) ? 1 : basisToPx);
    var maxBasisPct = basisToValue(maxBasis) / (isPercent(maxBasis) ? 1 : basisToPx);
    // minimum and maximum basis determined by flex inputs
    minBasisPct = Math.max(minBasisPct || 0, shrink === '0' ? baseBasisPct : 0);
    maxBasisPct = Math.min(maxBasisPct || 100, grow === '0' ? baseBasisPct : 100);
    return [minBasisPct, maxBasisPct];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LW1pbi1tYXgtcGN0LnV0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvc3BsaXQvZ2V0LW1pbi1tYXgtcGN0LnV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU5QyxNQUFNLFVBQVUsWUFBWSxDQUMxQixRQUFnQixFQUNoQixRQUFnQixFQUNoQixJQUFZLEVBQ1osTUFBYyxFQUNkLFlBQW9CLEVBQ3BCLFNBQWlCO0lBRWpCLHlEQUF5RDtJQUN6RCxJQUFJLFdBQVcsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakYsSUFBSSxXQUFXLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRWpGLHNEQUFzRDtJQUN0RCxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksQ0FBQyxFQUFFLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUUsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLEdBQUcsRUFBRSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRTlFLE9BQU8sQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDcEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJhc2lzVG9WYWx1ZSB9IGZyb20gJy4vYmFzaXMtdG8tdmFsdWUudXRpbCc7XG5pbXBvcnQgeyBpc1BlcmNlbnQgfSBmcm9tICcuL2lzLXBlcmNlbnQudXRpbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNaW5NYXhQY3QoXG4gIG1pbkJhc2lzOiBzdHJpbmcsXG4gIG1heEJhc2lzOiBzdHJpbmcsXG4gIGdyb3c6IHN0cmluZyxcbiAgc2hyaW5rOiBzdHJpbmcsXG4gIGJhc2VCYXNpc1BjdDogbnVtYmVyLFxuICBiYXNpc1RvUHg6IG51bWJlclxuKSB7XG4gIC8vIG1pbmltdW0gYW5kIG1heGltdW0gYmFzaXMgZGV0ZXJtaW5lZCBieSBtYXgvbWluIGlucHV0c1xuICBsZXQgbWluQmFzaXNQY3QgPSBiYXNpc1RvVmFsdWUobWluQmFzaXMpIC8gKGlzUGVyY2VudChtaW5CYXNpcykgPyAxIDogYmFzaXNUb1B4KTtcbiAgbGV0IG1heEJhc2lzUGN0ID0gYmFzaXNUb1ZhbHVlKG1heEJhc2lzKSAvIChpc1BlcmNlbnQobWF4QmFzaXMpID8gMSA6IGJhc2lzVG9QeCk7XG5cbiAgLy8gbWluaW11bSBhbmQgbWF4aW11bSBiYXNpcyBkZXRlcm1pbmVkIGJ5IGZsZXggaW5wdXRzXG4gIG1pbkJhc2lzUGN0ID0gTWF0aC5tYXgobWluQmFzaXNQY3QgfHwgMCwgc2hyaW5rID09PSAnMCcgPyBiYXNlQmFzaXNQY3QgOiAwKTtcbiAgbWF4QmFzaXNQY3QgPSBNYXRoLm1pbihtYXhCYXNpc1BjdCB8fCAxMDAsIGdyb3cgPT09ICcwJyA/IGJhc2VCYXNpc1BjdCA6IDEwMCk7XG5cbiAgcmV0dXJuIFttaW5CYXNpc1BjdCwgbWF4QmFzaXNQY3RdO1xufVxuIl19