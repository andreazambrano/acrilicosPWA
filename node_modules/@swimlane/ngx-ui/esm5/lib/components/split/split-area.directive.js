import { __decorate, __metadata, __param } from "tslib";
import { Directive, Optional, Self, Input } from '@angular/core';
import { DefaultFlexDirective, validateBasis } from '@angular/flex-layout';
var SplitAreaDirective = /** @class */ (function () {
    function SplitAreaDirective(flexDirective) {
        this.flexDirective = flexDirective;
        this.overflow = 'hidden';
    }
    Object.defineProperty(SplitAreaDirective.prototype, "fxFlexFill", {
        get: function () {
            return this.fxFlex === '';
        },
        enumerable: true,
        configurable: true
    });
    SplitAreaDirective.prototype.ngOnChanges = function () {
        this.currentFlexBasis = this.initialFlexBasis = this.getCurrentFlexParts();
    };
    SplitAreaDirective.prototype.updateStyle = function (flexBasis) {
        var flex = this.flexDirective;
        if (typeof flexBasis === 'undefined') {
            flexBasis = flex.activatedValue || '';
        }
        if (typeof flexBasis === 'number') {
            flexBasis = this.isPercent() ? flexBasis + "%" : flexBasis + "px";
        }
        if (flexBasis.indexOf(' ') < 0) {
            var grow = flex.grow;
            var shrink = flex.shrink;
            this.currentFlexBasis = [grow, shrink, flexBasis];
            flexBasis = this.currentFlexBasis.join(' ');
        }
        else {
            this.currentFlexBasis = flexBasis.split(' ');
        }
        flex.activatedValue = this.currentFlexBasis[2];
    };
    SplitAreaDirective.prototype.isPercent = function (basis) {
        if (!basis) {
            var flex = this.flexDirective;
            basis = flex.activatedValue || '1 1 1e-9px';
        }
        var hasCalc = String(basis).indexOf('calc') > -1;
        return String(basis).indexOf('%') > -1 && !hasCalc;
    };
    SplitAreaDirective.prototype.getCurrentFlexParts = function () {
        var flex = this.flexDirective;
        var basis = (flex && flex.activatedValue) || '1 1 1e-9px';
        return validateBasis(String(basis).replace(';', ''), flex.grow, flex.shrink);
    };
    SplitAreaDirective.ctorParameters = function () { return [
        { type: DefaultFlexDirective, decorators: [{ type: Optional }, { type: Self }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SplitAreaDirective.prototype, "minBasis", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SplitAreaDirective.prototype, "maxBasis", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SplitAreaDirective.prototype, "fxFlex", void 0);
    SplitAreaDirective = __decorate([
        Directive({
            exportAs: 'ngxSplitArea',
            selector: '[ngxSplitArea]',
            host: {
                class: 'ngx-split-area',
                '[style.overflow]': 'overflow'
            }
        }),
        __param(0, Optional()),
        __param(0, Self()),
        __metadata("design:paramtypes", [DefaultFlexDirective])
    ], SplitAreaDirective);
    return SplitAreaDirective;
}());
export { SplitAreaDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXQtYXJlYS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvc3BsaXQvc3BsaXQtYXJlYS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBVTNFO0lBYUUsNEJBR1csYUFBbUM7UUFBbkMsa0JBQWEsR0FBYixhQUFhLENBQXNCO1FBWDlDLGFBQVEsR0FBVyxRQUFRLENBQUM7SUFZekIsQ0FBQztJQVJKLHNCQUFJLDBDQUFVO2FBQWQ7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssRUFBRSxDQUFDO1FBQzVCLENBQUM7OztPQUFBO0lBUUQsd0NBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDN0UsQ0FBQztJQUVELHdDQUFXLEdBQVgsVUFBWSxTQUEyQjtRQUNyQyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ2hDLElBQUksT0FBTyxTQUFTLEtBQUssV0FBVyxFQUFFO1lBQ3BDLFNBQVMsR0FBRyxJQUFJLENBQUMsY0FBYyxJQUFJLEVBQUUsQ0FBQztTQUN2QztRQUNELElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO1lBQ2pDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFJLFNBQVMsTUFBRyxDQUFDLENBQUMsQ0FBSSxTQUFTLE9BQUksQ0FBQztTQUNuRTtRQUVELElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDOUIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN2QixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQzNCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDbEQsU0FBUyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDN0M7YUFBTTtZQUNMLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzlDO1FBRUQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELHNDQUFTLEdBQVQsVUFBVSxLQUFjO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1lBQ2hDLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxJQUFJLFlBQVksQ0FBQztTQUM3QztRQUNELElBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbkQsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3JELENBQUM7SUFFTyxnREFBbUIsR0FBM0I7UUFDRSxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ2hDLElBQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxZQUFZLENBQUM7UUFDNUQsT0FBTyxhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0UsQ0FBQzs7Z0JBekN5QixvQkFBb0IsdUJBRjNDLFFBQVEsWUFDUixJQUFJOztJQWRFO1FBQVIsS0FBSyxFQUFFOzt3REFBa0I7SUFDakI7UUFBUixLQUFLLEVBQUU7O3dEQUFrQjtJQUNqQjtRQUFSLEtBQUssRUFBRTs7c0RBQWdCO0lBSGIsa0JBQWtCO1FBUjlCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxjQUFjO1lBQ3hCLFFBQVEsRUFBRSxnQkFBZ0I7WUFDMUIsSUFBSSxFQUFFO2dCQUNKLEtBQUssRUFBRSxnQkFBZ0I7Z0JBQ3ZCLGtCQUFrQixFQUFFLFVBQVU7YUFDL0I7U0FDRixDQUFDO1FBZUcsV0FBQSxRQUFRLEVBQUUsQ0FBQTtRQUNWLFdBQUEsSUFBSSxFQUFFLENBQUE7eUNBQ2lCLG9CQUFvQjtPQWhCbkMsa0JBQWtCLENBMEQ5QjtJQUFELHlCQUFDO0NBQUEsQUExREQsSUEwREM7U0ExRFksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBPcHRpb25hbCwgU2VsZiwgSW5wdXQsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGVmYXVsdEZsZXhEaXJlY3RpdmUsIHZhbGlkYXRlQmFzaXMgfSBmcm9tICdAYW5ndWxhci9mbGV4LWxheW91dCc7XG5cbkBEaXJlY3RpdmUoe1xuICBleHBvcnRBczogJ25neFNwbGl0QXJlYScsXG4gIHNlbGVjdG9yOiAnW25neFNwbGl0QXJlYV0nLFxuICBob3N0OiB7XG4gICAgY2xhc3M6ICduZ3gtc3BsaXQtYXJlYScsXG4gICAgJ1tzdHlsZS5vdmVyZmxvd10nOiAnb3ZlcmZsb3cnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgU3BsaXRBcmVhRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgbWluQmFzaXM6IHN0cmluZztcbiAgQElucHV0KCkgbWF4QmFzaXM6IHN0cmluZztcbiAgQElucHV0KCkgZnhGbGV4OiBzdHJpbmc7XG5cbiAgb3ZlcmZsb3c6IHN0cmluZyA9ICdoaWRkZW4nO1xuICBpbml0aWFsRmxleEJhc2lzOiBzdHJpbmdbXTtcbiAgY3VycmVudEZsZXhCYXNpczogc3RyaW5nW107XG5cbiAgZ2V0IGZ4RmxleEZpbGwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZnhGbGV4ID09PSAnJztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgQFNlbGYoKVxuICAgIHJlYWRvbmx5IGZsZXhEaXJlY3RpdmU6IERlZmF1bHRGbGV4RGlyZWN0aXZlXG4gICkge31cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICB0aGlzLmN1cnJlbnRGbGV4QmFzaXMgPSB0aGlzLmluaXRpYWxGbGV4QmFzaXMgPSB0aGlzLmdldEN1cnJlbnRGbGV4UGFydHMoKTtcbiAgfVxuXG4gIHVwZGF0ZVN0eWxlKGZsZXhCYXNpcz86IHN0cmluZyB8IG51bWJlcikge1xuICAgIGNvbnN0IGZsZXggPSB0aGlzLmZsZXhEaXJlY3RpdmU7XG4gICAgaWYgKHR5cGVvZiBmbGV4QmFzaXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBmbGV4QmFzaXMgPSBmbGV4LmFjdGl2YXRlZFZhbHVlIHx8ICcnO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZsZXhCYXNpcyA9PT0gJ251bWJlcicpIHtcbiAgICAgIGZsZXhCYXNpcyA9IHRoaXMuaXNQZXJjZW50KCkgPyBgJHtmbGV4QmFzaXN9JWAgOiBgJHtmbGV4QmFzaXN9cHhgO1xuICAgIH1cblxuICAgIGlmIChmbGV4QmFzaXMuaW5kZXhPZignICcpIDwgMCkge1xuICAgICAgY29uc3QgZ3JvdyA9IGZsZXguZ3JvdztcbiAgICAgIGNvbnN0IHNocmluayA9IGZsZXguc2hyaW5rO1xuICAgICAgdGhpcy5jdXJyZW50RmxleEJhc2lzID0gW2dyb3csIHNocmluaywgZmxleEJhc2lzXTtcbiAgICAgIGZsZXhCYXNpcyA9IHRoaXMuY3VycmVudEZsZXhCYXNpcy5qb2luKCcgJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudEZsZXhCYXNpcyA9IGZsZXhCYXNpcy5zcGxpdCgnICcpO1xuICAgIH1cblxuICAgIGZsZXguYWN0aXZhdGVkVmFsdWUgPSB0aGlzLmN1cnJlbnRGbGV4QmFzaXNbMl07XG4gIH1cblxuICBpc1BlcmNlbnQoYmFzaXM/OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoIWJhc2lzKSB7XG4gICAgICBjb25zdCBmbGV4ID0gdGhpcy5mbGV4RGlyZWN0aXZlO1xuICAgICAgYmFzaXMgPSBmbGV4LmFjdGl2YXRlZFZhbHVlIHx8ICcxIDEgMWUtOXB4JztcbiAgICB9XG4gICAgY29uc3QgaGFzQ2FsYyA9IFN0cmluZyhiYXNpcykuaW5kZXhPZignY2FsYycpID4gLTE7XG4gICAgcmV0dXJuIFN0cmluZyhiYXNpcykuaW5kZXhPZignJScpID4gLTEgJiYgIWhhc0NhbGM7XG4gIH1cblxuICBwcml2YXRlIGdldEN1cnJlbnRGbGV4UGFydHMoKSB7XG4gICAgY29uc3QgZmxleCA9IHRoaXMuZmxleERpcmVjdGl2ZTtcbiAgICBjb25zdCBiYXNpcyA9IChmbGV4ICYmIGZsZXguYWN0aXZhdGVkVmFsdWUpIHx8ICcxIDEgMWUtOXB4JztcbiAgICByZXR1cm4gdmFsaWRhdGVCYXNpcyhTdHJpbmcoYmFzaXMpLnJlcGxhY2UoJzsnLCAnJyksIGZsZXguZ3JvdywgZmxleC5zaHJpbmspO1xuICB9XG59XG4iXX0=