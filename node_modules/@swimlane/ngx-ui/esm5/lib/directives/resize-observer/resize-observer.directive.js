import { __decorate, __metadata, __values } from "tslib";
import { Directive, Output, EventEmitter, OnInit, OnDestroy, ElementRef } from '@angular/core';
import ResizeObserver from 'resize-observer-polyfill';
var ResizeObserverDirective = /** @class */ (function () {
    function ResizeObserverDirective(_el) {
        this._el = _el;
        this.resize = new EventEmitter();
    }
    ResizeObserverDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._observer = new ResizeObserver(function (entries) {
            var e_1, _a;
            try {
                for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
                    var entry = entries_1_1.value;
                    _this.onResize(entry.contentRect);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
        this._observer.observe(this._el.nativeElement);
    };
    ResizeObserverDirective.prototype.ngOnDestroy = function () {
        this._observer.unobserve(this._el.nativeElement);
    };
    ResizeObserverDirective.prototype.onResize = function (e) {
        var _this = this;
        if (this._timer) {
            clearTimeout(this._timer);
            this._timer = undefined;
        }
        this._timer = setTimeout(function () { return _this.resize.emit(e); }, 100);
    };
    ResizeObserverDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Output('resizeObserver'),
        __metadata("design:type", Object)
    ], ResizeObserverDirective.prototype, "resize", void 0);
    ResizeObserverDirective = __decorate([
        Directive({
            exportAs: 'resizeObserver',
            selector: '[resizeObserver]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], ResizeObserverDirective);
    return ResizeObserverDirective;
}());
export { ResizeObserverDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtdWkvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9yZXNpemUtb2JzZXJ2ZXIvcmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9GLE9BQU8sY0FBYyxNQUFNLDBCQUEwQixDQUFDO0FBTXREO0lBTUUsaUNBQTZCLEdBQTRCO1FBQTVCLFFBQUcsR0FBSCxHQUFHLENBQXlCO1FBTC9CLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBNEIsQ0FBQztJQUtwQixDQUFDO0lBRTdELDBDQUFRLEdBQVI7UUFBQSxpQkFRQztRQVBDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxjQUFjLENBQUMsVUFBQSxPQUFPOzs7Z0JBQ3pDLEtBQW9CLElBQUEsWUFBQSxTQUFBLE9BQU8sQ0FBQSxnQ0FBQSxxREFBRTtvQkFBeEIsSUFBTSxLQUFLLG9CQUFBO29CQUNkLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2lCQUNsQzs7Ozs7Ozs7O1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCw2Q0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsMENBQVEsR0FBUixVQUFTLENBQTJCO1FBQXBDLGlCQU9DO1FBTkMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztTQUN6QjtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBbkIsQ0FBbUIsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMzRCxDQUFDOztnQkF2QmlDLFVBQVU7O0lBTGxCO1FBQXpCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQzs7MkRBQXVEO0lBRHJFLHVCQUF1QjtRQUpuQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLFFBQVEsRUFBRSxrQkFBa0I7U0FDN0IsQ0FBQzt5Q0FPa0MsVUFBVTtPQU5qQyx1QkFBdUIsQ0E4Qm5DO0lBQUQsOEJBQUM7Q0FBQSxBQTlCRCxJQThCQztTQTlCWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIE9uRGVzdHJveSwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IFJlc2l6ZU9ic2VydmVyIGZyb20gJ3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbCc7XG5cbkBEaXJlY3RpdmUoe1xuICBleHBvcnRBczogJ3Jlc2l6ZU9ic2VydmVyJyxcbiAgc2VsZWN0b3I6ICdbcmVzaXplT2JzZXJ2ZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBSZXNpemVPYnNlcnZlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQE91dHB1dCgncmVzaXplT2JzZXJ2ZXInKSByZXNpemUgPSBuZXcgRXZlbnRFbWl0dGVyPFBhcnRpYWw8RE9NUmVjdFJlYWRPbmx5Pj4oKTtcblxuICBwcml2YXRlIF9vYnNlcnZlcjogUmVzaXplT2JzZXJ2ZXI7XG4gIHByaXZhdGUgX3RpbWVyOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBfZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuX29ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICAgIHRoaXMub25SZXNpemUoZW50cnkuY29udGVudFJlY3QpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5fb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLl9lbC5uYXRpdmVFbGVtZW50KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX29ic2VydmVyLnVub2JzZXJ2ZSh0aGlzLl9lbC5uYXRpdmVFbGVtZW50KTtcbiAgfVxuXG4gIG9uUmVzaXplKGU6IFBhcnRpYWw8RE9NUmVjdFJlYWRPbmx5Pikge1xuICAgIGlmICh0aGlzLl90aW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKTtcbiAgICAgIHRoaXMuX3RpbWVyID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHRoaXMuX3RpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnJlc2l6ZS5lbWl0KGUpLCAxMDApO1xuICB9XG59XG4iXX0=