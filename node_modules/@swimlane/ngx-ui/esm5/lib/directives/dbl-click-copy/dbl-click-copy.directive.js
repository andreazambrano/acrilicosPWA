import { __decorate, __metadata } from "tslib";
import { Directive, Output, EventEmitter, HostListener, ElementRef } from '@angular/core';
// tslint:disable-next-line:directive-selector
var DblClickCopyDirective = /** @class */ (function () {
    function DblClickCopyDirective(element) {
        this.element = element;
        this.onCopy = new EventEmitter();
    }
    DblClickCopyDirective.prototype.onDblClick = function () {
        var selection = getSelection();
        var range = document.createRange();
        range.selectNodeContents(this.element.nativeElement);
        selection.removeAllRanges();
        selection.addRange(range);
        document.execCommand('copy');
        this.onCopy.emit(range);
    };
    DblClickCopyDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], DblClickCopyDirective.prototype, "onCopy", void 0);
    __decorate([
        HostListener('dblclick'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], DblClickCopyDirective.prototype, "onDblClick", null);
    DblClickCopyDirective = __decorate([
        Directive({
            selector: '[dbl-click-copy]',
            host: {
                title: 'Double click to copy to clipboard'
            }
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], DblClickCopyDirective);
    return DblClickCopyDirective;
}());
export { DblClickCopyDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGJsLWNsaWNrLWNvcHkuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3aW1sYW5lL25neC11aS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2RibC1jbGljay1jb3B5L2RibC1jbGljay1jb3B5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUYsOENBQThDO0FBTzlDO0lBR0UsK0JBQTZCLE9BQWdDO1FBQWhDLFlBQU8sR0FBUCxPQUFPLENBQXlCO1FBRm5ELFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBUyxDQUFDO0lBRW1CLENBQUM7SUFHakUsMENBQVUsR0FBVjtRQUNFLElBQU0sU0FBUyxHQUFHLFlBQVksRUFBRSxDQUFDO1FBQ2pDLElBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVyQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNyRCxTQUFTLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDNUIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixRQUFRLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7O2dCQWJxQyxVQUFVOztJQUZ0QztRQUFULE1BQU0sRUFBRTs7eURBQW9DO0lBSzdDO1FBREMsWUFBWSxDQUFDLFVBQVUsQ0FBQzs7OzsyREFXeEI7SUFoQlUscUJBQXFCO1FBTmpDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsSUFBSSxFQUFFO2dCQUNKLEtBQUssRUFBRSxtQ0FBbUM7YUFDM0M7U0FDRixDQUFDO3lDQUlzQyxVQUFVO09BSHJDLHFCQUFxQixDQWlCakM7SUFBRCw0QkFBQztDQUFBLEFBakJELElBaUJDO1NBakJZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZGJsLWNsaWNrLWNvcHldJyxcbiAgaG9zdDoge1xuICAgIHRpdGxlOiAnRG91YmxlIGNsaWNrIHRvIGNvcHkgdG8gY2xpcGJvYXJkJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIERibENsaWNrQ29weURpcmVjdGl2ZSB7XG4gIEBPdXRwdXQoKSBvbkNvcHkgPSBuZXcgRXZlbnRFbWl0dGVyPFJhbmdlPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4pIHt9XG5cbiAgQEhvc3RMaXN0ZW5lcignZGJsY2xpY2snKVxuICBvbkRibENsaWNrKCk6IHZvaWQge1xuICAgIGNvbnN0IHNlbGVjdGlvbiA9IGdldFNlbGVjdGlvbigpO1xuICAgIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcblxuICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCk7XG4gICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcblxuICAgIHRoaXMub25Db3B5LmVtaXQocmFuZ2UpO1xuICB9XG59XG4iXX0=