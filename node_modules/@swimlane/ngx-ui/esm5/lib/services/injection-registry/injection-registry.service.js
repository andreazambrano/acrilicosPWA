import { __assign } from "tslib";
/* istanbul ignore next */
var InjectionRegistryService = /** @class */ (function () {
    function InjectionRegistryService(injectionService) {
        this.injectionService = injectionService;
        this.defaults = {};
        this.components = new Map();
    }
    InjectionRegistryService.prototype.getByType = function (type) {
        if (type === void 0) { type = this.type; }
        return this.components.get(type);
    };
    InjectionRegistryService.prototype.create = function (bindings) {
        return this.createByType(this.type, bindings);
    };
    InjectionRegistryService.prototype.createByType = function (type, bindings) {
        var location = bindings.parentContainer;
        bindings = this.assignDefaults(bindings);
        var component = this.injectComponent(type, bindings, location);
        this.register(type, component);
        return component;
    };
    InjectionRegistryService.prototype.destroy = function (instance) {
        var compsByType = this.components.get(instance.componentType);
        if (compsByType && compsByType.length) {
            var idx = compsByType.indexOf(instance);
            if (idx > -1) {
                var component = compsByType[idx];
                component.destroy();
                compsByType.splice(idx, 1);
            }
        }
    };
    InjectionRegistryService.prototype.destroyAll = function () {
        this.destroyByType(this.type);
    };
    InjectionRegistryService.prototype.destroyByType = function (type) {
        var comps = this.components.get(type);
        if (comps && comps.length) {
            var i = comps.length - 1;
            while (i >= 0) {
                this.destroy(comps[i--]);
            }
        }
    };
    InjectionRegistryService.prototype.injectComponent = function (type, bindings, location) {
        return this.injectionService.appendComponent(type, bindings, location);
    };
    InjectionRegistryService.prototype.assignDefaults = function (bindings) {
        var inputs = __assign({}, this.defaults.inputs);
        var outputs = __assign({}, this.defaults.outputs);
        if (!bindings.inputs && !bindings.outputs) {
            bindings = { inputs: bindings };
        }
        if (inputs) {
            bindings.inputs = __assign(__assign({}, inputs), bindings.inputs);
        }
        if (outputs) {
            bindings.outputs = __assign(__assign({}, outputs), bindings.outputs);
        }
        return bindings;
    };
    InjectionRegistryService.prototype.register = function (type, component) {
        if (!this.components.has(type)) {
            this.components.set(type, []);
        }
        var types = this.components.get(type);
        types.push(component);
    };
    return InjectionRegistryService;
}());
export { InjectionRegistryService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0aW9uLXJlZ2lzdHJ5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dpbWxhbmUvbmd4LXVpLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2luamVjdGlvbi1yZWdpc3RyeS9pbmplY3Rpb24tcmVnaXN0cnkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBS0EsMEJBQTBCO0FBQzFCO0lBTUUsa0NBQStCLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBSHZELGFBQVEsR0FBb0IsRUFBRSxDQUFDO1FBQy9CLGVBQVUsR0FBRyxJQUFJLEdBQUcsRUFBK0IsQ0FBQztJQUVNLENBQUM7SUFFckUsNENBQVMsR0FBVCxVQUFVLElBQXlCO1FBQXpCLHFCQUFBLEVBQUEsT0FBZ0IsSUFBSSxDQUFDLElBQUk7UUFDakMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQseUNBQU0sR0FBTixVQUFPLFFBQWdCO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCwrQ0FBWSxHQUFaLFVBQWEsSUFBYSxFQUFFLFFBQXlCO1FBQ25ELElBQU0sUUFBUSxHQUFJLFFBQWdCLENBQUMsZUFBZSxDQUFDO1FBQ25ELFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXpDLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUUvQixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsMENBQU8sR0FBUCxVQUFRLFFBQXlCO1FBQy9CLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVoRSxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLElBQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFMUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQ1osSUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ3BCLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzVCO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsNkNBQVUsR0FBVjtRQUNFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxnREFBYSxHQUFiLFVBQWMsSUFBYTtRQUN6QixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDYixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDMUI7U0FDRjtJQUNILENBQUM7SUFFUyxrREFBZSxHQUF6QixVQUEwQixJQUFhLEVBQUUsUUFBeUIsRUFBRSxRQUFTO1FBQzNFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFUyxpREFBYyxHQUF4QixVQUF5QixRQUFhO1FBQ3BDLElBQU0sTUFBTSxnQkFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBRSxDQUFDO1FBQzNDLElBQU0sT0FBTyxnQkFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBRSxDQUFDO1FBRTdDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRTtZQUN6QyxRQUFRLEdBQUcsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUM7U0FDakM7UUFFRCxJQUFJLE1BQU0sRUFBRTtZQUNWLFFBQVEsQ0FBQyxNQUFNLHlCQUFRLE1BQU0sR0FBSyxRQUFRLENBQUMsTUFBTSxDQUFFLENBQUM7U0FDckQ7UUFFRCxJQUFJLE9BQU8sRUFBRTtZQUNYLFFBQVEsQ0FBQyxPQUFPLHlCQUFRLE9BQU8sR0FBSyxRQUFRLENBQUMsT0FBTyxDQUFFLENBQUM7U0FDeEQ7UUFFRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRVMsMkNBQVEsR0FBbEIsVUFBbUIsSUFBYSxFQUFFLFNBQTBCO1FBQzFELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM5QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDL0I7UUFFRCxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFDSCwrQkFBQztBQUFELENBQUMsQUF0RkQsSUFzRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSW5qZWN0aW9uU2VydmljZSB9IGZyb20gJy4uL2luamVjdGlvbi9pbmplY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBQYXJ0aWFsQmluZGluZ3MgfSBmcm9tICcuL3BhcnRpYWwtYmluZGluZ3MuaW50ZXJmYWNlJztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJbmplY3Rpb25SZWdpc3RyeVNlcnZpY2U8VCA9IGFueT4ge1xuICBwcm90ZWN0ZWQgYWJzdHJhY3QgdHlwZTogVHlwZTxUPjtcblxuICBwcm90ZWN0ZWQgZGVmYXVsdHM6IFBhcnRpYWxCaW5kaW5ncyA9IHt9O1xuICBwcm90ZWN0ZWQgY29tcG9uZW50cyA9IG5ldyBNYXA8YW55LCBBcnJheTxDb21wb25lbnRSZWY8VD4+PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCByZWFkb25seSBpbmplY3Rpb25TZXJ2aWNlOiBJbmplY3Rpb25TZXJ2aWNlKSB7fVxuXG4gIGdldEJ5VHlwZSh0eXBlOiBUeXBlPFQ+ID0gdGhpcy50eXBlKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cy5nZXQodHlwZSk7XG4gIH1cblxuICBjcmVhdGUoYmluZGluZ3M6IG9iamVjdCk6IENvbXBvbmVudFJlZjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlQnlUeXBlKHRoaXMudHlwZSwgYmluZGluZ3MpO1xuICB9XG5cbiAgY3JlYXRlQnlUeXBlKHR5cGU6IFR5cGU8VD4sIGJpbmRpbmdzOiBQYXJ0aWFsQmluZGluZ3MpOiBDb21wb25lbnRSZWY8VD4ge1xuICAgIGNvbnN0IGxvY2F0aW9uID0gKGJpbmRpbmdzIGFzIGFueSkucGFyZW50Q29udGFpbmVyO1xuICAgIGJpbmRpbmdzID0gdGhpcy5hc3NpZ25EZWZhdWx0cyhiaW5kaW5ncyk7XG5cbiAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmluamVjdENvbXBvbmVudCh0eXBlLCBiaW5kaW5ncywgbG9jYXRpb24pO1xuICAgIHRoaXMucmVnaXN0ZXIodHlwZSwgY29tcG9uZW50KTtcblxuICAgIHJldHVybiBjb21wb25lbnQ7XG4gIH1cblxuICBkZXN0cm95KGluc3RhbmNlOiBDb21wb25lbnRSZWY8VD4pOiB2b2lkIHtcbiAgICBjb25zdCBjb21wc0J5VHlwZSA9IHRoaXMuY29tcG9uZW50cy5nZXQoaW5zdGFuY2UuY29tcG9uZW50VHlwZSk7XG5cbiAgICBpZiAoY29tcHNCeVR5cGUgJiYgY29tcHNCeVR5cGUubGVuZ3RoKSB7XG4gICAgICBjb25zdCBpZHggPSBjb21wc0J5VHlwZS5pbmRleE9mKGluc3RhbmNlKTtcblxuICAgICAgaWYgKGlkeCA+IC0xKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGNvbXBzQnlUeXBlW2lkeF07XG4gICAgICAgIGNvbXBvbmVudC5kZXN0cm95KCk7XG4gICAgICAgIGNvbXBzQnlUeXBlLnNwbGljZShpZHgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3lBbGwoKTogdm9pZCB7XG4gICAgdGhpcy5kZXN0cm95QnlUeXBlKHRoaXMudHlwZSk7XG4gIH1cblxuICBkZXN0cm95QnlUeXBlKHR5cGU6IFR5cGU8VD4pOiB2b2lkIHtcbiAgICBjb25zdCBjb21wcyA9IHRoaXMuY29tcG9uZW50cy5nZXQodHlwZSk7XG5cbiAgICBpZiAoY29tcHMgJiYgY29tcHMubGVuZ3RoKSB7XG4gICAgICBsZXQgaSA9IGNvbXBzLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveShjb21wc1tpLS1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgaW5qZWN0Q29tcG9uZW50KHR5cGU6IFR5cGU8VD4sIGJpbmRpbmdzOiBQYXJ0aWFsQmluZGluZ3MsIGxvY2F0aW9uPyk6IENvbXBvbmVudFJlZjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuaW5qZWN0aW9uU2VydmljZS5hcHBlbmRDb21wb25lbnQodHlwZSwgYmluZGluZ3MsIGxvY2F0aW9uKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3NpZ25EZWZhdWx0cyhiaW5kaW5nczogYW55KTogUGFydGlhbEJpbmRpbmdzIHtcbiAgICBjb25zdCBpbnB1dHMgPSB7IC4uLnRoaXMuZGVmYXVsdHMuaW5wdXRzIH07XG4gICAgY29uc3Qgb3V0cHV0cyA9IHsgLi4udGhpcy5kZWZhdWx0cy5vdXRwdXRzIH07XG5cbiAgICBpZiAoIWJpbmRpbmdzLmlucHV0cyAmJiAhYmluZGluZ3Mub3V0cHV0cykge1xuICAgICAgYmluZGluZ3MgPSB7IGlucHV0czogYmluZGluZ3MgfTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXRzKSB7XG4gICAgICBiaW5kaW5ncy5pbnB1dHMgPSB7IC4uLmlucHV0cywgLi4uYmluZGluZ3MuaW5wdXRzIH07XG4gICAgfVxuXG4gICAgaWYgKG91dHB1dHMpIHtcbiAgICAgIGJpbmRpbmdzLm91dHB1dHMgPSB7IC4uLm91dHB1dHMsIC4uLmJpbmRpbmdzLm91dHB1dHMgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmluZGluZ3M7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVnaXN0ZXIodHlwZTogVHlwZTxUPiwgY29tcG9uZW50OiBDb21wb25lbnRSZWY8VD4pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuY29tcG9uZW50cy5oYXModHlwZSkpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50cy5zZXQodHlwZSwgW10pO1xuICAgIH1cblxuICAgIGNvbnN0IHR5cGVzID0gdGhpcy5jb21wb25lbnRzLmdldCh0eXBlKTtcbiAgICB0eXBlcy5wdXNoKGNvbXBvbmVudCk7XG4gIH1cbn1cbiJdfQ==