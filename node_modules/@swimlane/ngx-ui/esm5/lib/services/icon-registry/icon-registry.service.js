import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { convertClass } from './convert-class.util';
var IconRegistryService = /** @class */ (function () {
    function IconRegistryService() {
        this._defaultFontSetClass = 'ngx';
        this._iconMap = new Map();
    }
    IconRegistryService.prototype.setDefaultFontSetClass = function (iconSet) {
        this._defaultFontSetClass = iconSet;
        return this._defaultFontSetClass;
    };
    IconRegistryService.prototype.get = function (keys, set) {
        return this.lookup(keys, set).map(function (k) { return convertClass(k); });
    };
    IconRegistryService.prototype.lookup = function (keys, set) {
        var _this = this;
        return (Array.isArray(keys) ? keys : [keys]).reduce(function (p, k) {
            k = _this._expandKeys(k, set)
                .map(function (kk) {
                var x = _this._iconMap.get(kk);
                return x && x.length === 1 ? x[0] : kk;
            })
                .join(' ');
            return p.concat(_this._iconMap.get(k) || [k]);
        }, []);
    };
    IconRegistryService.prototype.add = function (key, icon) {
        var k = this._expandKeys(key).join(' ');
        var v = this.lookup(icon);
        this._iconMap.set(k, v);
    };
    IconRegistryService.prototype._expandKeys = function (key, set) {
        if (set === void 0) { set = this._defaultFontSetClass; }
        return key.split(' ').map(function (k) {
            if (k.includes(':'))
                return k;
            return set + ":" + k;
        });
    };
    IconRegistryService = __decorate([
        Injectable()
    ], IconRegistryService);
    return IconRegistryService;
}());
export { IconRegistryService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1yZWdpc3RyeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3aW1sYW5lL25neC11aS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9pY29uLXJlZ2lzdHJ5L2ljb24tcmVnaXN0cnkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHcEQ7SUFBQTtRQUNVLHlCQUFvQixHQUFXLEtBQUssQ0FBQztRQUNyQyxhQUFRLEdBQTBCLElBQUksR0FBRyxFQUFFLENBQUM7SUFtQ3RELENBQUM7SUFqQ0Msb0RBQXNCLEdBQXRCLFVBQXVCLE9BQWU7UUFDcEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLE9BQU8sQ0FBQztRQUNwQyxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztJQUNuQyxDQUFDO0lBRUQsaUNBQUcsR0FBSCxVQUFJLElBQXVCLEVBQUUsR0FBWTtRQUN2QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBZixDQUFlLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsb0NBQU0sR0FBTixVQUFPLElBQXVCLEVBQUUsR0FBWTtRQUE1QyxpQkFVQztRQVRDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFXLEVBQUUsQ0FBUztZQUN6RSxDQUFDLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO2lCQUN6QixHQUFHLENBQUMsVUFBQSxFQUFFO2dCQUNMLElBQU0sQ0FBQyxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNoQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDekMsQ0FBQyxDQUFDO2lCQUNELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNiLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0MsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUVELGlDQUFHLEdBQUgsVUFBSSxHQUFXLEVBQUUsSUFBdUI7UUFDdEMsSUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUMsSUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVPLHlDQUFXLEdBQW5CLFVBQW9CLEdBQVcsRUFBRSxHQUF1QztRQUF2QyxvQkFBQSxFQUFBLE1BQWMsSUFBSSxDQUFDLG9CQUFvQjtRQUN0RSxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQztZQUN6QixJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO2dCQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzlCLE9BQVUsR0FBRyxTQUFJLENBQUcsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFwQ1UsbUJBQW1CO1FBRC9CLFVBQVUsRUFBRTtPQUNBLG1CQUFtQixDQXFDL0I7SUFBRCwwQkFBQztDQUFBLEFBckNELElBcUNDO1NBckNZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydENsYXNzIH0gZnJvbSAnLi9jb252ZXJ0LWNsYXNzLnV0aWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSWNvblJlZ2lzdHJ5U2VydmljZSB7XG4gIHByaXZhdGUgX2RlZmF1bHRGb250U2V0Q2xhc3M6IHN0cmluZyA9ICduZ3gnO1xuICBwcml2YXRlIF9pY29uTWFwOiBNYXA8c3RyaW5nLCBzdHJpbmdbXT4gPSBuZXcgTWFwKCk7XG5cbiAgc2V0RGVmYXVsdEZvbnRTZXRDbGFzcyhpY29uU2V0OiBzdHJpbmcpIHtcbiAgICB0aGlzLl9kZWZhdWx0Rm9udFNldENsYXNzID0gaWNvblNldDtcbiAgICByZXR1cm4gdGhpcy5fZGVmYXVsdEZvbnRTZXRDbGFzcztcbiAgfVxuXG4gIGdldChrZXlzOiBzdHJpbmcgfCBzdHJpbmdbXSwgc2V0Pzogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLmxvb2t1cChrZXlzLCBzZXQpLm1hcChrID0+IGNvbnZlcnRDbGFzcyhrKSk7XG4gIH1cblxuICBsb29rdXAoa2V5czogc3RyaW5nIHwgc3RyaW5nW10sIHNldD86IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkoa2V5cykgPyBrZXlzIDogW2tleXNdKS5yZWR1Y2UoKHA6IHN0cmluZ1tdLCBrOiBzdHJpbmcpID0+IHtcbiAgICAgIGsgPSB0aGlzLl9leHBhbmRLZXlzKGssIHNldClcbiAgICAgICAgLm1hcChrayA9PiB7XG4gICAgICAgICAgY29uc3QgeCA9IHRoaXMuX2ljb25NYXAuZ2V0KGtrKTtcbiAgICAgICAgICByZXR1cm4geCAmJiB4Lmxlbmd0aCA9PT0gMSA/IHhbMF0gOiBraztcbiAgICAgICAgfSlcbiAgICAgICAgLmpvaW4oJyAnKTtcbiAgICAgIHJldHVybiBwLmNvbmNhdCh0aGlzLl9pY29uTWFwLmdldChrKSB8fCBba10pO1xuICAgIH0sIFtdKTtcbiAgfVxuXG4gIGFkZChrZXk6IHN0cmluZywgaWNvbjogc3RyaW5nIHwgc3RyaW5nW10pOiB2b2lkIHtcbiAgICBjb25zdCBrID0gdGhpcy5fZXhwYW5kS2V5cyhrZXkpLmpvaW4oJyAnKTtcbiAgICBjb25zdCB2ID0gdGhpcy5sb29rdXAoaWNvbik7XG4gICAgdGhpcy5faWNvbk1hcC5zZXQoaywgdik7XG4gIH1cblxuICBwcml2YXRlIF9leHBhbmRLZXlzKGtleTogc3RyaW5nLCBzZXQ6IHN0cmluZyA9IHRoaXMuX2RlZmF1bHRGb250U2V0Q2xhc3MpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIGtleS5zcGxpdCgnICcpLm1hcChrID0+IHtcbiAgICAgIGlmIChrLmluY2x1ZGVzKCc6JykpIHJldHVybiBrO1xuICAgICAgcmV0dXJuIGAke3NldH06JHtrfWA7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==