/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FilePickerService } from './../../file-picker.service';
import { Component, Input, Output, EventEmitter, TemplateRef } from '@angular/core';
import { HttpEventType } from '@angular/common/http';
import { getFileType } from '../../file-upload.utils';
import { FilePickerAdapter } from '../../file-picker.adapter';
export class FilePreviewItemComponent {
    /**
     * @param {?} fileService
     */
    constructor(fileService) {
        this.fileService = fileService;
        this.removeFile = new EventEmitter();
        this.uploadSuccess = new EventEmitter();
        this.imageClicked = new EventEmitter();
        this.icon = 'checkmark';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.uploadFile(this.fileItem);
        this.fileType = getFileType(this.fileItem.file.type);
        this.safeUrl = this.getSafeUrl(this.fileItem.file);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    getSafeUrl(file) {
        return this.fileService.createSafeUrl(file);
    }
    /**
     * Converts bytes to nice size
     * @param {?} x
     * @return {?}
     */
    niceBytes(x) {
        /** @type {?} */
        const units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        /** @type {?} */
        let l = 0;
        /** @type {?} */
        let n = parseInt(x, 10) || 0;
        while (n >= 1024 && ++l) {
            n = n / 1024;
        }
        // include a decimal point and a tenths-place digit if presenting
        // less than ten of KB or greater units
        return n.toFixed(n < 10 && l > 0 ? 1 : 0) + ' ' + units[l];
    }
    /**
     * Retry file upload when upload was unsuccessfull
     * @return {?}
     */
    onRetry() {
        this.uploadFile(this.fileItem);
    }
    /**
     * @return {?}
     */
    onCheckMarkClick() {
        this.icon = 'error';
    }
    /**
     * @param {?} fileItem
     * @return {?}
     */
    uploadFile(fileItem) {
        if (this.adapter) {
            this.uploadSubscription =
                this.adapter.uploadFile(fileItem)
                    .subscribe((/**
                 * @param {?} res
                 * @return {?}
                 */
                (res) => {
                    if (typeof res === 'string') {
                        this.onUploadSuccess(res, fileItem);
                        this.uploadProgress = undefined;
                    }
                    if (typeof res === 'number') {
                        this.uploadProgress = res;
                        //  this.handleProgressResponse(<HttpEvent<any>>res, fileItem);
                    }
                }), (/**
                 * @param {?} er
                 * @return {?}
                 */
                (er) => {
                    this.uploadError = er;
                    this.uploadProgress = undefined;
                }));
        }
        else {
            console.warn('no adapter was provided');
        }
    }
    /**
     * Emits event when file upload api returns success
     * @param {?} id
     * @param {?} fileItem
     * @return {?}
     */
    onUploadSuccess(id, fileItem) {
        this.fileId = id;
        this.fileItem.fileId = id;
        this.uploadSuccess.next(Object.assign({}, fileItem, { fileId: id }));
    }
    /**
     * @param {?} event
     * @param {?} fileName
     * @return {?}
     */
    handleProgressResponse(event, fileName) {
        switch (event.type) {
            case HttpEventType.Sent:
                return;
            case HttpEventType.UploadProgress:
                // Compute and show the % done:
                this.uploadProgress = Math.round((100 * event.loaded) / event.total);
                return;
            case HttpEventType.Response:
                /** @type {?} */
                const body = event.body;
                if (body && body.data) {
                    // this.uploaded.next(res.data.toString());
                }
                this.uploadProgress = undefined;
                return;
            default:
                this.uploadProgress = undefined;
                return `File "${fileName}" surprising upload event: ${event.type}.`;
        }
    }
    /**
     * @param {?} fileItem
     * @return {?}
     */
    onRemove(fileItem) {
        this.uploadUnsubscribe();
        this.removeFile.next(fileItem);
    }
    /**
     * Cancel upload. Cancels request
     * @return {?}
     */
    uploadUnsubscribe() {
        if (this.uploadSubscription) {
            this.uploadSubscription.unsubscribe();
        }
    }
}
FilePreviewItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'file-preview-item',
                template: "<ng-container *ngIf=\"!itemTemplate\">\r\n    <div class=\"file-preview-wrapper\" *ngIf=\"fileItem\">\r\n\r\n\r\n        <div class=\"file-preview-thumbnail\">\r\n          <div class=\"img-preview-thumbnail\" *ngIf=\"fileType === 'image'\" >\r\n            <img [src]=\"safeUrl\" (click)=\"imageClicked.next(fileItem)\">\r\n          </div>\r\n          <div class=\"other-preview-thumbnail\"\r\n            *ngIf=\"fileType !== 'image'\"\r\n            [ngClass]=\"fileItem.fileName.split('.').pop()\"\r\n            >\r\n            {{fileItem.fileName.split('.').pop()}}\r\n          </div>\r\n          <div class=\"thumbnail-backdrop\">\r\n\r\n          </div>\r\n        </div>\r\n        <div class=\"file-preview-description\" >\r\n          <a class=\"file-preview-title\" [title]=\"fileItem.fileName\" href=\"javascript:void(0)\"><p>{{fileItem.fileName}}</p></a>\r\n          <div class=\"file-preview-size\">{{niceBytes(fileItem.file.size)}}</div>\r\n        </div>\r\n        <div class=\"file-preview-actions\" >\r\n            <div class=\"ngx-checkmark-wrapper\" (click)=\"onCheckMarkClick()\" *ngIf=\"(icon === 'checkmark') && !uploadError && !uploadProgress\" (mouseenter)=\"icon = 'close'\">\r\n              <span class=\"ngx-checkmark\"></span>\r\n            </div>\r\n            <refresh-icon *ngIf=\"uploadError\" (retry)=\"onRetry()\"></refresh-icon>\r\n            <a class=\"ngx-close-icon-wrapper\"\r\n            *ngIf= \"(icon === 'close') ||  uploadError || uploadProgress\"\r\n            (click)=\"onRemove(fileItem)\"\r\n             (mouseleave)=\"icon = 'checkmark'\"\r\n             title=\"{{captions?.previewCard?.remove}}\"\r\n             >\r\n              <close-icon></close-icon>\r\n            </a>\r\n        </div>\r\n        <!-- *ngIf=\"uploadProgress !== 100\"-->\r\n          <a class=\"file-upload-error-wrapper\" *ngIf=\"uploadError && !uploadProgress\" href=\"javascipt:void(0)\"\r\n          title=\"{{captions?.previewCard?.uploadError}}\">\r\n          </a>\r\n\r\n        <ng-container *ngIf=\"uploadProgress\">\r\n        <div class=\"file-upload-progress-bar-wrapper\"  >\r\n          <div class=\"file-upload-progress-bar\"  [ngStyle]=\"{ 'width': uploadProgress + '%' }\">\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"file-upload-percentage-wrapper\" >\r\n          <div class=\"file-upload-percentage\">{{uploadProgress}} %</div>\r\n          </div>\r\n        </ng-container>\r\n\r\n      </div>\r\n</ng-container>\r\n\r\n\r\n<ng-container *ngTemplateOutlet=\"itemTemplate;context: {fileItem: fileItem, uploadProgress: uploadProgress}\" > </ng-container>\r\n",
                styles: [":host{display:block;padding:20px 16px;border-bottom:1px solid #ebeef1;max-width:440px;position:relative}.file-preview-wrapper{display:-webkit-box;display:flex;width:100%}.file-preview-wrapper .file-preview-thumbnail{position:relative;z-index:2;cursor:pointer}.file-preview-wrapper .file-preview-thumbnail .img-preview-thumbnail{width:36px;height:36px}.file-preview-wrapper .file-preview-thumbnail .img-preview-thumbnail img{width:100%;height:100%;-o-object-fit:cover;object-fit:cover;border-radius:6px}.file-preview-wrapper .file-preview-thumbnail .other-preview-thumbnail{width:36px;height:36px;display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;background:#706fd3;border-radius:4px;color:#fff;font-size:12px;font-weight:700;white-space:nowrap;overflow:hidden}.file-preview-wrapper .file-preview-thumbnail .other-preview-thumbnail.pdf{background:#e4394e}.file-preview-wrapper .file-preview-thumbnail .other-preview-thumbnail.doc,.file-preview-wrapper .file-preview-thumbnail .other-preview-thumbnail.docx{background:#2196f3}.file-preview-wrapper .file-preview-thumbnail .other-preview-thumbnail.xls,.file-preview-wrapper .file-preview-thumbnail .other-preview-thumbnail.xlsx{background:#4caf50}.file-preview-wrapper .file-preview-thumbnail .other-preview-thumbnail.ppt,.file-preview-wrapper .file-preview-thumbnail .other-preview-thumbnail.txt{background:#ff9800}.file-preview-wrapper .file-preview-thumbnail .thumbnail-backdrop{visibility:hidden;position:absolute;left:0;top:0;width:100%;height:100%;border-radius:6px;-webkit-transition:.1s ease-in-out;transition:.1s ease-in-out;pointer-events:none;background:rgba(43,56,71,.2)}.file-preview-wrapper .file-preview-thumbnail:hover .thumbnail-backdrop{visibility:visible}.file-preview-wrapper .file-preview-thumbnail:active .thumbnail-backdrop{visibility:visible;background:rgba(43,56,71,.4)}.file-preview-wrapper .file-preview-description{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-align:start;align-items:flex-start;padding-left:16px;padding-right:16px;color:#74809d;overflow:hidden;-webkit-box-flex:1;flex:1;z-index:2;position:relative}.file-preview-wrapper .file-preview-description .file-preview-title{font-weight:700;width:90%;text-decoration:none;color:#74809d;cursor:default}.file-preview-wrapper .file-preview-description .file-preview-title p{text-overflow:ellipsis;max-width:100%;overflow:hidden;white-space:nowrap;margin:0}.file-preview-wrapper .file-preview-description .file-preview-size{font-size:12px;color:#979fb8}.file-preview-wrapper .file-preview-actions{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;font-size:10px;z-index:3;position:relative}.file-preview-wrapper .file-preview-actions .ngx-checkmark-wrapper{position:relative;cursor:pointer;font-size:22px;height:20px;width:20px;border-radius:50%;background:#43d084;box-shadow:-1px 1px 6px rgba(67,208,132,.8)}.file-preview-wrapper .file-preview-actions .ngx-checkmark-wrapper .ngx-checkmark{position:absolute;top:0;left:0;height:19px;width:19px}.file-preview-wrapper .file-preview-actions .ngx-checkmark-wrapper .ngx-checkmark:after{content:\"\";position:absolute;display:block;left:7px;top:4px;width:3px;height:7px;border:1px solid #fff;border-width:0 3px 3px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.file-preview-wrapper .file-preview-actions .ngx-close-icon-wrapper{border-radius:50%;background:#fe7676;padding:3px;box-shadow:-1px 1px 6px rgba(254,118,118,.8);cursor:pointer}.file-preview-wrapper .file-upload-percentage-wrapper,.file-preview-wrapper .file-upload-progress-bar-wrapper{position:absolute;z-index:1;width:100%;height:95%;left:0;top:0;bottom:0;margin:auto}.file-preview-wrapper .file-upload-progress-bar{background:#eef1fa;border-radius:6px;width:0%;height:95%;-webkit-transition:width .3s ease-in;transition:width .3s ease-in}.file-preview-wrapper .file-upload-percentage{padding-right:10%;color:#c2cdda;padding-top:5%;font-size:19px;text-align:right}.file-preview-wrapper .file-upload-error-wrapper{position:absolute;z-index:1;width:100%;height:95%;left:0;top:0;bottom:0;margin:auto;background:rgba(254,84,111,.06)}"]
            }] }
];
/** @nocollapse */
FilePreviewItemComponent.ctorParameters = () => [
    { type: FilePickerService }
];
FilePreviewItemComponent.propDecorators = {
    removeFile: [{ type: Output }],
    uploadSuccess: [{ type: Output }],
    imageClicked: [{ type: Output }],
    fileItem: [{ type: Input }],
    adapter: [{ type: Input }],
    itemTemplate: [{ type: Input }],
    captions: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FilePreviewItemComponent.prototype.removeFile;
    /** @type {?} */
    FilePreviewItemComponent.prototype.uploadSuccess;
    /** @type {?} */
    FilePreviewItemComponent.prototype.imageClicked;
    /** @type {?} */
    FilePreviewItemComponent.prototype.fileItem;
    /** @type {?} */
    FilePreviewItemComponent.prototype.adapter;
    /** @type {?} */
    FilePreviewItemComponent.prototype.itemTemplate;
    /** @type {?} */
    FilePreviewItemComponent.prototype.captions;
    /** @type {?} */
    FilePreviewItemComponent.prototype.icon;
    /** @type {?} */
    FilePreviewItemComponent.prototype.uploadProgress;
    /** @type {?} */
    FilePreviewItemComponent.prototype.fileType;
    /** @type {?} */
    FilePreviewItemComponent.prototype.safeUrl;
    /** @type {?} */
    FilePreviewItemComponent.prototype.uploadError;
    /** @type {?} */
    FilePreviewItemComponent.prototype.uploadSubscription;
    /** @type {?} */
    FilePreviewItemComponent.prototype.fileId;
    /**
     * @type {?}
     * @private
     */
    FilePreviewItemComponent.prototype.fileService;
}
//# sourceMappingURL=data:application/json;base64,