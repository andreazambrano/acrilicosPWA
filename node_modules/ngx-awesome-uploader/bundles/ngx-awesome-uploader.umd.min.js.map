{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-awesome-uploader/lib/file-picker.service.ts","ng://ngx-awesome-uploader/lib/file-upload.utils.ts","ng://ngx-awesome-uploader/lib/validation-error.model.ts","ng://ngx-awesome-uploader/lib/file-picker.adapter.ts","ng://ngx-awesome-uploader/lib/default-captions.ts","ng://ngx-awesome-uploader/lib/file-picker.component.ts","ng://ngx-awesome-uploader/lib/icons/close-icon/close-icon.component.ts","ng://ngx-awesome-uploader/lib/file-preview-container/file-preview-item/file-preview-item.component.ts","ng://ngx-awesome-uploader/lib/file-preview-container/file-preview-container.component.ts","ng://ngx-awesome-uploader/lib/file-drop/upload-file.model.ts","ng://ngx-awesome-uploader/lib/file-drop/upload-event.model.ts","ng://ngx-awesome-uploader/lib/file-drop/file-drop.component.ts","ng://ngx-awesome-uploader/lib/icons/cloud-icon/cloud-icon.component.ts","ng://ngx-awesome-uploader/lib/file-drop/file-drop.module.ts","ng://ngx-awesome-uploader/lib/file-preview-container/preview-lightbox/preview-lightbox.component.ts","ng://ngx-awesome-uploader/lib/file-preview-container/file-preview-item/refresh-icon/refresh-icon.component.ts","ng://ngx-awesome-uploader/lib/file-picker.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","FilePickerService","sanitizer","mockUploadFile","formData","event","CustomEvent","detail","type","of","createSafeUrl","file","UPLOADER_TEST_MODE","url","window","URL","createObjectURL","bypassSecurityTrustResourceUrl","er","console","log","Injectable","DomSanitizer","getFileType","fileExtension","includes","fileMaxSize","fileMaxCount","totalMaxSize","extensions","uploadType","customValidator","DefaultCaptions","dropzone","title","or","browse","cropper","crop","cancel","previewCard","remove","uploadError","FilePickerComponent","fileService","elementRef","uploadSuccess","EventEmitter","removeSuccess","validationError","fileAdded","enableCropper","showeDragDropZone","showPreviewContainer","files","filesForCropper","cropClosed$","Subject","_onDestroy$","ngOnInit","setCropperOptions","listenToCropClose","setCaptions","ngOnDestroy","_captions","captions","_this","pipe","takeUntil","subscribe","res","croppedIndex","findIndex","item","name","fileName","nextFile","undefined","tslib_1.__spread","filter","openCropper","cropperOptions","setDefaultCropperOptions","dragMode","aspectRatio","autoCrop","movable","zoomable","scalable","autoCropArea","onChange","fileInput","Array","from","handleFiles","isValidMaxFileCount","isValidUploadSync","every","validateFileSync","asyncFunctions","map","validateFileAsync","combineLatest","isValidUploadAsync","result","forEach","index","handleInputFile","isValidUploadType","isValidExtension","tap","FileValidationTypes","isValidSize","size","pushFile","dropped","filesForUpload","_b","tslib_1.__values","_c","droppedFile","fileEntry","isFile","setTimeout","Cropper","safeCropImgUrl","currentCropperFile","warn","getSafeUrl","cropperImgLoaded","image","document","getElementById","closeCropper","filePreview","removeFileFromList","f","onUploadSuccess","fileItem","fileExtensions","extension","split","pop","ext","toLowerCase","indexOf","isValidFileSize","isValidTotalFileSize","bitsToMb","toString","totalBits","reduce","acc","curr","parseFloat","onCropSubmit","getCroppedCanvas","toBlob","blobFallBack","bind","blob","removeFile","adapter","onRemoveSuccess","Component","args","selector","template","ElementRef","Output","Input","CloseIconComponent","FilePreviewItemComponent","imageClicked","icon","uploadFile","fileType","safeUrl","niceBytes","x","l","parseInt","toFixed","onRetry","onCheckMarkClick","uploadSubscription","uploadProgress","id","fileId","handleProgressResponse","HttpEventType","Sent","UploadProgress","Math","round","loaded","total","Response","body","data","onRemove","uploadUnsubscribe","unsubscribe","FilePreviewContainerComponent","openLightbox","lightboxFile","closeLightbox","relativePath","UploadEvent","FileComponent","zone","renderer","customstyle","disableIf","onFileDrop","onFileOver","onFileLeave","stack","dragoverflag","globalDisable","numOfActiveReadEntries","globalStart","listen","evt","globalEnd","onDragOver","emit","preventAndStop","onDragLeave","dropFiles","length_1","dataTransfer","dropEffect","items","entry","webkitGetAsEntry","toUpload","UploadFile","this_1","addToQueue","isDirectory","traverseFileTree","file_1","fakeFileEntry","callback","timerObservable","timer","subscription","path","run","popToStack","pushToStack","dirReader_1","createReader","entries_1","thisObj_1","readEntries_1","readEntries","toUpload_1","str","clearQueue","stopPropagation","preventDefault","NgZone","Renderer2","CloudIconComponent","FileDropModule","NgModule","declarations","exports","imports","CommonModule","providers","bootstrap","PreviewLightboxComponent","close","onClose","RefreshIconComponent","retry","FilePickerModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { of, Observable } from 'rxjs';\r\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\r\n\r\n@Injectable()\r\nexport class FilePickerService {\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n  mockUploadFile(formData): Observable<any> {\r\n    const event = new CustomEvent('customevent', {\r\n      detail: {\r\n        type: 'UploadProgreess'\r\n      }\r\n    });\r\n    return of (event.detail);\r\n  }\r\n  createSafeUrl(file): SafeResourceUrl {\r\n    if ((<any> window).UPLOADER_TEST_MODE) {return;}\r\n    try {\r\n      const url = window.URL.createObjectURL(file);\r\n    const safeUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n    return safeUrl;\r\n\r\n    } catch (er) {\r\n      console.log(er);\r\n    }\r\n  }\r\n}\r\n","import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\r\nexport function getFileType(fileExtension: string): string {\r\n  if (fileExtension.includes('image')) {\r\n    return 'image';\r\n  } else if (fileExtension.includes('video')) {\r\n    return 'video';\r\n  } else {\r\n    return 'other';\r\n  }\r\n}\r\n\r\n","export interface ValidationError {\r\n  file: File;\r\n  error: string; // is FileValidationType enum type\r\n}\r\nexport enum FileValidationTypes {\r\n  fileMaxSize = 'FILE_MAX_SIZE',\r\n  fileMaxCount = 'FILE_MAX_COUNT',\r\n  totalMaxSize = 'TOTAL_MAX_SIZE',\r\n  extensions = 'EXTENSIONS',\r\n  uploadType = 'UPLOAD_TYPE',\r\n  customValidator = 'CUSTOM_VALIDATOR'\r\n}\r\n","import { FilePreviewModel } from './file-preview.model';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport abstract class FilePickerAdapter {\r\n public abstract uploadFile(fileItem: FilePreviewModel): Observable<number| string>;\r\n public abstract removeFile(fileItem: FilePreviewModel): Observable<any>;\r\n}\r\n","import { UploaderCaptions } from \"./uploader-captions\";\r\n\r\nexport const DefaultCaptions: UploaderCaptions = {\r\n    dropzone: {\r\n        title: \"Drag and drop file here\",\r\n        or: \"or\",\r\n        browse: \"Browse Files\"\r\n    },\r\n    cropper: {\r\n        crop: \"Crop\",\r\n        cancel: \"Cancel\"\r\n    },\r\n    previewCard: {\r\n        remove: \"Remove\",\r\n        uploadError: \"Error on upload\"\r\n    }\r\n}","import {FilePickerService} from './file-picker.service';\r\nimport {Component, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output, TemplateRef, ChangeDetectorRef} from '@angular/core';\r\nimport {SafeResourceUrl} from '@angular/platform-browser';\r\nimport {FilePreviewModel} from './file-preview.model';\r\nimport {getFileType} from './file-upload.utils';\r\nimport {FileValidationTypes, ValidationError} from './validation-error.model';\r\nimport {FilePickerAdapter} from './file-picker.adapter';\r\nimport {FileSystemDirectoryEntry, FileSystemFileEntry, UploadEvent} from './file-drop';\r\nimport {combineLatest, Observable, of, Subject} from 'rxjs';\r\nimport {map, takeUntil, tap} from 'rxjs/operators';\r\nimport {DefaultCaptions} from './default-captions';\r\nimport {UploaderCaptions} from './uploader-captions';\r\n\r\ndeclare var Cropper;\r\n@Component({\r\n  selector: 'ngx-file-picker',\r\n  template: `\r\n   <div (click)=\"fileInput.click()\" class=\"file-drop-wrapper\" *ngIf=\"showeDragDropZone\">\r\n      <file-drop\r\n        (onFileDrop)=\"dropped($event)\"\r\n        [customstyle]=\"'custom-drag'\"\r\n        [captions]=\"_captions\"\r\n      >\r\n      <ng-content select=\".dropzoneTemplate\"> </ng-content>\r\n      </file-drop>\r\n    </div>\r\n\r\n\r\n    <input type=\"file\" name=\"file[]\" id=\"fileInput\"\r\n           #fileInput\r\n           [multiple]=\"uploadType === 'multi' ? 'multiple' : '' \"\r\n           (click)=\"fileInput.value = null\"\r\n           (change)=\"onChange(fileInput)\"\r\n           [accept]=\"accept\"\r\n           class=\"file-input\"\r\n          >\r\n\r\n    <div class=\"cropperJsOverlay\" *ngIf=\"currentCropperFile\">\r\n     <div class=\"cropperJsBox\">\r\n     <img [src]=\"safeCropImgUrl\" id=\"cropper-img\" (load) = \"cropperImgLoaded($event)\">\r\n        <div class=\"cropper-actions\">\r\n        <button class=\"cropSubmit\" (click)=\"onCropSubmit()\">{{_captions?.cropper?.crop}}</button>\r\n        <button class=\"cropCancel\" (click)=\"closeCropper({file: currentCropperFile, fileName: currentCropperFile.name})\">\r\n        {{_captions?.cropper?.cancel}}\r\n        </button> </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"files-preview-wrapper\" *ngIf=\"showPreviewContainer\">\r\n      <file-preview-container *ngIf=\"files\"\r\n      [previewFiles]=\"files\"\r\n      (removeFile)=\"removeFile($event)\"\r\n      (uploadSuccess)=\"onUploadSuccess($event)\"\r\n      [adapter]=\"adapter\"\r\n      [itemTemplate]=\"itemTemplate\"\r\n      [captions]=\"_captions\"\r\n      > </file-preview-container>\r\n    </div>\r\n\r\n  `,\r\n  styleUrls: ['./file-picker.component.scss']\r\n})\r\nexport class FilePickerComponent implements OnInit, OnDestroy {\r\n  /** Emitted when file is uploaded via api successfully. Emitted for every file */\r\n  @Output() uploadSuccess = new EventEmitter<FilePreviewModel>();\r\n  /** Emitted when file is removed via api successfully. Emitted for every file */\r\n  @Output() removeSuccess = new EventEmitter<FilePreviewModel>();\r\n  /** Emitted on file validation fail */\r\n  @Output() validationError = new EventEmitter<ValidationError>();\r\n  /** Emitted when file is added and passed validations. Not uploaded yet */\r\n  @Output() fileAdded = new EventEmitter<FilePreviewModel>();\r\n  /** Custom validator function */\r\n  @Input() customValidator: (file: File) => Observable<boolean>;\r\n  /** Whether to enable cropper. Default: disabled */\r\n  @Input()\r\n   enableCropper = false;\r\n  /** Whether to show default drag and drop zone. Default:true */\r\n  @Input() showeDragDropZone = true;\r\n   /** Whether to show default files preview container. Default: true */\r\n  @Input() showPreviewContainer = true;\r\n   /** Preview Item template */\r\n  @Input() itemTemplate: TemplateRef<any>;\r\n  /** Single or multiple. Default: multi */\r\n  @Input()\r\n   uploadType = 'multi';\r\n  /** Max size of selected file in MB. Default: no limit */\r\n  @Input()\r\n   fileMaxSize: number;\r\n  /** Max count of file in multi-upload. Default: no limit */\r\n  @Input()\r\n   fileMaxCount: number;\r\n  /** Total Max size limit of all files in MB. Default: no limit */\r\n  @Input()\r\n   totalMaxSize: number;\r\n  /** Which file types to show on choose file dialog. Default: show all */\r\n  @Input()\r\n  accept: string;\r\n  files: FilePreviewModel[] = [];\r\n /** File extensions filter */\r\n  @Input() fileExtensions: String[];\r\n  cropper: any;\r\n  /** Cropper options. */\r\n  @Input() cropperOptions: Object;\r\n  /** Files array for cropper. Will be shown equentially if crop enabled */\r\n  filesForCropper: File[] = [];\r\n   /** Current file to be shown in cropper*/\r\n   currentCropperFile: File;\r\n  /** Custom api Adapter for uploading/removing files */\r\n  @Input()\r\n   adapter: FilePickerAdapter;\r\n  /**  Custome template for dropzone */\r\n   @Input() dropzoneTemplate: TemplateRef<any>;\r\n  /** Custom captions input. Used for multi language support */\r\n   @Input() captions: UploaderCaptions;\r\n   /** captions object*/\r\n   _captions: UploaderCaptions;\r\n   cropClosed$ = new Subject<FilePreviewModel>();\r\n   _onDestroy$ = new Subject<void>();\r\n   safeCropImgUrl: SafeResourceUrl;\r\n  constructor(private fileService: FilePickerService,\r\n     private elementRef: ElementRef\r\n     ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.setCropperOptions();\r\n    this.listenToCropClose();\r\n    this.setCaptions();\r\n  }\r\n  ngOnDestroy() {\r\n    this._onDestroy$.next();\r\n  }\r\n  setCaptions() {\r\n  this._captions = this.captions || DefaultCaptions;\r\n  }\r\n  /** Listen when Cropper is closed and open new cropper if next image exists */\r\n  listenToCropClose() {\r\n    this.cropClosed$\r\n    .pipe(takeUntil(this._onDestroy$))\r\n    .subscribe((res: FilePreviewModel) => {\r\n      const croppedIndex = this.filesForCropper.findIndex(item => item.name === res.fileName);\r\n      const nextFile = croppedIndex !== -1 ? this.filesForCropper[croppedIndex + 1] : undefined;\r\n     // console.log(nextFile)\r\n  //  console.log('cropped', res);\r\n      this.filesForCropper = [...this.filesForCropper].filter(item => item.name !== res.fileName);\r\n     // console.log(this.filesForCropper);\r\n      if (nextFile) {\r\n         this.openCropper(nextFile);\r\n      }\r\n    });\r\n  }\r\n/** Sets custom cropper options if avaiable */\r\n  setCropperOptions() {\r\n    if (!this.cropperOptions) {\r\n    this.setDefaultCropperOptions();\r\n    }\r\n  }\r\n  /** Sets manual cropper options if no custom options are avaiable */\r\n  setDefaultCropperOptions() {\r\n    this.cropperOptions = {\r\n      dragMode: 'crop',\r\n      aspectRatio: 1,\r\n      autoCrop: true,\r\n      movable: true,\r\n      zoomable: true,\r\n      scalable: true,\r\n      autoCropArea: 0.8\r\n    };\r\n  }\r\n  /** On input file selected */\r\n  onChange( fileInput: HTMLInputElement) {\r\n     const files: File[] =  Array.from(fileInput.files);\r\n    this.handleFiles(files).subscribe();\r\n  }\r\n  /** Handles input and drag/drop files */\r\n   handleFiles(files: File[]): Observable<void> {\r\n    if (!this.isValidMaxFileCount(files)) {return of(null); }\r\n    const isValidUploadSync = files.every(item => this.validateFileSync(item));\r\n    const asyncFunctions = files.map(item => this.validateFileAsync(item));\r\n    return combineLatest(...asyncFunctions)\r\n      .pipe(\r\n        map(res => {\r\n          const isValidUploadAsync = res.every(result => result === true);\r\n          if (!isValidUploadSync || !isValidUploadAsync) {return; }\r\n          files.forEach((file: File, index: number) => {\r\n            this.handleInputFile(file, index );\r\n          });\r\n        })\r\n      );\r\n  }\r\n  /** Validates synchronous validations */\r\n  validateFileSync(file: File): boolean {\r\n    if (!file) {return; }\r\n    if (!this.isValidUploadType(file)) {return; }\r\n    if (!this.isValidExtension(file, file.name)) {return; }\r\n    return true;\r\n  }\r\n  /** Validates asynchronous validations */\r\n  validateFileAsync(file: File): Observable<boolean> {\r\n    if (!this.customValidator) {return of(true); }\r\n    return this.customValidator(file).pipe(\r\n      tap(res => {\r\n        if (!res) { this.validationError.next({file: file, error: FileValidationTypes.customValidator}); }\r\n      })\r\n    );\r\n  }\r\n  /** Handles input and drag&drop files */\r\n  handleInputFile(file: File, index): void {\r\n    const type = getFileType(file.type);\r\n    if (type === 'image' && this.enableCropper) {\r\n      this.filesForCropper.push(file);\r\n      if (!(this.currentCropperFile)) {\r\n        this.openCropper(file);\r\n      }\r\n    } else {\r\n      /** Size is not initially checked on handleInputFiles because of cropper size change */\r\n       if (this.isValidSize(file, file.size)) {\r\n        this.pushFile(file);\r\n       }\r\n    }\r\n  }\r\n  /** Validates if upload type is single so another file cannot be added */\r\n  isValidUploadType(file): boolean {\r\n    if (this.uploadType === 'single' && this.files.length > 0) {\r\n      this.validationError.next({file: file, error: FileValidationTypes.uploadType});\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  /** Validates max file count */\r\n  isValidMaxFileCount(files: File[]): boolean {\r\n    if (!this.fileMaxCount || this.fileMaxCount >= this.files.length + files.length ) {\r\n      return true;\r\n     } else {\r\n       this.validationError.next({file: null, error: FileValidationTypes.fileMaxCount});\r\n      return false;\r\n     }\r\n  }\r\n  /** On file dropped */\r\n  dropped(event: UploadEvent) {\r\n    const files = event.files;\r\n    const filesForUpload: File[] = [];\r\n    for (const droppedFile of event.files) {\r\n      // Is it a file?\r\n      if (droppedFile.fileEntry.isFile) {\r\n        const fileEntry = droppedFile.fileEntry as FileSystemFileEntry;\r\n        fileEntry.file((file: File) => {\r\n          filesForUpload.push(file);\r\n        });\r\n      } else {\r\n        // It was a directory (empty directories are added, otherwise only files)\r\n        const fileEntry = droppedFile.fileEntry as FileSystemDirectoryEntry;\r\n       // console.log(droppedFile.relativePath, fileEntry);\r\n      }\r\n    }\r\n    setTimeout(() => this.handleFiles(filesForUpload).subscribe());\r\n  }\r\n  /** Add file to file list after succesfull validation */\r\n  pushFile( file: File, fileName = file.name): void {\r\n      this.files.push({ file: file, fileName: fileName});\r\n      this.fileAdded.next({ file: file, fileName: fileName});\r\n  }\r\n  /** Opens cropper for image crop */\r\n  openCropper(file: File): void {\r\n    if ((<any>window).UPLOADER_TEST_MODE || typeof Cropper !== 'undefined' ) {\r\n      this.safeCropImgUrl = this.fileService.createSafeUrl(file);\r\n      this.currentCropperFile = file;\r\n    } else  {\r\n      console.warn('please import cropperjs script and styles to use cropper feature or disable it by setting [enableCropper]=\"false\"');\r\n      return;\r\n    }\r\n  }\r\n  getSafeUrl(file: File): SafeResourceUrl {\r\n    return this.fileService.createSafeUrl(file);\r\n  }\r\n  /** On img load event */\r\n  cropperImgLoaded(e): void {\r\n    const image = document.getElementById('cropper-img');\r\n    this.cropper = new Cropper(image, this.cropperOptions);\r\n  }\r\n  /** Close or cancel cropper */\r\n  closeCropper(filePreview: FilePreviewModel): void {\r\n    this.currentCropperFile = undefined;\r\n    this.cropper = undefined;\r\n    setTimeout(() => this.cropClosed$.next(filePreview), 200);\r\n  }\r\n/** Removes files from files list */\r\n  removeFileFromList(file: FilePreviewModel): void {\r\n    this.files = this.files.filter(f =>  f !== file);\r\n  }\r\n  /** Emits event when file upload api returns success  */\r\n  onUploadSuccess(fileItem: FilePreviewModel): void {\r\n    this.uploadSuccess.next(fileItem);\r\n  }\r\n /** Validates file extension */\r\n isValidExtension(file: File, fileName: string): boolean {\r\n  if (!this.fileExtensions) {return true; }\r\n  const extension = fileName.split('.').pop();\r\n  const fileExtensions = this.fileExtensions.map(ext => ext.toLowerCase());\r\n  if (fileExtensions.indexOf(extension.toLowerCase()) === -1) {\r\n    this.validationError.next({file: file, error: FileValidationTypes.extensions});\r\n    return false;\r\n  }\r\n     return true;\r\n}\r\n   /** Validates selected file size and total file size */\r\n  isValidSize(file: File, size: number): boolean {\r\n    /** Validating selected file size */\r\n    const res: number = this.bitsToMb(size.toString());\r\n    let isValidFileSize: boolean;\r\n    let isValidTotalFileSize: boolean;\r\n    if  (!this.fileMaxSize || ( this.fileMaxSize && res < this.fileMaxSize)) {\r\n      isValidFileSize = true;\r\n    } else {\r\n      this.validationError.next({file: file, error: FileValidationTypes.fileMaxSize});\r\n    }\r\n    /** Validating Total Files Size */\r\n    const totalBits = this.files.map(f => f.file.size).reduce((acc, curr) => acc + curr, 0);\r\n      if (!this.totalMaxSize || (this.totalMaxSize && this.bitsToMb(totalBits + file.size) < this.totalMaxSize)) {\r\n         isValidTotalFileSize = true;\r\n      } else {\r\n        this.validationError.next({file: file, error: FileValidationTypes.totalMaxSize});\r\n      }\r\n      return !!isValidFileSize && isValidTotalFileSize;\r\n  }\r\n  bitsToMb(size): number {\r\n    return parseFloat(size) / 1048576;\r\n  }\r\n  /** when crop button submitted */\r\n  onCropSubmit(): void {\r\n    this.cropper.getCroppedCanvas().toBlob(this.blobFallBack.bind(this), 'image/jpeg');\r\n  }\r\n  /** After crop submit */\r\n  blobFallBack(blob: Blob): void {\r\n    if (!blob) {return;}\r\n    if (this.isValidSize(<File>blob, blob.size)) {\r\n      this.pushFile(<File>blob, this.currentCropperFile.name);\r\n    }\r\n   this.closeCropper({file: blob as File, fileName: this.currentCropperFile.name});\r\n  }\r\n  removeFile(fileItem: FilePreviewModel): void {\r\n    if (this.adapter) {\r\n      this.adapter.removeFile(fileItem)\r\n      .subscribe(res => {\r\n        this.onRemoveSuccess(fileItem);\r\n      });\r\n     } else {\r\n      console.warn('no adapter was provided');\r\n     }\r\n   }\r\n    /** Emits event when file remove api returns success  */\r\n  onRemoveSuccess(fileItem: FilePreviewModel): void {\r\n    this.removeSuccess.next(fileItem);\r\n    this.removeFileFromList(fileItem);\r\n  }\r\n\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'close-icon',\r\n  templateUrl: './close-icon.component.html',\r\n  styleUrls: ['./close-icon.component.scss']\r\n})\r\nexport class CloseIconComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { FilePickerService } from './../../file-picker.service';\r\nimport { FilePreviewModel } from './../../file-preview.model';\r\nimport { Component, OnInit, Input, Output, EventEmitter, TemplateRef } from '@angular/core';\r\nimport { SafeResourceUrl } from '@angular/platform-browser';\r\nimport { HttpEvent, HttpEventType } from '@angular/common/http';\r\nimport { getFileType} from '../../file-upload.utils';\r\nimport {  Subscription } from 'rxjs';\r\nimport { FilePickerAdapter } from '../../file-picker.adapter';\r\nimport { UploaderCaptions } from '../../uploader-captions';\r\n\r\n@Component({\r\n  selector: 'file-preview-item',\r\n  templateUrl: './file-preview-item.component.html',\r\n  styleUrls: ['./file-preview-item.component.scss']\r\n})\r\nexport class FilePreviewItemComponent implements OnInit {\r\n  @Output() public removeFile = new EventEmitter<FilePreviewModel>();\r\n  @Output() public uploadSuccess = new EventEmitter<FilePreviewModel>();\r\n  @Output() public imageClicked = new EventEmitter<FilePreviewModel>();\r\n  @Input() public fileItem: FilePreviewModel;\r\n  @Input() adapter: FilePickerAdapter;\r\n  @Input() itemTemplate: TemplateRef<any>;\r\n  @Input() captions: UploaderCaptions;\r\n  icon = 'checkmark';\r\n  uploadProgress: number;\r\n  fileType: string;\r\n  safeUrl: SafeResourceUrl;\r\n  uploadError: boolean;\r\n  uploadSubscription: Subscription;\r\n  fileId: string;\r\n  constructor(\r\n    private fileService: FilePickerService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n  this.uploadFile(this.fileItem);\r\n    this.fileType = getFileType(this.fileItem.file.type);\r\n    this.safeUrl = this.getSafeUrl(this.fileItem.file);\r\n  }\r\n  getSafeUrl(file: File | Blob): SafeResourceUrl {\r\n    return this.fileService.createSafeUrl(file);\r\n  }\r\n  /** Converts bytes to nice size */\r\n  niceBytes(x): string {\r\n    const units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\r\n    let l = 0,\r\n      n = parseInt(x, 10) || 0;\r\n    while (n >= 1024 && ++l) {\r\n      n = n / 1024;\r\n    }\r\n    // include a decimal point and a tenths-place digit if presenting\r\n    // less than ten of KB or greater units\r\n    return n.toFixed(n < 10 && l > 0 ? 1 : 0) + ' ' + units[l];\r\n  }\r\n  /** Retry file upload when upload was unsuccessfull */\r\n  onRetry(): void {\r\n    this.uploadFile(this.fileItem);\r\n  }\r\n  onCheckMarkClick() {\r\n    this.icon = 'error';\r\n  }\r\n  uploadFile(fileItem: FilePreviewModel): void {\r\n    if (this.adapter) {\r\n      this.uploadSubscription =\r\n      this.adapter.uploadFile(fileItem)\r\n      .subscribe((res: number | string) => {\r\n        if (typeof res === 'string') {\r\n          this.onUploadSuccess(res, fileItem);\r\n          this.uploadProgress = undefined;\r\n        }\r\n        if (typeof res === 'number') {\r\n          this.uploadProgress = res;\r\n        //  this.handleProgressResponse(<HttpEvent<any>>res, fileItem);\r\n        }\r\n      }, (er) => {\r\n        this.uploadError = er;\r\n        this.uploadProgress = undefined;\r\n  });\r\n    } else {\r\n      console.warn('no adapter was provided');\r\n    }\r\n  }\r\n  /** Emits event when file upload api returns success  */\r\n  onUploadSuccess(id: string, fileItem: FilePreviewModel): void {\r\n    this.fileId = id;\r\n    this.fileItem.fileId = id;\r\n    this.uploadSuccess.next({...fileItem, fileId: id});\r\n  }\r\n  handleProgressResponse(event: HttpEvent<any> , fileName) {\r\n    switch (event.type) {\r\n      case HttpEventType.Sent:\r\n        return ;\r\n\r\n      case HttpEventType.UploadProgress:\r\n        // Compute and show the % done:\r\n        this.uploadProgress = Math.round((100 * event.loaded) / event.total);\r\n       return;\r\n\r\n      case HttpEventType.Response:\r\n        const body: any = event.body;\r\n        if (body && body.data) {\r\n         // this.uploaded.next(res.data.toString());\r\n        }\r\n        this.uploadProgress = undefined;\r\n        return;\r\n      default:\r\n        this.uploadProgress = undefined;\r\n        return `File \"${fileName}\" surprising upload event: ${event.type}.`;\r\n    }\r\n  }\r\n onRemove(fileItem: FilePreviewModel): void {\r\n  this.uploadUnsubscribe();\r\n  this.removeFile.next(fileItem);\r\n }\r\n /** Cancel upload. Cancels request  */\r\n uploadUnsubscribe(): void {\r\n  if (this.uploadSubscription) {\r\n    this.uploadSubscription.unsubscribe();\r\n   }\r\n }\r\n\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, TemplateRef } from '@angular/core';\r\nimport { FilePreviewModel } from '../file-preview.model';\r\nimport { FilePickerAdapter } from '../file-picker.adapter';\r\nimport { UploaderCaptions } from '../uploader-captions';\r\n\r\n@Component({\r\n  selector: 'file-preview-container',\r\n  templateUrl: './file-preview-container.component.html',\r\n  styleUrls: ['./file-preview-container.component.scss']\r\n})\r\nexport class FilePreviewContainerComponent implements OnInit {\r\n  @Input() previewFiles: FilePreviewModel[];\r\n  @Input() itemTemplate: TemplateRef<any>;\r\n  @Output() public removeFile = new EventEmitter<FilePreviewModel>();\r\n  @Output() public uploadSuccess = new EventEmitter<FilePreviewModel>();\r\n  lightboxFile: FilePreviewModel;\r\n  @Input() adapter: FilePickerAdapter;\r\n  @Input() captions: UploaderCaptions;\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n  openLightbox(file: FilePreviewModel) {\r\n   this.lightboxFile = file;\r\n  }\r\n  closeLightbox() {\r\n    this.lightboxFile = undefined;\r\n  }\r\n\r\n}\r\n","import { FileSystemEntry, FileSystemFileEntry, FileSystemDirectoryEntry } from './dom.types';\r\n\r\n/**\r\n * fileEntry is an instance of {@link FileSystemFileEntry} or {@link FileSystemDirectoryEntry}.\r\n * Which one is it can be checked using {@link FileSystemEntry.isFile} or {@link FileSystemEntry.isDirectory}\r\n * properties of the given {@link FileSystemEntry}.\r\n */\r\nexport class UploadFile {\r\n    constructor(\r\n        public relativePath: string,\r\n        public fileEntry: FileSystemEntry) {\r\n    }\r\n}\r\n","import { UploadFile } from './upload-file.model';\r\n\r\nexport class UploadEvent {\r\n    constructor(\r\n        public files: UploadFile[]) {\r\n    }\r\n}\r\n","import { Component, Input, Output, EventEmitter, NgZone, OnDestroy, Renderer2 } from '@angular/core';\r\nimport { timer, Subscription } from 'rxjs';\r\n\r\nimport { UploadFile } from './upload-file.model';\r\nimport { UploadEvent } from './upload-event.model';\r\nimport { FileSystemFileEntry, FileSystemEntry, FileSystemDirectoryEntry } from './dom.types';\r\nimport { UploaderCaptions } from '../uploader-captions';\r\n\r\n@Component({\r\n  selector: 'file-drop',\r\n  templateUrl: './file-drop.component.html',\r\n  styleUrls: ['./file-drop.component.scss']\r\n})\r\n\r\n\r\nexport class FileComponent implements OnDestroy {\r\n  @Input()\r\n  captions: UploaderCaptions\r\n  @Input()\r\n  customstyle: string = null;\r\n  @Input()\r\n  disableIf = false;\r\n\r\n  @Output()\r\n  public onFileDrop: EventEmitter<UploadEvent> = new EventEmitter<UploadEvent>();\r\n  @Output()\r\n  public onFileOver: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output()\r\n  public onFileLeave: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  stack = [];\r\n  files: UploadFile[] = [];\r\n  subscription: Subscription;\r\n  dragoverflag = false;\r\n\r\n  globalDisable = false;\r\n  globalStart: Function;\r\n  globalEnd: Function;\r\n\r\n  numOfActiveReadEntries = 0;\r\n  constructor(\r\n    private zone: NgZone,\r\n    private renderer: Renderer2\r\n  ) {\r\n    if (!this.customstyle) {\r\n      this.customstyle = 'drop-zone';\r\n    }\r\n    this.globalStart = this.renderer.listen('document', 'dragstart', (evt) => {\r\n      this.globalDisable = true;\r\n    });\r\n    this.globalEnd = this.renderer.listen('document', 'dragend', (evt) => {\r\n      this.globalDisable = false;\r\n    });\r\n  }\r\n  public onDragOver(event: Event): void {\r\n    if (!this.globalDisable && !this.disableIf) {\r\n      if (!this.dragoverflag) {\r\n        this.dragoverflag = true;\r\n        this.onFileOver.emit(event);\r\n      }\r\n      this.preventAndStop(event);\r\n    }\r\n  }\r\n\r\n  public onDragLeave(event: Event): void {\r\n    if (!this.globalDisable && !this.disableIf) {\r\n      if (this.dragoverflag) {\r\n        this.dragoverflag = false;\r\n        this.onFileLeave.emit(event);\r\n      }\r\n      this.preventAndStop(event);\r\n    }\r\n  }\r\n\r\n  dropFiles(event: any) {\r\n    if (!this.globalDisable && !this.disableIf) {\r\n      this.dragoverflag = false;\r\n      event.dataTransfer.dropEffect = 'copy';\r\n      let length;\r\n      if (event.dataTransfer.items) {\r\n        length = event.dataTransfer.items.length;\r\n      } else {\r\n        length = event.dataTransfer.files.length;\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        let entry: FileSystemEntry;\r\n        if (event.dataTransfer.items) {\r\n          if (event.dataTransfer.items[i].webkitGetAsEntry) {\r\n            entry = event.dataTransfer.items[i].webkitGetAsEntry();\r\n          }\r\n        } else {\r\n          if (event.dataTransfer.files[i].webkitGetAsEntry) {\r\n            entry = event.dataTransfer.files[i].webkitGetAsEntry();\r\n          }\r\n        }\r\n        if (!entry) {\r\n          const file: File = event.dataTransfer.files[i];\r\n          if (file) {\r\n            const fakeFileEntry: FileSystemFileEntry = {\r\n              name: file.name,\r\n              isDirectory: false,\r\n              isFile: true,\r\n              file: (callback: (filea: File) => void): void => {\r\n                callback(file)\r\n              }\r\n            }\r\n            const toUpload: UploadFile = new UploadFile(fakeFileEntry.name, fakeFileEntry);\r\n            this.addToQueue(toUpload);\r\n          }\r\n        } else {\r\n          if (entry.isFile) {\r\n            const toUpload: UploadFile = new UploadFile(entry.name, entry);\r\n            this.addToQueue(toUpload);\r\n          } else if (entry.isDirectory) {\r\n            this.traverseFileTree(entry, entry.name);\r\n          }\r\n        }\r\n      }\r\n\r\n      this.preventAndStop(event);\r\n\r\n      const timerObservable = timer(200, 200);\r\n      this.subscription = timerObservable.subscribe(t => {\r\n        if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {\r\n          this.onFileDrop.emit(new UploadEvent(this.files));\r\n          this.files = [];\r\n        }\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  private traverseFileTree(item: FileSystemEntry, path: string) {\r\n\r\n    if (item.isFile) {\r\n      const toUpload: UploadFile = new UploadFile(path, item);\r\n      this.files.push(toUpload);\r\n      this.zone.run(() => {\r\n        this.popToStack();\r\n      });\r\n    } else {\r\n      this.pushToStack(path);\r\n      path = path + '/';\r\n      const dirReader = (item as FileSystemDirectoryEntry).createReader();\r\n      let entries = [];\r\n      const thisObj = this;\r\n\r\n      const readEntries = function () {\r\n        thisObj.numOfActiveReadEntries++\r\n        dirReader.readEntries(function (res) {\r\n          if (!res.length) {\r\n            // add empty folders\r\n            if (entries.length === 0) {\r\n              const toUpload: UploadFile = new UploadFile(path, item);\r\n              thisObj.zone.run(() => {\r\n                thisObj.addToQueue(toUpload);\r\n              });\r\n            } else {\r\n              for (let i = 0; i < entries.length; i++) {\r\n                thisObj.zone.run(() => {\r\n                  thisObj.traverseFileTree(entries[i], path + entries[i].name);\r\n                });\r\n              }\r\n            }\r\n            thisObj.zone.run(() => {\r\n              thisObj.popToStack();\r\n            });\r\n          } else {\r\n            // continue with the reading\r\n            entries = entries.concat(res);\r\n            readEntries();\r\n          }\r\n          thisObj.numOfActiveReadEntries--\r\n        });\r\n      };\r\n\r\n      readEntries();\r\n    }\r\n  }\r\n\r\n  private addToQueue(item: UploadFile) {\r\n    this.files.push(item);\r\n  }\r\n\r\n  pushToStack(str) {\r\n    this.stack.push(str);\r\n  }\r\n\r\n  popToStack() {\r\n    const value = this.stack.pop();\r\n  }\r\n\r\n  private clearQueue() {\r\n    this.files = [];\r\n  }\r\n\r\n  private preventAndStop(event) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n    this.globalStart();\r\n    this.globalEnd();\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'cloud-icon',\r\n  templateUrl: './cloud-icon.component.html',\r\n  styleUrls: ['./cloud-icon.component.scss']\r\n})\r\nexport class CloudIconComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {FileComponent} from './file-drop.component';\r\nimport { CloudIconComponent } from '../icons/cloud-icon/cloud-icon.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FileComponent,\r\n    CloudIconComponent\r\n  ],\r\n  exports: [FileComponent],\r\n  imports: [CommonModule],\r\n  providers: [],\r\n  bootstrap: [FileComponent],\r\n})\r\nexport class FileDropModule {}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FilePreviewModel } from '../../file-preview.model';\r\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'preview-lightbox',\r\n  templateUrl: './preview-lightbox.component.html',\r\n  styleUrls: ['./preview-lightbox.component.scss']\r\n})\r\nexport class PreviewLightboxComponent implements OnInit {\r\n  @Input() file: FilePreviewModel;\r\n  @Output() close = new EventEmitter<void>();\r\n  loaded: boolean;\r\n  safeUrl: SafeResourceUrl;\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  ngOnInit() {\r\n    this.getSafeUrl(this.file.file);\r\n  }\r\n  getSafeUrl(file: File | Blob): void {\r\n    const url = window.URL.createObjectURL(file);\r\n    this.safeUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n  }\r\n  onClose(event): void {\r\n   this.close.next();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'refresh-icon',\r\n  templateUrl: './refresh-icon.component.html',\r\n  styleUrls: ['./refresh-icon.component.scss']\r\n})\r\nexport class RefreshIconComponent implements OnInit {\r\n   @Output() public retry  = new EventEmitter<void>();\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { CloseIconComponent } from './icons/close-icon/close-icon.component';\r\nimport { FilePreviewItemComponent } from './file-preview-container/file-preview-item/file-preview-item.component';\r\nimport { FilePreviewContainerComponent } from './file-preview-container/file-preview-container.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { FilePickerComponent } from './file-picker.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FilePickerService } from './file-picker.service';\r\nimport { FileDropModule } from './file-drop/file-drop.module';\r\nimport { PreviewLightboxComponent } from './file-preview-container/preview-lightbox/preview-lightbox.component';\r\nimport { RefreshIconComponent } from './file-preview-container/file-preview-item/refresh-icon/refresh-icon.component';\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FileDropModule,\r\n  ],\r\n  declarations: [\r\n    FilePickerComponent,\r\n    FilePreviewContainerComponent,\r\n    FilePreviewItemComponent,\r\n    PreviewLightboxComponent,\r\n    RefreshIconComponent,\r\n    CloseIconComponent\r\n  ],\r\n  exports: [FilePickerComponent],\r\n  providers: [FilePickerService]\r\n})\r\nexport class FilePickerModule {}\r\n"]}