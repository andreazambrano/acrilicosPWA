import * as tslib_1 from "tslib";
var NgxUploadModule_1;
import { InjectionToken, isDevMode, NgModule, Optional, SkipSelf } from '@angular/core';
import { NgxDragAndDropDirective } from './directives/dropzone.directive';
import { NgxThumbnailDirective } from './directives/thumbnail.directive';
import { NgxInputFileDirective } from './directives/inputfile.directive';
import { NGX_DROP_TARGET_OPTIONS, NGX_LOGGER_OPTIONS, ngxDropTargetOptions, ngxloggerOptions } from './utils/configuration.model';
import { ConsoleLogger, NgxUploadLogger, NoOpLogger } from './utils/logger.model';
import { InputfileComponent } from './components/inputfile.component';
import { HttpClientModule } from '@angular/common/http';
const ngxDeclarations = [
    NgxDragAndDropDirective, NgxThumbnailDirective, InputfileComponent, NgxInputFileDirective
];
/**
 * Factory associated with internal logger
 * @param options
 * @returns {any}
 * @private
 */
export function _loggerFactory(options) {
    const enabled = options.enabled ? options.enabled : isDevMode();
    if (enabled) {
        const _console = typeof console === 'object' ? console : {};
        const debug = options.debug ? options.debug : true;
        return new ConsoleLogger(_console, debug);
    }
    return new NoOpLogger();
}
export const NGX_UPLOAD_ROOT_GUARD = new InjectionToken('Internal forRoot Guard');
export function createNgxUploadRootGuard(options) {
    if (options) {
        throw new TypeError('NgxUploadModule.forRoot() is called twice.');
    }
    return 'guarded';
}
let NgxUploadModule = NgxUploadModule_1 = class NgxUploadModule {
    static forRoot(dropTargetOptions, loggerOptions) {
        return {
            ngModule: NgxUploadModule_1,
            providers: [
                { provide: NGX_LOGGER_OPTIONS, useValue: (loggerOptions) ? loggerOptions : ngxloggerOptions },
                {
                    provide: NGX_DROP_TARGET_OPTIONS,
                    useValue: (dropTargetOptions) ? dropTargetOptions : ngxDropTargetOptions
                },
                {
                    provide: NgxUploadLogger,
                    useFactory: _loggerFactory,
                    deps: [NGX_LOGGER_OPTIONS]
                },
                {
                    provide: NGX_UPLOAD_ROOT_GUARD,
                    useFactory: createNgxUploadRootGuard,
                    deps: [[NGX_LOGGER_OPTIONS, new Optional(), new SkipSelf()]]
                }
            ]
        };
    }
    ;
};
NgxUploadModule = NgxUploadModule_1 = tslib_1.__decorate([
    NgModule({
        declarations: [
            ...ngxDeclarations
        ],
        exports: [
            ...ngxDeclarations
        ],
        imports: [HttpClientModule],
        entryComponents: [InputfileComponent]
    })
], NgxUploadModule);
export { NgxUploadModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVwbG9hZC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ad2tvemEvbmd4LXVwbG9hZC8iLCJzb3VyY2VzIjpbIm5neC11cGxvYWQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQXVCLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3pFLE9BQU8sRUFFVSx1QkFBdUIsRUFDdEMsa0JBQWtCLEVBQ2xCLG9CQUFvQixFQUNwQixnQkFBZ0IsRUFDakIsTUFBTSw2QkFBNkIsQ0FBQztBQUNyQyxPQUFPLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RCxNQUFNLGVBQWUsR0FBRztJQUN0Qix1QkFBdUIsRUFBRSxxQkFBcUIsRUFBRSxrQkFBa0IsRUFBRSxxQkFBcUI7Q0FDMUYsQ0FBQztBQUVGOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxPQUFzQjtJQUNuRCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNoRSxJQUFJLE9BQU8sRUFBRTtRQUNYLE1BQU0sUUFBUSxHQUFZLE9BQU8sT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBTSxFQUFFLENBQUM7UUFDMUUsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ25ELE9BQU8sSUFBSSxhQUFhLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzNDO0lBQ0QsT0FBTyxJQUFJLFVBQVUsRUFBRSxDQUFDO0FBQzFCLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLGNBQWMsQ0FBTyx3QkFBd0IsQ0FBQyxDQUFDO0FBRXhGLE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxPQUFzQjtJQUM3RCxJQUFJLE9BQU8sRUFBRTtRQUNYLE1BQU0sSUFBSSxTQUFTLENBQUMsNENBQTRDLENBQUMsQ0FBQTtLQUNsRTtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFhRCxJQUFhLGVBQWUsdUJBQTVCLE1BQWEsZUFBZTtJQUUxQixNQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFxQyxFQUNyQyxhQUE2QjtRQUUxQyxPQUFPO1lBQ0wsUUFBUSxFQUFFLGlCQUFlO1lBQ3pCLFNBQVMsRUFBRTtnQkFDVCxFQUFFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDN0Y7b0JBQ0UsT0FBTyxFQUFFLHVCQUF1QjtvQkFDaEMsUUFBUSxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLG9CQUFvQjtpQkFDekU7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLGVBQWU7b0JBQ3hCLFVBQVUsRUFBRSxjQUFjO29CQUMxQixJQUFJLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztpQkFDM0I7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLHFCQUFxQjtvQkFDOUIsVUFBVSxFQUFFLHdCQUF3QjtvQkFDcEMsSUFBSSxFQUFFLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLFFBQVEsRUFBRSxFQUFFLElBQUksUUFBUSxFQUFFLENBQUMsQ0FBQztpQkFDN0Q7YUFDRjtTQUNGLENBQUE7SUFDSCxDQUFDO0lBQUEsQ0FBQztDQUNILENBQUE7QUExQlksZUFBZTtJQVgzQixRQUFRLENBQUM7UUFDUixZQUFZLEVBQUU7WUFDWixHQUFHLGVBQWU7U0FDbkI7UUFDRCxPQUFPLEVBQUU7WUFDUCxHQUFHLGVBQWU7U0FDbkI7UUFDRCxPQUFPLEVBQUUsQ0FBRSxnQkFBZ0IsQ0FBRTtRQUM3QixlQUFlLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztLQUN0QyxDQUFDO0dBRVcsZUFBZSxDQTBCM0I7U0ExQlksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBpc0Rldk1vZGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlLCBPcHRpb25hbCwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neERyYWdBbmREcm9wRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2Ryb3B6b25lLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOZ3hUaHVtYm5haWxEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvdGh1bWJuYWlsLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOZ3hJbnB1dEZpbGVEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvaW5wdXRmaWxlLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1xuICBEcm9wVGFyZ2V0T3B0aW9ucyxcbiAgTG9nZ2VyT3B0aW9ucywgTkdYX0RST1BfVEFSR0VUX09QVElPTlMsXG4gIE5HWF9MT0dHRVJfT1BUSU9OUyxcbiAgbmd4RHJvcFRhcmdldE9wdGlvbnMsXG4gIG5neGxvZ2dlck9wdGlvbnNcbn0gZnJvbSAnLi91dGlscy9jb25maWd1cmF0aW9uLm1vZGVsJztcbmltcG9ydCB7IENvbnNvbGVMb2dnZXIsIE5neFVwbG9hZExvZ2dlciwgTm9PcExvZ2dlciB9IGZyb20gJy4vdXRpbHMvbG9nZ2VyLm1vZGVsJztcbmltcG9ydCB7IElucHV0ZmlsZUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9pbnB1dGZpbGUuY29tcG9uZW50JztcbmltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmNvbnN0IG5neERlY2xhcmF0aW9ucyA9IFtcbiAgTmd4RHJhZ0FuZERyb3BEaXJlY3RpdmUsIE5neFRodW1ibmFpbERpcmVjdGl2ZSwgSW5wdXRmaWxlQ29tcG9uZW50LCBOZ3hJbnB1dEZpbGVEaXJlY3RpdmVcbl07XG5cbi8qKlxuICogRmFjdG9yeSBhc3NvY2lhdGVkIHdpdGggaW50ZXJuYWwgbG9nZ2VyXG4gKiBAcGFyYW0gb3B0aW9uc1xuICogQHJldHVybnMge2FueX1cbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfbG9nZ2VyRmFjdG9yeShvcHRpb25zOiBMb2dnZXJPcHRpb25zKTogTmd4VXBsb2FkTG9nZ2VyIHtcbiAgY29uc3QgZW5hYmxlZCA9IG9wdGlvbnMuZW5hYmxlZCA/IG9wdGlvbnMuZW5hYmxlZCA6IGlzRGV2TW9kZSgpO1xuICBpZiAoZW5hYmxlZCkge1xuICAgIGNvbnN0IF9jb25zb2xlOiBDb25zb2xlID0gdHlwZW9mIGNvbnNvbGUgPT09ICdvYmplY3QnID8gY29uc29sZSA6IDxhbnk+e307XG4gICAgY29uc3QgZGVidWcgPSBvcHRpb25zLmRlYnVnID8gb3B0aW9ucy5kZWJ1ZyA6IHRydWU7XG4gICAgcmV0dXJuIG5ldyBDb25zb2xlTG9nZ2VyKF9jb25zb2xlLCBkZWJ1Zyk7XG4gIH1cbiAgcmV0dXJuIG5ldyBOb09wTG9nZ2VyKCk7XG59XG5cbmV4cG9ydCBjb25zdCBOR1hfVVBMT0FEX1JPT1RfR1VBUkQgPSBuZXcgSW5qZWN0aW9uVG9rZW48dm9pZD4oJ0ludGVybmFsIGZvclJvb3QgR3VhcmQnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5neFVwbG9hZFJvb3RHdWFyZChvcHRpb25zOiBMb2dnZXJPcHRpb25zKSB7XG4gIGlmIChvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTmd4VXBsb2FkTW9kdWxlLmZvclJvb3QoKSBpcyBjYWxsZWQgdHdpY2UuJylcbiAgfVxuICByZXR1cm4gJ2d1YXJkZWQnO1xufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICAuLi5uZ3hEZWNsYXJhdGlvbnNcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIC4uLm5neERlY2xhcmF0aW9uc1xuICBdLFxuICBpbXBvcnRzOiBbIEh0dHBDbGllbnRNb2R1bGUgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbSW5wdXRmaWxlQ29tcG9uZW50XVxufSlcblxuZXhwb3J0IGNsYXNzIE5neFVwbG9hZE1vZHVsZSB7XG5cbiAgc3RhdGljIGZvclJvb3QoZHJvcFRhcmdldE9wdGlvbnM/OiBEcm9wVGFyZ2V0T3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgbG9nZ2VyT3B0aW9ucz86IExvZ2dlck9wdGlvbnMpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcblxuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmd4VXBsb2FkTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHsgcHJvdmlkZTogTkdYX0xPR0dFUl9PUFRJT05TLCB1c2VWYWx1ZTogKGxvZ2dlck9wdGlvbnMpID8gbG9nZ2VyT3B0aW9ucyA6IG5neGxvZ2dlck9wdGlvbnMgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE5HWF9EUk9QX1RBUkdFVF9PUFRJT05TLFxuICAgICAgICAgIHVzZVZhbHVlOiAoZHJvcFRhcmdldE9wdGlvbnMpID8gZHJvcFRhcmdldE9wdGlvbnMgOiBuZ3hEcm9wVGFyZ2V0T3B0aW9uc1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogTmd4VXBsb2FkTG9nZ2VyLFxuICAgICAgICAgIHVzZUZhY3Rvcnk6IF9sb2dnZXJGYWN0b3J5LFxuICAgICAgICAgIGRlcHM6IFtOR1hfTE9HR0VSX09QVElPTlNdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBOR1hfVVBMT0FEX1JPT1RfR1VBUkQsXG4gICAgICAgICAgdXNlRmFjdG9yeTogY3JlYXRlTmd4VXBsb2FkUm9vdEd1YXJkLFxuICAgICAgICAgIGRlcHM6IFtbTkdYX0xPR0dFUl9PUFRJT05TLCBuZXcgT3B0aW9uYWwoKSwgbmV3IFNraXBTZWxmKCldXVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9O1xufVxuXG4iXX0=