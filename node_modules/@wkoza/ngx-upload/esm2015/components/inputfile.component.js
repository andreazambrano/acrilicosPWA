import * as tslib_1 from "tslib";
import { Component, Injector, Optional, Renderer2, ViewChild } from '@angular/core';
import { FormGroupDirective, NgForm } from '@angular/forms';
import { HttpClientUploadService } from '../services/httpClientUpload.service';
let InputfileComponent = class InputfileComponent {
    constructor(injector, uploader, renderer, ngForm, formGroupDirective) {
        this.injector = injector;
        this.uploader = uploader;
        this.renderer = renderer;
        this.ngForm = ngForm;
        this.formGroupDirective = formGroupDirective;
        this.files = new Set();
        if (this.ngForm) {
            this.formGroup = ngForm.form;
        }
        else if (this.formGroupDirective) {
            this.formGroup = formGroupDirective.form;
        }
        else {
            this.formGroup = null;
        }
    }
    onFilesAdded() {
        this.uploader.addToQueue(this.file.nativeElement.files, this.formGroup, this.options);
        // Clear the previous input value
        this.file.nativeElement.value = '';
    }
    ngAfterViewInit() {
        if (this.options.multiple !== false)
            this.renderer.setProperty(this.file.nativeElement, 'multiple', 'multiple');
        if (this.options.accept)
            this.renderer.setProperty(this.file.nativeElement, 'accept', this.options.accept.join());
        if (this.options.capture)
            this.renderer.setProperty(this.file.nativeElement, 'capture', this.options.capture);
    }
};
tslib_1.__decorate([
    ViewChild('file', { static: true }),
    tslib_1.__metadata("design:type", Object)
], InputfileComponent.prototype, "file", void 0);
InputfileComponent = tslib_1.__decorate([
    Component({
        selector: 'ngx-upload-inputfile',
        template: `
      <label class="input-file">
          <input type="file" #file (change)="onFilesAdded()">
          <ng-content></ng-content>
      </label>`,
        styles: ['input[type="file"] { display: none; } .input-file { width: 100%; }']
    }),
    tslib_1.__param(3, Optional()), tslib_1.__param(4, Optional()),
    tslib_1.__metadata("design:paramtypes", [Injector, HttpClientUploadService, Renderer2,
        NgForm, FormGroupDirective])
], InputfileComponent);
export { InputfileComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRmaWxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B3a296YS9uZ3gtdXBsb2FkLyIsInNvdXJjZXMiOlsiY29tcG9uZW50cy9pbnB1dGZpbGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkcsT0FBTyxFQUFhLGtCQUFrQixFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3ZFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBWS9FLElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0lBVzdCLFlBQW9CLFFBQWtCLEVBQVUsUUFBaUMsRUFBVSxRQUFtQixFQUM5RSxNQUFjLEVBQXNCLGtCQUFzQztRQUR0RixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBeUI7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQzlFLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBc0IsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQVIxRyxVQUFLLEdBQWMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQVMzQixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDOUI7YUFBTSxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUNsQyxJQUFJLENBQUMsU0FBUyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQztTQUMxQzthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDdkI7SUFDSCxDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0RixpQ0FBaUM7UUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEtBQUssS0FBSztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNoSCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTTtZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2xILElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEgsQ0FBQztDQUNGLENBQUE7QUEvQm9DO0lBQWxDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUM7O2dEQUFNO0FBRjdCLGtCQUFrQjtJQVQ5QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsc0JBQXNCO1FBQ2hDLFFBQVEsRUFBRTs7OztlQUlHO2lCQUNKLG9FQUFvRTtLQUM5RSxDQUFDO0lBYWEsbUJBQUEsUUFBUSxFQUFFLENBQUEsRUFBMEIsbUJBQUEsUUFBUSxFQUFFLENBQUE7NkNBRDdCLFFBQVEsRUFBb0IsdUJBQXVCLEVBQW9CLFNBQVM7UUFDdEUsTUFBTSxFQUEwQyxrQkFBa0I7R0FaL0Ysa0JBQWtCLENBaUM5QjtTQWpDWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIEluamVjdG9yLCBPcHRpb25hbCwgUmVuZGVyZXIyLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCwgRm9ybUdyb3VwRGlyZWN0aXZlLCBOZ0Zvcm0gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IElucHV0RmlsZU9wdGlvbnMgfSBmcm9tICcuLi91dGlscy9jb25maWd1cmF0aW9uLm1vZGVsJztcbmltcG9ydCB7IEh0dHBDbGllbnRVcGxvYWRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvaHR0cENsaWVudFVwbG9hZC5zZXJ2aWNlJztcblxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtdXBsb2FkLWlucHV0ZmlsZScsXG4gIHRlbXBsYXRlOiBgXG4gICAgICA8bGFiZWwgY2xhc3M9XCJpbnB1dC1maWxlXCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgI2ZpbGUgKGNoYW5nZSk9XCJvbkZpbGVzQWRkZWQoKVwiPlxuICAgICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICAgIDwvbGFiZWw+YCxcbiAgc3R5bGVzOiBbJ2lucHV0W3R5cGU9XCJmaWxlXCJdIHsgZGlzcGxheTogbm9uZTsgfSAuaW5wdXQtZmlsZSB7IHdpZHRoOiAxMDAlOyB9J11cbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRmaWxlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgQFZpZXdDaGlsZCgnZmlsZScsIHtzdGF0aWM6IHRydWV9KSBmaWxlO1xuXG4gIGZpbGVzOiBTZXQ8RmlsZT4gPSBuZXcgU2V0KCk7XG5cbiAgb3B0aW9uczogSW5wdXRGaWxlT3B0aW9ucztcblxuICBwcml2YXRlIGZvcm1Hcm91cDogRm9ybUdyb3VwIHwgbnVsbDtcblxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIHVwbG9hZGVyOiBIdHRwQ2xpZW50VXBsb2FkU2VydmljZSwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBwcml2YXRlIG5nRm9ybTogTmdGb3JtLCBAT3B0aW9uYWwoKSBwcml2YXRlIGZvcm1Hcm91cERpcmVjdGl2ZTogRm9ybUdyb3VwRGlyZWN0aXZlKSB7XG4gICAgaWYgKHRoaXMubmdGb3JtKSB7XG4gICAgICB0aGlzLmZvcm1Hcm91cCA9IG5nRm9ybS5mb3JtO1xuICAgIH0gZWxzZSBpZiAodGhpcy5mb3JtR3JvdXBEaXJlY3RpdmUpIHtcbiAgICAgIHRoaXMuZm9ybUdyb3VwID0gZm9ybUdyb3VwRGlyZWN0aXZlLmZvcm07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZm9ybUdyb3VwID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBvbkZpbGVzQWRkZWQoKSB7XG4gICAgdGhpcy51cGxvYWRlci5hZGRUb1F1ZXVlKHRoaXMuZmlsZS5uYXRpdmVFbGVtZW50LmZpbGVzLCB0aGlzLmZvcm1Hcm91cCwgdGhpcy5vcHRpb25zKTtcbiAgICAvLyBDbGVhciB0aGUgcHJldmlvdXMgaW5wdXQgdmFsdWVcbiAgICB0aGlzLmZpbGUubmF0aXZlRWxlbWVudC52YWx1ZSA9ICcnO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMubXVsdGlwbGUgIT09IGZhbHNlKSB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuZmlsZS5uYXRpdmVFbGVtZW50LCAnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmFjY2VwdCkgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLmZpbGUubmF0aXZlRWxlbWVudCwgJ2FjY2VwdCcsIHRoaXMub3B0aW9ucy5hY2NlcHQuam9pbigpKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmNhcHR1cmUpIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5maWxlLm5hdGl2ZUVsZW1lbnQsICdjYXB0dXJlJywgdGhpcy5vcHRpb25zLmNhcHR1cmUpO1xuICB9XG59XG4iXX0=