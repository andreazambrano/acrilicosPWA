import * as tslib_1 from "tslib";
import { Subject } from 'rxjs';
import { HttpClient, HttpErrorResponse, HttpEventType, HttpRequest, HttpResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { FileItem } from './fileItem.model';
import { NgxUploadLogger } from '../utils/logger.model';
import * as i0 from "@angular/core";
import * as i1 from "../utils/logger.model";
import * as i2 from "@angular/common/http";
// send an event for each upload event. These events can be catched by the user for call a callback
let HttpClientUploadService = class HttpClientUploadService {
    constructor(logger, httpClient) {
        this.logger = logger;
        this.httpClient = httpClient;
        this.progressTotal = 0;
        this.onCancel$ = new Subject();
        this.onError$ = new Subject();
        this.onDropError$ = new Subject();
        this.onSuccess$ = new Subject(); // TODO headers isn't `any` but `Array`
        this.onBeforeUploadItem$ = new Subject();
        this.onProgress$ = new Subject();
        this.onAddToQueue$ = new Subject();
        this.queue = new Array();
        this.headers = new Map();
    }
    /**
     * Adds files to the queue
     */
    addToQueue(files, formGroup, options) {
        this.logger.info('add to queue');
        if (options && !options.multiple) {
            if (files.length > 1) {
                this.logger.error('there is more than one file.');
                this.onDropError$.next({ errorAccept: false, errorMultiple: true });
                return;
            }
        }
        for (let i = 0; i < files.length; i++) {
            const file = files.item(i);
            this.logger.debug(files.item(i));
            if (options && options.accept) {
                const accepted = options.accept.some((type) => {
                    if (type.indexOf('/*') > -1) {
                        return type.split('/')[0] === file.type.split('/')[0];
                    }
                    else {
                        return (type === '*' || type === file.type);
                    }
                });
                if (!accepted) {
                    this.logger.error('this file is not accepted because of its type', file);
                    this.onDropError$.next({ item: file, errorAccept: true, errorMultiple: false });
                    continue;
                }
            }
            let fileItem;
            if (options && options.disableMultipart) {
                fileItem = new FileItem(file, this, this.logger, true);
            }
            else {
                fileItem = new FileItem(file, this, this.logger, false);
                if (formGroup) {
                    Object.keys(formGroup.controls).forEach((key) => {
                        fileItem.formData.append(key, formGroup.get(key).value);
                    });
                }
            }
            this.queue.push(fileItem);
            this.onAddToQueue$.next(fileItem);
        }
    }
    uploadFileItem(fileItem, endpoint, options = {}) {
        this.logger.info('enter uploadService.uploadFileItem()');
        const method = endpoint.method;
        const url = endpoint.url;
        const index = this.queue.indexOf(fileItem);
        const item = this.queue[index];
        this.onBeforeUploadItem(item);
        if (item.isCancel) {
            return;
        }
        item.uploadInProgress = true;
        let sendable;
        if (!fileItem.disableMultipart) {
            sendable = item.formData;
            sendable.append(item.alias, item.file, item.file.name);
        }
        else {
            sendable = item.file;
        }
        const req = new HttpRequest(method, url, sendable, Object.assign(options, { reportProgress: true }));
        fileItem.sub = this.httpClient.request(req).subscribe((event) => {
            if (event.type === HttpEventType.UploadProgress) {
                // This is an upload progress event. Compute and show the % done:
                const percentDone = Math.round(event.loaded * 100 / (event.total ? event.total : event.loaded));
                this.logger.debug(`File is ${percentDone}% uploaded.`);
                fileItem.ɵonProgress(percentDone);
                this.onProgressItem(item, percentDone);
            }
            else if (event instanceof HttpResponse) {
                // A successful response is delivered on the event stream.
                fileItem.ɵonSuccess();
                this.onSuccess(item, event.body, event.status, event.headers);
            }
        }, (err) => {
            if (err instanceof HttpErrorResponse) {
                if (url === 'ngx_upload_mock') {
                    item.ɵonSuccess();
                    this.onSuccess(item, err.message, err.status, err.headers);
                }
                else if (err.error instanceof Error) {
                    // A client-side or network error occurred. Handle it accordingly.
                    item.ɵonError();
                    this.onError(item, err.error.message, err.status, err.headers);
                }
                else {
                    // The backend returned an unsuccessful response code.
                    // The response body may contain clues as to what went wrong,
                    item.ɵonError();
                    this.onError(item, err.error, err.status, err.headers);
                }
            }
        });
    }
    cancelFileItem(fileItem) {
        this.progressTotal = this.computeTotalProgress();
        this.onCancel$.next(fileItem);
    }
    /**
     * Uploads all not uploaded items of queue
     */
    uploadAll(endpoint, options) {
        const items = this.queue.filter(item => (item.isReady));
        if (!items.length) {
            return;
        }
        for (const item of items) {
            item.upload(endpoint, options);
        }
    }
    /**
     * Uploads all not uploaded items of queue
     */
    cancelAll() {
        const items = this.queue.filter(item => (item.uploadInProgress));
        if (!items.length) {
            return;
        }
        for (const item of items) {
            item.cancel();
        }
        this.progressTotal = this.computeTotalProgress();
    }
    /**
     * Uploads all not uploaded items of queue
     */
    removeAllFromQueue() {
        const items = this.queue.filter(item => (!item.uploadInProgress && !item.isSuccess));
        if (!items.length) {
            return;
        }
        for (const item of items) {
            this.removeFromQueue(item);
        }
    }
    removeFromQueue(fileItem) {
        const index = this.queue.indexOf(fileItem);
        const item = this.queue[index];
        if (item.uploadInProgress) {
            item.cancel();
        }
        this.queue.splice(index, 1);
        this.progressTotal = this.computeTotalProgress();
    }
    /**
     * Returns the total progress
     * @param {Number} [value]
     * @returns {Number}
     * @private
     */
    computeTotalProgress() {
        let totalCurrent = 0;
        let total = 0;
        for (const item of this.queue) {
            if (item.uploadInProgress || item.isSuccess) {
                totalCurrent += (item.file.size / 100) * item.progress || 0;
                total += item.file.size;
                this.logger.debug(totalCurrent + ' / ' + total);
            }
        }
        return Math.round((totalCurrent * 100) / total);
    }
    /**
     * Prepares file status before upload
     * @param item
     */
    onBeforeUploadItem(item) {
        this.logger.info('enter uploadService.ɵonBeforeUploadItem()');
        item.ɵonBeforeUploadItem();
        this.onBeforeUploadItem$.next(item);
    }
    /**
     * Update status during upload progress
     * @param item
     * @param progress
     */
    onProgressItem(item, progress) {
        this.logger.info(`call onProgressItem ${item} ${progress}`);
        this.progressTotal = this.computeTotalProgress();
        item.ɵonProgress(progress);
        this.onProgress$.next({ item, progress });
    }
    /**
     * Callback called when an upload error occurs
     * @param item
     * @param xhr
     */
    onError(item, body, status, headers) {
        this.logger.info(`call onError ${item} ${body} ${status} ${headers}`);
        item.ɵonError();
        this.onError$.next({ item, body, status, headers });
    }
    /**
     * Callback called when an upload success occurs
     * @param item
     * @param xhr
     */
    onSuccess(item, body, status, headers) {
        this.logger.info(`call onSuccess ${item} ${body} ${status} ${headers}`);
        this.progressTotal = this.computeTotalProgress();
        item.ɵonSuccess();
        this.onSuccess$.next({ item, body, status, headers });
    }
};
HttpClientUploadService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function HttpClientUploadService_Factory() { return new HttpClientUploadService(i0.ɵɵinject(i1.NgxUploadLogger), i0.ɵɵinject(i2.HttpClient)); }, token: HttpClientUploadService, providedIn: "root" });
HttpClientUploadService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__metadata("design:paramtypes", [NgxUploadLogger, HttpClient])
], HttpClientUploadService);
export { HttpClientUploadService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cENsaWVudFVwbG9hZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHdrb3phL25neC11cGxvYWQvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9odHRwQ2xpZW50VXBsb2FkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFDTCxVQUFVLEVBQ1YsaUJBQWlCLEVBQ2pCLGFBQWEsRUFHYixXQUFXLEVBQ1gsWUFBWSxFQUNiLE1BQU0sc0JBQXNCLENBQUM7QUFDOUIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7O0FBSXhELG1HQUFtRztBQUtuRyxJQUFhLHVCQUF1QixHQUFwQyxNQUFhLHVCQUF1QjtJQXFCbEMsWUFBc0IsTUFBdUIsRUFBVSxVQUFzQjtRQUF2RCxXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUFVLGVBQVUsR0FBVixVQUFVLENBQVk7UUFsQjdFLGtCQUFhLEdBQUcsQ0FBQyxDQUFDO1FBVVgsY0FBUyxHQUFHLElBQUksT0FBTyxFQUFZLENBQUM7UUFDcEMsYUFBUSxHQUFHLElBQUksT0FBTyxFQUErRCxDQUFDO1FBQ3RGLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQWlFLENBQUM7UUFDNUYsZUFBVSxHQUFHLElBQUksT0FBTyxFQUErRCxDQUFDLENBQUMsdUNBQXVDO1FBQ2hJLHdCQUFtQixHQUFHLElBQUksT0FBTyxFQUFZLENBQUM7UUFDOUMsZ0JBQVcsR0FBRyxJQUFJLE9BQU8sRUFBd0MsQ0FBQztRQUNsRSxrQkFBYSxHQUFHLElBQUksT0FBTyxFQUFZLENBQUM7UUFHN0MsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLEtBQUssRUFBWSxDQUFDO1FB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bmltcG9ydCB7IFN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgSHR0cENsaWVudCxcbiAgSHR0cEVycm9yUmVzcG9uc2UsXG4gIEh0dHBFdmVudFR5cGUsXG4gIEh0dHBIZWFkZXJzLFxuICBIdHRwUGFyYW1zLFxuICBIdHRwUmVxdWVzdCxcbiAgSHR0cFJlc3BvbnNlXG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgRmlsZUl0ZW0gfSBmcm9tICcuL2ZpbGVJdGVtLm1vZGVsJztcbmltcG9ydCB7IE5neFVwbG9hZExvZ2dlciB9IGZyb20gJy4uL3V0aWxzL2xvZ2dlci5tb2RlbCc7XG5pbXBvcnQgeyBEcm9wVGFyZ2V0T3B0aW9ucywgSW5wdXRGaWxlT3B0aW9ucywgVXBsb2FkRW5kUG9pbnQgfSBmcm9tICcuLi91dGlscy9jb25maWd1cmF0aW9uLm1vZGVsJztcblxuXG4vLyBzZW5kIGFuIGV2ZW50IGZvciBlYWNoIHVwbG9hZCBldmVudC4gVGhlc2UgZXZlbnRzIGNhbiBiZSBjYXRjaGVkIGJ5IHRoZSB1c2VyIGZvciBjYWxsIGEgY2FsbGJhY2tcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgSHR0cENsaWVudFVwbG9hZFNlcnZpY2Uge1xuXG4gIHF1ZXVlOiBGaWxlSXRlbVtdO1xuICBwcm9ncmVzc1RvdGFsID0gMDtcbiAgd2l0aENyZWRlbnRpYWxzOiBib29sZWFuO1xuXG4gIHN1YjogU3Vic2NyaXB0aW9uO1xuXG4gIC8qKlxuICAgKiBJbnRlcm5hbCBtYXAgb2YgbG93ZXJjYXNlIGhlYWRlciBuYW1lcyB0byB2YWx1ZXMuXG4gICAqL1xuICBwcm90ZWN0ZWQgaGVhZGVyczogTWFwPHN0cmluZywgc3RyaW5nW10+O1xuXG4gIHB1YmxpYyBvbkNhbmNlbCQgPSBuZXcgU3ViamVjdDxGaWxlSXRlbT4oKTtcbiAgcHVibGljIG9uRXJyb3IkID0gbmV3IFN1YmplY3Q8eyBpdGVtOiBGaWxlSXRlbSwgYm9keTogYW55LCBzdGF0dXM6IG51bWJlciwgaGVhZGVyczogYW55IH0+KCk7XG4gIHB1YmxpYyBvbkRyb3BFcnJvciQgPSBuZXcgU3ViamVjdDx7IGl0ZW0/OiBGaWxlLCBlcnJvckFjY2VwdDogYm9vbGVhbiwgZXJyb3JNdWx0aXBsZTogYm9vbGVhbiB9PigpO1xuICBwdWJsaWMgb25TdWNjZXNzJCA9IG5ldyBTdWJqZWN0PHsgaXRlbTogRmlsZUl0ZW0sIGJvZHk6IGFueSwgc3RhdHVzOiBudW1iZXIsIGhlYWRlcnM6IGFueSB9PigpOyAvLyBUT0RPIGhlYWRlcnMgaXNuJ3QgYGFueWAgYnV0IGBBcnJheWBcbiAgcHVibGljIG9uQmVmb3JlVXBsb2FkSXRlbSQgPSBuZXcgU3ViamVjdDxGaWxlSXRlbT4oKTtcbiAgcHVibGljIG9uUHJvZ3Jlc3MkID0gbmV3IFN1YmplY3Q8eyBpdGVtOiBGaWxlSXRlbSwgcHJvZ3Jlc3M6IG51bWJlciB9PigpO1xuICBwdWJsaWMgb25BZGRUb1F1ZXVlJCA9IG5ldyBTdWJqZWN0PEZpbGVJdGVtPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBsb2dnZXI6IE5neFVwbG9hZExvZ2dlciwgcHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7XG4gICAgdGhpcy5xdWV1ZSA9IG5ldyBBcnJheTxGaWxlSXRlbT4oKTtcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgTWFwKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBmaWxlcyB0byB0aGUgcXVldWVcbiAgICovXG4gIGFkZFRvUXVldWUoZmlsZXM6IEZpbGVMaXN0LCBmb3JtR3JvdXA6IEZvcm1Hcm91cCB8IG51bGwsIG9wdGlvbnM6IERyb3BUYXJnZXRPcHRpb25zIHwgSW5wdXRGaWxlT3B0aW9ucykge1xuXG4gICAgdGhpcy5sb2dnZXIuaW5mbygnYWRkIHRvIHF1ZXVlJyk7XG5cbiAgICBpZiAob3B0aW9ucyAmJiAhb3B0aW9ucy5tdWx0aXBsZSkge1xuICAgICAgaWYgKGZpbGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ3RoZXJlIGlzIG1vcmUgdGhhbiBvbmUgZmlsZS4nKTtcbiAgICAgICAgdGhpcy5vbkRyb3BFcnJvciQubmV4dCh7ZXJyb3JBY2NlcHQ6IGZhbHNlLCBlcnJvck11bHRpcGxlOiB0cnVlfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBmaWxlID0gZmlsZXMuaXRlbShpKSE7XG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhmaWxlcy5pdGVtKGkpKTtcblxuICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hY2NlcHQpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWQgPSBvcHRpb25zLmFjY2VwdC5zb21lKCh0eXBlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBpZiAodHlwZS5pbmRleE9mKCcvKicpID4gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlLnNwbGl0KCcvJylbMF0gPT09IGZpbGUudHlwZS5zcGxpdCgnLycpWzBdXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAodHlwZSA9PT0gJyonIHx8IHR5cGUgPT09IGZpbGUudHlwZSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWFjY2VwdGVkKSB7XG4gICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ3RoaXMgZmlsZSBpcyBub3QgYWNjZXB0ZWQgYmVjYXVzZSBvZiBpdHMgdHlwZScsIGZpbGUpO1xuICAgICAgICAgIHRoaXMub25Ecm9wRXJyb3IkLm5leHQoe2l0ZW06IGZpbGUsIGVycm9yQWNjZXB0OiB0cnVlLCBlcnJvck11bHRpcGxlOiBmYWxzZX0pO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGV0IGZpbGVJdGVtO1xuICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5kaXNhYmxlTXVsdGlwYXJ0KSB7XG4gICAgICAgIGZpbGVJdGVtID0gbmV3IEZpbGVJdGVtKGZpbGUsIHRoaXMsIHRoaXMubG9nZ2VyLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbGVJdGVtID0gbmV3IEZpbGVJdGVtKGZpbGUsIHRoaXMsIHRoaXMubG9nZ2VyLCBmYWxzZSk7XG4gICAgICAgIGlmIChmb3JtR3JvdXApIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyhmb3JtR3JvdXAuY29udHJvbHMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgZmlsZUl0ZW0uZm9ybURhdGEuYXBwZW5kKGtleSwgZm9ybUdyb3VwLmdldChrZXkpICEudmFsdWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnF1ZXVlLnB1c2goZmlsZUl0ZW0pO1xuICAgICAgdGhpcy5vbkFkZFRvUXVldWUkLm5leHQoZmlsZUl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIHVwbG9hZEZpbGVJdGVtKGZpbGVJdGVtOiBGaWxlSXRlbSwgZW5kcG9pbnQ6IFVwbG9hZEVuZFBvaW50LCBvcHRpb25zOiB7XG4gICAgaGVhZGVycz86IEh0dHBIZWFkZXJzO1xuICAgIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbjtcbiAgICBwYXJhbXM/OiBIdHRwUGFyYW1zO1xuICAgIHJlc3BvbnNlVHlwZT86ICdhcnJheWJ1ZmZlcicgfCAnYmxvYicgfCAnanNvbicgfCAndGV4dCc7XG4gICAgd2l0aENyZWRlbnRpYWxzPzogYm9vbGVhbjtcbiAgfSA9IHt9KTogdm9pZCB7XG4gICAgdGhpcy5sb2dnZXIuaW5mbygnZW50ZXIgdXBsb2FkU2VydmljZS51cGxvYWRGaWxlSXRlbSgpJyk7XG5cbiAgICBjb25zdCBtZXRob2QgPSBlbmRwb2ludC5tZXRob2QgYXMgc3RyaW5nO1xuICAgIGNvbnN0IHVybCA9IGVuZHBvaW50LnVybCBhcyBzdHJpbmc7XG5cbiAgICBjb25zdCBpbmRleCA9IHRoaXMucXVldWUuaW5kZXhPZihmaWxlSXRlbSk7XG4gICAgY29uc3QgaXRlbSA9IHRoaXMucXVldWVbaW5kZXhdO1xuXG4gICAgdGhpcy5vbkJlZm9yZVVwbG9hZEl0ZW0oaXRlbSk7XG5cbiAgICBpZiAoaXRlbS5pc0NhbmNlbCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaXRlbS51cGxvYWRJblByb2dyZXNzID0gdHJ1ZTtcblxuICAgIGxldCBzZW5kYWJsZTtcblxuICAgIGlmICghZmlsZUl0ZW0uZGlzYWJsZU11bHRpcGFydCkge1xuICAgICAgc2VuZGFibGUgPSBpdGVtLmZvcm1EYXRhO1xuICAgICAgc2VuZGFibGUuYXBwZW5kKGl0ZW0uYWxpYXMsIGl0ZW0uZmlsZSwgaXRlbS5maWxlLm5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZW5kYWJsZSA9IGl0ZW0uZmlsZTtcbiAgICB9XG5cbiAgICBjb25zdCByZXEgPSBuZXcgSHR0cFJlcXVlc3QobWV0aG9kLCB1cmwsIHNlbmRhYmxlLCBPYmplY3QuYXNzaWduKG9wdGlvbnMsIHtyZXBvcnRQcm9ncmVzczogdHJ1ZX0pKTtcblxuICAgIGZpbGVJdGVtLnN1YiA9IHRoaXMuaHR0cENsaWVudC5yZXF1ZXN0KHJlcSkuc3Vic2NyaWJlKFxuICAgICAgKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC50eXBlID09PSBIdHRwRXZlbnRUeXBlLlVwbG9hZFByb2dyZXNzKSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBhbiB1cGxvYWQgcHJvZ3Jlc3MgZXZlbnQuIENvbXB1dGUgYW5kIHNob3cgdGhlICUgZG9uZTpcbiAgICAgICAgICBjb25zdCBwZXJjZW50RG9uZSA9IE1hdGgucm91bmQoZXZlbnQubG9hZGVkICogMTAwIC8gKGV2ZW50LnRvdGFsID8gZXZlbnQudG90YWwgOiBldmVudC5sb2FkZWQpKTtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgRmlsZSBpcyAke3BlcmNlbnREb25lfSUgdXBsb2FkZWQuYCk7XG4gICAgICAgICAgZmlsZUl0ZW0uybVvblByb2dyZXNzKHBlcmNlbnREb25lKTtcbiAgICAgICAgICB0aGlzLm9uUHJvZ3Jlc3NJdGVtKGl0ZW0sIHBlcmNlbnREb25lKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlKSB7XG4gICAgICAgICAgLy8gQSBzdWNjZXNzZnVsIHJlc3BvbnNlIGlzIGRlbGl2ZXJlZCBvbiB0aGUgZXZlbnQgc3RyZWFtLlxuICAgICAgICAgIGZpbGVJdGVtLsm1b25TdWNjZXNzKCk7XG4gICAgICAgICAgdGhpcy5vblN1Y2Nlc3MoaXRlbSwgZXZlbnQuYm9keSwgZXZlbnQuc3RhdHVzLCBldmVudC5oZWFkZXJzKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIChlcnIpID0+IHtcbiAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgICAgICAgaWYgKHVybCA9PT0gJ25neF91cGxvYWRfbW9jaycpIHtcbiAgICAgICAgICAgIGl0ZW0uybVvblN1Y2Nlc3MoKTtcbiAgICAgICAgICAgIHRoaXMub25TdWNjZXNzKGl0ZW0sIGVyci5tZXNzYWdlLCBlcnIuc3RhdHVzLCBlcnIuaGVhZGVycyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChlcnIuZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgLy8gQSBjbGllbnQtc2lkZSBvciBuZXR3b3JrIGVycm9yIG9jY3VycmVkLiBIYW5kbGUgaXQgYWNjb3JkaW5nbHkuXG4gICAgICAgICAgICBpdGVtLsm1b25FcnJvcigpO1xuICAgICAgICAgICAgdGhpcy5vbkVycm9yKGl0ZW0sIGVyci5lcnJvci5tZXNzYWdlLCBlcnIuc3RhdHVzLCBlcnIuaGVhZGVycyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRoZSBiYWNrZW5kIHJldHVybmVkIGFuIHVuc3VjY2Vzc2Z1bCByZXNwb25zZSBjb2RlLlxuICAgICAgICAgICAgLy8gVGhlIHJlc3BvbnNlIGJvZHkgbWF5IGNvbnRhaW4gY2x1ZXMgYXMgdG8gd2hhdCB3ZW50IHdyb25nLFxuICAgICAgICAgICAgaXRlbS7JtW9uRXJyb3IoKTtcbiAgICAgICAgICAgIHRoaXMub25FcnJvcihpdGVtLCBlcnIuZXJyb3IsIGVyci5zdGF0dXMsIGVyci5oZWFkZXJzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgY2FuY2VsRmlsZUl0ZW0oZmlsZUl0ZW06IEZpbGVJdGVtKSB7XG4gICAgdGhpcy5wcm9ncmVzc1RvdGFsID0gdGhpcy5jb21wdXRlVG90YWxQcm9ncmVzcygpO1xuICAgIHRoaXMub25DYW5jZWwkLm5leHQoZmlsZUl0ZW0pXG4gIH1cblxuICAvKipcbiAgICogVXBsb2FkcyBhbGwgbm90IHVwbG9hZGVkIGl0ZW1zIG9mIHF1ZXVlXG4gICAqL1xuICB1cGxvYWRBbGwoZW5kcG9pbnQ6IFVwbG9hZEVuZFBvaW50LCBvcHRpb25zPzogYW55KSB7XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLnF1ZXVlLmZpbHRlcihpdGVtID0+IChpdGVtLmlzUmVhZHkpKTtcbiAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgaXRlbS51cGxvYWQoZW5kcG9pbnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGxvYWRzIGFsbCBub3QgdXBsb2FkZWQgaXRlbXMgb2YgcXVldWVcbiAgICovXG4gIGNhbmNlbEFsbCgpIHtcbiAgICBjb25zdCBpdGVtczogRmlsZUl0ZW1bXSA9IHRoaXMucXVldWUuZmlsdGVyKGl0ZW0gPT4gKGl0ZW0udXBsb2FkSW5Qcm9ncmVzcykpO1xuICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICBpdGVtLmNhbmNlbCgpO1xuICAgIH1cbiAgICB0aGlzLnByb2dyZXNzVG90YWwgPSB0aGlzLmNvbXB1dGVUb3RhbFByb2dyZXNzKCk7XG4gIH1cblxuICAvKipcbiAgICogVXBsb2FkcyBhbGwgbm90IHVwbG9hZGVkIGl0ZW1zIG9mIHF1ZXVlXG4gICAqL1xuICByZW1vdmVBbGxGcm9tUXVldWUoKSB7XG4gICAgY29uc3QgaXRlbXM6IEZpbGVJdGVtW10gPSB0aGlzLnF1ZXVlLmZpbHRlcihpdGVtID0+ICghaXRlbS51cGxvYWRJblByb2dyZXNzICYmICFpdGVtLmlzU3VjY2VzcykpO1xuICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICB0aGlzLnJlbW92ZUZyb21RdWV1ZShpdGVtKTtcbiAgICB9XG4gIH1cblxuICByZW1vdmVGcm9tUXVldWUoZmlsZUl0ZW06IEZpbGVJdGVtKSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnF1ZXVlLmluZGV4T2YoZmlsZUl0ZW0pO1xuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLnF1ZXVlW2luZGV4XTtcbiAgICBpZiAoaXRlbS51cGxvYWRJblByb2dyZXNzKSB7XG4gICAgICBpdGVtLmNhbmNlbCgpO1xuICAgIH1cbiAgICB0aGlzLnF1ZXVlLnNwbGljZShpbmRleCwgMSk7XG4gICAgdGhpcy5wcm9ncmVzc1RvdGFsID0gdGhpcy5jb21wdXRlVG90YWxQcm9ncmVzcygpO1xuICB9XG5cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdG90YWwgcHJvZ3Jlc3NcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFt2YWx1ZV1cbiAgICogQHJldHVybnMge051bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbXB1dGVUb3RhbFByb2dyZXNzKCk6IG51bWJlciB7XG4gICAgbGV0IHRvdGFsQ3VycmVudCA9IDA7XG4gICAgbGV0IHRvdGFsID0gMDtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5xdWV1ZSkge1xuICAgICAgaWYgKGl0ZW0udXBsb2FkSW5Qcm9ncmVzcyB8fCBpdGVtLmlzU3VjY2Vzcykge1xuICAgICAgICB0b3RhbEN1cnJlbnQgKz0gKGl0ZW0uZmlsZS5zaXplIC8gMTAwKSAqIGl0ZW0ucHJvZ3Jlc3MgfHwgMDtcbiAgICAgICAgdG90YWwgKz0gaXRlbS5maWxlLnNpemU7XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKHRvdGFsQ3VycmVudCArICcgLyAnICsgdG90YWwpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gTWF0aC5yb3VuZCgodG90YWxDdXJyZW50ICogMTAwKSAvIHRvdGFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwYXJlcyBmaWxlIHN0YXR1cyBiZWZvcmUgdXBsb2FkXG4gICAqIEBwYXJhbSBpdGVtXG4gICAqL1xuICBwcm90ZWN0ZWQgb25CZWZvcmVVcGxvYWRJdGVtKGl0ZW06IEZpbGVJdGVtKSB7XG4gICAgdGhpcy5sb2dnZXIuaW5mbygnZW50ZXIgdXBsb2FkU2VydmljZS7JtW9uQmVmb3JlVXBsb2FkSXRlbSgpJyk7XG4gICAgaXRlbS7JtW9uQmVmb3JlVXBsb2FkSXRlbSgpO1xuICAgIHRoaXMub25CZWZvcmVVcGxvYWRJdGVtJC5uZXh0KGl0ZW0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBzdGF0dXMgZHVyaW5nIHVwbG9hZCBwcm9ncmVzc1xuICAgKiBAcGFyYW0gaXRlbVxuICAgKiBAcGFyYW0gcHJvZ3Jlc3NcbiAgICovXG4gIHByb3RlY3RlZCBvblByb2dyZXNzSXRlbShpdGVtOiBGaWxlSXRlbSwgcHJvZ3Jlc3M6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMubG9nZ2VyLmluZm8oYGNhbGwgb25Qcm9ncmVzc0l0ZW0gJHtpdGVtfSAke3Byb2dyZXNzfWApO1xuICAgIHRoaXMucHJvZ3Jlc3NUb3RhbCA9IHRoaXMuY29tcHV0ZVRvdGFsUHJvZ3Jlc3MoKTtcbiAgICBpdGVtLsm1b25Qcm9ncmVzcyhwcm9ncmVzcyk7XG4gICAgdGhpcy5vblByb2dyZXNzJC5uZXh0KHtpdGVtLCBwcm9ncmVzc30pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIGFuIHVwbG9hZCBlcnJvciBvY2N1cnNcbiAgICogQHBhcmFtIGl0ZW1cbiAgICogQHBhcmFtIHhoclxuICAgKi9cbiAgcHJvdGVjdGVkIG9uRXJyb3IoaXRlbTogRmlsZUl0ZW0sIGJvZHk6IGFueSwgc3RhdHVzOiBudW1iZXIsIGhlYWRlcnM6IGFueSkge1xuICAgIHRoaXMubG9nZ2VyLmluZm8oYGNhbGwgb25FcnJvciAke2l0ZW19ICR7Ym9keX0gJHtzdGF0dXN9ICR7aGVhZGVyc31gKTtcbiAgICBpdGVtLsm1b25FcnJvcigpO1xuICAgIHRoaXMub25FcnJvciQubmV4dCh7aXRlbSwgYm9keSwgc3RhdHVzLCBoZWFkZXJzfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gYW4gdXBsb2FkIHN1Y2Nlc3Mgb2NjdXJzXG4gICAqIEBwYXJhbSBpdGVtXG4gICAqIEBwYXJhbSB4aHJcbiAgICovXG4gIHByb3RlY3RlZCBvblN1Y2Nlc3MoaXRlbTogRmlsZUl0ZW0sIGJvZHk6IGFueSwgc3RhdHVzOiBudW1iZXIsIGhlYWRlcnM6IGFueSkgeyAvLyBUT0RPIGhlYWRlcnMgaXMgbm90IGFueVxuICAgIHRoaXMubG9nZ2VyLmluZm8oYGNhbGwgb25TdWNjZXNzICR7aXRlbX0gJHtib2R5fSAke3N0YXR1c30gJHtoZWFkZXJzfWApO1xuICAgIHRoaXMucHJvZ3Jlc3NUb3RhbCA9IHRoaXMuY29tcHV0ZVRvdGFsUHJvZ3Jlc3MoKTtcbiAgICBpdGVtLsm1b25TdWNjZXNzKCk7XG4gICAgdGhpcy5vblN1Y2Nlc3MkLm5leHQoe2l0ZW0sIGJvZHksIHN0YXR1cywgaGVhZGVyc30pO1xuICB9XG5cblxufVxuXG4iXX0=