export class FileItem {
    constructor(file, uploadService, logger, disableMultipart) {
        this.file = file;
        this.uploadService = uploadService;
        this.logger = logger;
        this.disableMultipart = disableMultipart;
        this.isReady = true;
        this.progress = 0;
        this.formData = new FormData();
        this.alias = 'file';
    }
    upload(endpoint, options) {
        if (endpoint) {
            this.uploadService.uploadFileItem(this, endpoint, options);
        }
        else {
            this.logger.error('You must define a UploadEndPoint object.');
        }
    }
    cancel() {
        this.logger.debug('upload cancel');
        if (this.uploadInProgress) {
            this.ɵonCancel();
            this.uploadService.cancelFileItem(this);
        }
    }
    remove() {
        this.logger.debug('upload remove');
        this.uploadService.removeFromQueue(this);
    }
    ɵonBeforeUploadItem() {
        this.isReady = true;
        this.uploadInProgress = false;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = false;
        this.progress = 0;
    }
    ɵonProgress(progress) {
        this.isReady = false;
        this.progress = progress;
    }
    ɵonSuccess() {
        this.isReady = false;
        this.uploadInProgress = false;
        this.isSuccess = true;
        this.isCancel = false;
        this.isError = false;
        this.progress = 100;
    }
    ɵonError() {
        this.isReady = false;
        this.uploadInProgress = false;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = true;
        this.progress = 0;
    }
    ɵonCancel() {
        this.isReady = true;
        this.uploadInProgress = false;
        this.isSuccess = false;
        this.isCancel = true;
        this.isError = false;
        this.progress = 0;
        this.sub.unsubscribe();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZUl0ZW0ubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ad2tvemEvbmd4LXVwbG9hZC8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2ZpbGVJdGVtLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE1BQU0sT0FBTyxRQUFRO0lBZWpCLFlBQW1CLElBQVUsRUFBVSxhQUFzQyxFQUFZLE1BQXVCLEVBQzdGLGdCQUFnQjtRQURoQixTQUFJLEdBQUosSUFBSSxDQUFNO1FBQVUsa0JBQWEsR0FBYixhQUFhLENBQXlCO1FBQVksV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFDN0YscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFBO1FBYm5DLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFJZixhQUFRLEdBQUcsQ0FBQyxDQUFDO1FBRWIsYUFBUSxHQUFhLElBQUksUUFBUSxFQUFFLENBQUM7UUFFcEMsVUFBSyxHQUFHLE1BQU0sQ0FBQztJQUt3QixDQUFDO0lBRXhDLE1BQU0sQ0FBQyxRQUF3QixFQUFFLE9BQWE7UUFDMUMsSUFBSSxRQUFRLEVBQUU7WUFDVixJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQzlEO2FBQU07WUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1NBQ2pFO0lBQ0wsQ0FBQztJQUVELE1BQU07UUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNuQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN2QixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDakIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0M7SUFDTCxDQUFDO0lBRUQsTUFBTTtRQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxtQkFBbUI7UUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQzlCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxXQUFXLENBQUMsUUFBZ0I7UUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDN0IsQ0FBQztJQUVELFVBQVU7UUFDTixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQzlCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxRQUFRO1FBQ0osSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztRQUM5QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsU0FBUztRQUNMLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMzQixDQUFDO0NBR0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ3hVcGxvYWRMb2dnZXIgfSBmcm9tICcuLi91dGlscy9sb2dnZXIubW9kZWwnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBVcGxvYWRFbmRQb2ludCB9IGZyb20gJy4uL3V0aWxzL2NvbmZpZ3VyYXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgSHR0cENsaWVudFVwbG9hZFNlcnZpY2UgfSBmcm9tICcuL2h0dHBDbGllbnRVcGxvYWQuc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBGaWxlSXRlbSB7XG5cbiAgICB1cGxvYWRJblByb2dyZXNzOiBib29sZWFuO1xuICAgIGlzUmVhZHkgPSB0cnVlO1xuICAgIGlzU3VjY2VzczogYm9vbGVhbjtcbiAgICBpc0NhbmNlbDogYm9vbGVhbjtcbiAgICBpc0Vycm9yOiBib29sZWFuO1xuICAgIHByb2dyZXNzID0gMDtcblxuICAgIGZvcm1EYXRhOiBGb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuXG4gICAgYWxpYXMgPSAnZmlsZSc7XG5cbiAgICBzdWI6IFN1YnNjcmlwdGlvbjtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBmaWxlOiBGaWxlLCBwcml2YXRlIHVwbG9hZFNlcnZpY2U6IEh0dHBDbGllbnRVcGxvYWRTZXJ2aWNlLCBwcm90ZWN0ZWQgbG9nZ2VyOiBOZ3hVcGxvYWRMb2dnZXIsXG4gICAgICAgICAgICAgICAgcHVibGljIGRpc2FibGVNdWx0aXBhcnQpIHsgfVxuXG4gICAgdXBsb2FkKGVuZHBvaW50OiBVcGxvYWRFbmRQb2ludCwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICBpZiAoZW5kcG9pbnQpIHtcbiAgICAgICAgICAgIHRoaXMudXBsb2FkU2VydmljZS51cGxvYWRGaWxlSXRlbSh0aGlzLCBlbmRwb2ludCwgb3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcignWW91IG11c3QgZGVmaW5lIGEgVXBsb2FkRW5kUG9pbnQgb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2FuY2VsKCkge1xuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZygndXBsb2FkIGNhbmNlbCcpO1xuICAgICAgICBpZiAodGhpcy51cGxvYWRJblByb2dyZXNzKSB7XG4gICAgICAgICAgICB0aGlzLsm1b25DYW5jZWwoKTtcbiAgICAgICAgICAgIHRoaXMudXBsb2FkU2VydmljZS5jYW5jZWxGaWxlSXRlbSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZSgpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoJ3VwbG9hZCByZW1vdmUnKTtcbiAgICAgICAgdGhpcy51cGxvYWRTZXJ2aWNlLnJlbW92ZUZyb21RdWV1ZSh0aGlzKTtcbiAgICB9XG5cbiAgICDJtW9uQmVmb3JlVXBsb2FkSXRlbSgpIHtcbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy51cGxvYWRJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNTdWNjZXNzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNDYW5jZWwgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0Vycm9yID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuICAgIH1cblxuICAgIMm1b25Qcm9ncmVzcyhwcm9ncmVzczogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuaXNSZWFkeSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByb2dyZXNzID0gcHJvZ3Jlc3M7XG4gICAgfVxuXG4gICAgybVvblN1Y2Nlc3MoKSB7XG4gICAgICAgIHRoaXMuaXNSZWFkeSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnVwbG9hZEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1N1Y2Nlc3MgPSB0cnVlO1xuICAgICAgICB0aGlzLmlzQ2FuY2VsID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNFcnJvciA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByb2dyZXNzID0gMTAwO1xuICAgIH1cblxuICAgIMm1b25FcnJvcigpIHtcbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMudXBsb2FkSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzU3VjY2VzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzQ2FuY2VsID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNFcnJvciA9IHRydWU7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuICAgIH1cblxuICAgIMm1b25DYW5jZWwoKSB7XG4gICAgICAgIHRoaXMuaXNSZWFkeSA9IHRydWU7XG4gICAgICAgIHRoaXMudXBsb2FkSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzU3VjY2VzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzQ2FuY2VsID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pc0Vycm9yID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuICAgICAgICB0aGlzLnN1Yi51bnN1YnNjcmliZSgpO1xuICAgIH1cblxuXG59XG4iXX0=