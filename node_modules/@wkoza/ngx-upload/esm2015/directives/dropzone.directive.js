import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Renderer2, Inject, Injector, Optional, PLATFORM_ID } from '@angular/core';
import { FormGroupDirective, NgForm } from '@angular/forms';
import { NGX_DROP_TARGET_OPTIONS } from '../utils/configuration.model';
import { NgxUploadLogger } from '../utils/logger.model';
import { HttpClientUploadService } from '../services/httpClientUpload.service';
import { isPlatformBrowser } from '@angular/common';
/**
 * Transforms a node into a drag and drop zone.
 */
let NgxDragAndDropDirective = class NgxDragAndDropDirective {
    constructor(el, renderer, injector, logger, uploader, dropOptions, ngForm, formGroupDirective, platformId) {
        this.el = el;
        this.renderer = renderer;
        this.injector = injector;
        this.logger = logger;
        this.uploader = uploader;
        this.dropOptions = dropOptions;
        this.ngForm = ngForm;
        this.formGroupDirective = formGroupDirective;
        if (this.ngForm) {
            this.formGroup = ngForm.form;
        }
        else if (this.formGroupDirective) {
            this.formGroup = formGroupDirective.form;
        }
        else {
            this.formGroup = null;
        }
        if (isPlatformBrowser(platformId)) {
            this.renderer.listen(el.nativeElement, 'dragleave', ($event) => this.onDragLeave($event));
            this.renderer.listen(el.nativeElement, 'drop', ($event) => this.dropEvent($event));
            this.renderer.listen(el.nativeElement, 'dragover', ($event) => this.onDragOver($event));
        }
    }
    set ngxDragAndDrop(dropOptions) {
        if (dropOptions) {
            this.logger.debug(JSON.stringify(dropOptions));
            this.dropOptions = dropOptions;
        }
    }
    ngOnInit() {
        this.renderer.addClass(this.el.nativeElement, this.dropOptions.color);
    }
    onDragLeave(event) {
        this.logger.debug('dragleave event');
        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.colorDrag);
        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.colorDrop);
        this.renderer.addClass(this.el.nativeElement, this.dropOptions.color);
        this.stopAndPrevent(event);
    }
    dropEvent(event) {
        this.logger.debug('drop event');
        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.color);
        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.colorDrag);
        this.renderer.addClass(this.el.nativeElement, this.dropOptions.colorDrop);
        const transfer = this.getTransfer(event);
        if (!transfer) {
            return;
        }
        transfer.dropEffect = 'copy';
        this.stopAndPrevent(event);
        this.uploader.addToQueue(transfer.files, this.formGroup, this.dropOptions);
    }
    onDragOver(event) {
        this.logger.debug('dragover event');
        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.color);
        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.colorDrop);
        this.renderer.addClass(this.el.nativeElement, this.dropOptions.colorDrag);
        const transfer = this.getTransfer(event);
        if (!this.haveFiles(transfer.types)) {
            return;
        }
        this.stopAndPrevent(event);
    }
    stopAndPrevent(event) {
        event.stopPropagation();
        event.preventDefault();
    }
    getTransfer(event) {
        return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer;
    }
    haveFiles(types) {
        if (!types) {
            return false;
        }
        if (types.indexOf) {
            return types.indexOf('Files') !== -1;
        }
        else if (types.contains) {
            return types.contains('Files');
        }
        else {
            return false;
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], NgxDragAndDropDirective.prototype, "ngxDragAndDrop", null);
NgxDragAndDropDirective = tslib_1.__decorate([
    Directive({
        selector: '[ngxDragAndDrop]',
        exportAs: 'ngxDragAndDrop'
    }),
    tslib_1.__param(5, Inject(NGX_DROP_TARGET_OPTIONS)),
    tslib_1.__param(6, Optional()), tslib_1.__param(7, Optional()),
    tslib_1.__param(8, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        Renderer2,
        Injector,
        NgxUploadLogger,
        HttpClientUploadService, Object, NgForm, FormGroupDirective,
        Object])
], NgxDragAndDropDirective);
export { NgxDragAndDropDirective };
//# sourceMappingURL=data:application/json;base64,