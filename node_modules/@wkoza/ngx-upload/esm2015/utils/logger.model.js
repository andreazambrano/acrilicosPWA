/**
 * Simple service for logging the module.
 */
export class NgxUploadLogger {
}
const noop = () => undefined;
const ɵ0 = noop;
/**
 * Default implementation of Logger that safely writes the message into the console.
 *
 */
export class ConsoleLogger {
    constructor(_console, _debugEnabled = true) {
        this._console = _console;
        this._debugEnabled = _debugEnabled;
    }
    log(...args) { this._invokeConsoleMethod('log', args); }
    info(...args) { this._invokeConsoleMethod('info', args); }
    warn(...args) { this._invokeConsoleMethod('warn', args); }
    error(...args) { this._invokeConsoleMethod('error', args); }
    debug(...args) {
        if (this._debugEnabled) {
            this._invokeConsoleMethod('debug', args);
        }
    }
    _invokeConsoleMethod(type, args) {
        let logFn = this._console[type] || this._console.log || noop;
        // console methods in IE9 don't have 'apply' method, polyfill it
        if (!logFn.apply) {
            logFn = Function.prototype.bind.call(logFn, this._console);
        }
        logFn.apply(this._console, args);
    }
}
/**
 * No op implementation of Logger.
 *
 */
export class NoOpLogger {
    log() { }
    info() { }
    warn() { }
    error() { }
    debug() { }
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHdrb3phL25neC11cGxvYWQvIiwic291cmNlcyI6WyJ1dGlscy9sb2dnZXIubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7O0dBRUc7QUFDSCxNQUFNLE9BQWdCLGVBQWU7Q0FnQnBDO0FBRUQsTUFBTSxJQUFJLEdBQUcsR0FBUSxFQUFFLENBQUMsU0FBUyxDQUFDOztBQUVsQzs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sYUFBYTtJQUN0QixZQUFvQixRQUFpQixFQUFVLGdCQUFnQixJQUFJO1FBQS9DLGFBQVEsR0FBUixRQUFRLENBQVM7UUFBVSxrQkFBYSxHQUFiLGFBQWEsQ0FBTztJQUFHLENBQUM7SUFFdkUsR0FBRyxDQUFDLEdBQUcsSUFBVyxJQUFVLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXJFLElBQUksQ0FBQyxHQUFHLElBQVcsSUFBVSxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV2RSxJQUFJLENBQUMsR0FBRyxJQUFXLElBQVUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdkUsS0FBSyxDQUFDLEdBQUcsSUFBVyxJQUFVLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXpFLEtBQUssQ0FBQyxHQUFHLElBQVc7UUFDaEIsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztTQUFFO0lBQ3pFLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxJQUFZLEVBQUUsSUFBWTtRQUNuRCxJQUFJLEtBQUssR0FBbUIsSUFBSSxDQUFDLFFBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUM7UUFFOUUsZ0VBQWdFO1FBQ2hFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQ2QsS0FBSyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzlEO1FBRUQsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Q0FDSjtBQUVEOzs7R0FHRztBQUNILE1BQU0sT0FBTyxVQUFVO0lBQ25CLEdBQUcsS0FBVSxDQUFDO0lBRWQsSUFBSSxLQUFVLENBQUM7SUFFZixJQUFJLEtBQVUsQ0FBQztJQUVmLEtBQUssS0FBVSxDQUFDO0lBRWhCLEtBQUssS0FBVSxDQUFDO0NBRW5CIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIFNpbXBsZSBzZXJ2aWNlIGZvciBsb2dnaW5nIHRoZSBtb2R1bGUuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOZ3hVcGxvYWRMb2dnZXIge1xuICAgIC8qKiBXcml0ZSBhIGxvZyBtZXNzYWdlLiAqL1xuICAgIGFic3RyYWN0IGxvZyguLi5hcmdzOiBhbnlbXSk6IHZvaWQ7XG5cbiAgICAvKiogV3JpdGUgYW4gaW5mb3JtYXRpb24gbWVzc2FnZS4gKi9cbiAgICBhYnN0cmFjdCBpbmZvKC4uLmFyZ3M6IGFueVtdKTogdm9pZDtcblxuICAgIC8qKiBXcml0ZSBhIHdhcm5pbmcgbWVzc2FnZS4gKi9cbiAgICBhYnN0cmFjdCB3YXJuKC4uLmFyZ3M6IGFueVtdKTogdm9pZDtcblxuICAgIC8qKiBXcml0ZSBhbiBlcnJvciBtZXNzYWdlLiAqL1xuICAgIGFic3RyYWN0IGVycm9yKC4uLmFyZ3M6IGFueVtdKTogdm9pZDtcblxuICAgIC8qKiBXcml0ZSBhIGRlYnVnIG1lc3NhZ2UuICovXG4gICAgYWJzdHJhY3QgZGVidWcoLi4uYXJnczogYW55W10pOiB2b2lkO1xuXG59XG5cbmNvbnN0IG5vb3AgPSAoKTogYW55ID0+IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIExvZ2dlciB0aGF0IHNhZmVseSB3cml0ZXMgdGhlIG1lc3NhZ2UgaW50byB0aGUgY29uc29sZS5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBDb25zb2xlTG9nZ2VyIGltcGxlbWVudHMgTmd4VXBsb2FkTG9nZ2VyIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jb25zb2xlOiBDb25zb2xlLCBwcml2YXRlIF9kZWJ1Z0VuYWJsZWQgPSB0cnVlKSB7fVxuXG4gICAgbG9nKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7IHRoaXMuX2ludm9rZUNvbnNvbGVNZXRob2QoJ2xvZycsIGFyZ3MpOyB9XG5cbiAgICBpbmZvKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7IHRoaXMuX2ludm9rZUNvbnNvbGVNZXRob2QoJ2luZm8nLCBhcmdzKTsgfVxuXG4gICAgd2FybiguLi5hcmdzOiBhbnlbXSk6IHZvaWQgeyB0aGlzLl9pbnZva2VDb25zb2xlTWV0aG9kKCd3YXJuJywgYXJncyk7IH1cblxuICAgIGVycm9yKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7IHRoaXMuX2ludm9rZUNvbnNvbGVNZXRob2QoJ2Vycm9yJywgYXJncyk7IH1cblxuICAgIGRlYnVnKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLl9kZWJ1Z0VuYWJsZWQpIHsgdGhpcy5faW52b2tlQ29uc29sZU1ldGhvZCgnZGVidWcnLCBhcmdzKTsgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX2ludm9rZUNvbnNvbGVNZXRob2QodHlwZTogc3RyaW5nLCBhcmdzPzogYW55W10pOiB2b2lkIHtcbiAgICAgICAgbGV0IGxvZ0ZuOiBGdW5jdGlvbiA9ICg8YW55PnRoaXMuX2NvbnNvbGUpW3R5cGVdIHx8IHRoaXMuX2NvbnNvbGUubG9nIHx8IG5vb3A7XG5cbiAgICAgICAgLy8gY29uc29sZSBtZXRob2RzIGluIElFOSBkb24ndCBoYXZlICdhcHBseScgbWV0aG9kLCBwb2x5ZmlsbCBpdFxuICAgICAgICBpZiAoIWxvZ0ZuLmFwcGx5KSB7XG4gICAgICAgICAgICBsb2dGbiA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwobG9nRm4sIHRoaXMuX2NvbnNvbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbG9nRm4uYXBwbHkodGhpcy5fY29uc29sZSwgYXJncyk7XG4gICAgfVxufVxuXG4vKipcbiAqIE5vIG9wIGltcGxlbWVudGF0aW9uIG9mIExvZ2dlci5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBOb09wTG9nZ2VyIGltcGxlbWVudHMgTmd4VXBsb2FkTG9nZ2VyIHtcbiAgICBsb2coKTogdm9pZCB7fVxuXG4gICAgaW5mbygpOiB2b2lkIHt9XG5cbiAgICB3YXJuKCk6IHZvaWQge31cblxuICAgIGVycm9yKCk6IHZvaWQge31cblxuICAgIGRlYnVnKCk6IHZvaWQge31cblxufVxuIl19