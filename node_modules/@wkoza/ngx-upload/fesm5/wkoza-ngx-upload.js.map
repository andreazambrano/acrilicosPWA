{"version":3,"file":"wkoza-ngx-upload.js","sources":["ng://@wkoza/ngx-upload/services/fileItem.model.ts","ng://@wkoza/ngx-upload/utils/logger.model.ts","ng://@wkoza/ngx-upload/services/httpClientUpload.service.ts","ng://@wkoza/ngx-upload/utils/configuration.model.ts","ng://@wkoza/ngx-upload/directives/dropzone.directive.ts","ng://@wkoza/ngx-upload/directives/thumbnail.directive.ts","ng://@wkoza/ngx-upload/components/inputfile.component.ts","ng://@wkoza/ngx-upload/directives/inputfile.directive.ts","ng://@wkoza/ngx-upload/ngx-upload.module.ts"],"sourcesContent":["import { NgxUploadLogger } from '../utils/logger.model';\nimport { Subscription } from 'rxjs';\nimport { UploadEndPoint } from '../utils/configuration.model';\nimport { HttpClientUploadService } from './httpClientUpload.service';\n\nexport class FileItem {\n\n    uploadInProgress: boolean;\n    isReady = true;\n    isSuccess: boolean;\n    isCancel: boolean;\n    isError: boolean;\n    progress = 0;\n\n    formData: FormData = new FormData();\n\n    alias = 'file';\n\n    sub: Subscription;\n\n    constructor(public file: File, private uploadService: HttpClientUploadService, protected logger: NgxUploadLogger,\n                public disableMultipart) { }\n\n    upload(endpoint: UploadEndPoint, options?: any) {\n        if (endpoint) {\n            this.uploadService.uploadFileItem(this, endpoint, options);\n        } else {\n            this.logger.error('You must define a UploadEndPoint object.');\n        }\n    }\n\n    cancel() {\n        this.logger.debug('upload cancel');\n        if (this.uploadInProgress) {\n            this.ÉµonCancel();\n            this.uploadService.cancelFileItem(this);\n        }\n    }\n\n    remove() {\n        this.logger.debug('upload remove');\n        this.uploadService.removeFromQueue(this);\n    }\n\n    ÉµonBeforeUploadItem() {\n        this.isReady = true;\n        this.uploadInProgress = false;\n        this.isSuccess = false;\n        this.isCancel = false;\n        this.isError = false;\n        this.progress = 0;\n    }\n\n    ÉµonProgress(progress: number) {\n        this.isReady = false;\n        this.progress = progress;\n    }\n\n    ÉµonSuccess() {\n        this.isReady = false;\n        this.uploadInProgress = false;\n        this.isSuccess = true;\n        this.isCancel = false;\n        this.isError = false;\n        this.progress = 100;\n    }\n\n    ÉµonError() {\n        this.isReady = false;\n        this.uploadInProgress = false;\n        this.isSuccess = false;\n        this.isCancel = false;\n        this.isError = true;\n        this.progress = 0;\n    }\n\n    ÉµonCancel() {\n        this.isReady = true;\n        this.uploadInProgress = false;\n        this.isSuccess = false;\n        this.isCancel = true;\n        this.isError = false;\n        this.progress = 0;\n        this.sub.unsubscribe();\n    }\n\n\n}\n","\n/**\n * Simple service for logging the module.\n */\nexport abstract class NgxUploadLogger {\n    /** Write a log message. */\n    abstract log(...args: any[]): void;\n\n    /** Write an information message. */\n    abstract info(...args: any[]): void;\n\n    /** Write a warning message. */\n    abstract warn(...args: any[]): void;\n\n    /** Write an error message. */\n    abstract error(...args: any[]): void;\n\n    /** Write a debug message. */\n    abstract debug(...args: any[]): void;\n\n}\n\nconst noop = (): any => undefined;\n\n/**\n * Default implementation of Logger that safely writes the message into the console.\n *\n */\nexport class ConsoleLogger implements NgxUploadLogger {\n    constructor(private _console: Console, private _debugEnabled = true) {}\n\n    log(...args: any[]): void { this._invokeConsoleMethod('log', args); }\n\n    info(...args: any[]): void { this._invokeConsoleMethod('info', args); }\n\n    warn(...args: any[]): void { this._invokeConsoleMethod('warn', args); }\n\n    error(...args: any[]): void { this._invokeConsoleMethod('error', args); }\n\n    debug(...args: any[]): void {\n        if (this._debugEnabled) { this._invokeConsoleMethod('debug', args); }\n    }\n\n    private _invokeConsoleMethod(type: string, args?: any[]): void {\n        let logFn: Function = (<any>this._console)[type] || this._console.log || noop;\n\n        // console methods in IE9 don't have 'apply' method, polyfill it\n        if (!logFn.apply) {\n            logFn = Function.prototype.bind.call(logFn, this._console);\n        }\n\n        logFn.apply(this._console, args);\n    }\n}\n\n/**\n * No op implementation of Logger.\n *\n */\nexport class NoOpLogger implements NgxUploadLogger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n\n}\n","import { FormGroup } from '@angular/forms';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n  HttpClient,\n  HttpErrorResponse,\n  HttpEventType,\n  HttpHeaders,\n  HttpParams,\n  HttpRequest,\n  HttpResponse\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { FileItem } from './fileItem.model';\nimport { NgxUploadLogger } from '../utils/logger.model';\nimport { DropTargetOptions, InputFileOptions, UploadEndPoint } from '../utils/configuration.model';\n\n\n// send an event for each upload event. These events can be catched by the user for call a callback\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpClientUploadService {\n\n  queue: FileItem[];\n  progressTotal = 0;\n  withCredentials: boolean;\n\n  sub: Subscription;\n\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  protected headers: Map<string, string[]>;\n\n  public onCancel$ = new Subject<FileItem>();\n  public onError$ = new Subject<{ item: FileItem, body: any, status: number, headers: any }>();\n  public onDropError$ = new Subject<{ item?: File, errorAccept: boolean, errorMultiple: boolean }>();\n  public onSuccess$ = new Subject<{ item: FileItem, body: any, status: number, headers: any }>(); // TODO headers isn't `any` but `Array`\n  public onBeforeUploadItem$ = new Subject<FileItem>();\n  public onProgress$ = new Subject<{ item: FileItem, progress: number }>();\n  public onAddToQueue$ = new Subject<FileItem>();\n\n  constructor(protected logger: NgxUploadLogger, private httpClient: HttpClient) {\n    this.queue = new Array<FileItem>();\n    this.headers = new Map();\n  }\n\n  /**\n   * Adds files to the queue\n   */\n  addToQueue(files: FileList, formGroup: FormGroup | null, options: DropTargetOptions | InputFileOptions) {\n\n    this.logger.info('add to queue');\n\n    if (options && !options.multiple) {\n      if (files.length > 1) {\n        this.logger.error('there is more than one file.');\n        this.onDropError$.next({errorAccept: false, errorMultiple: true});\n        return;\n      }\n    }\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files.item(i)!;\n      this.logger.debug(files.item(i));\n\n      if (options && options.accept) {\n        const accepted = options.accept.some((type: string) => {\n          if (type.indexOf('/*') > -1) {\n            return type.split('/')[0] === file.type.split('/')[0]\n          } else {\n            return (type === '*' || type === file.type)\n          }\n        });\n        if (!accepted) {\n          this.logger.error('this file is not accepted because of its type', file);\n          this.onDropError$.next({item: file, errorAccept: true, errorMultiple: false});\n          continue\n        }\n      }\n\n      let fileItem;\n      if (options && options.disableMultipart) {\n        fileItem = new FileItem(file, this, this.logger, true);\n      } else {\n        fileItem = new FileItem(file, this, this.logger, false);\n        if (formGroup) {\n          Object.keys(formGroup.controls).forEach((key) => {\n            fileItem.formData.append(key, formGroup.get(key) !.value);\n          });\n        }\n      }\n      this.queue.push(fileItem);\n      this.onAddToQueue$.next(fileItem);\n    }\n  }\n\n  uploadFileItem(fileItem: FileItem, endpoint: UploadEndPoint, options: {\n    headers?: HttpHeaders;\n    reportProgress?: boolean;\n    params?: HttpParams;\n    responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n    withCredentials?: boolean;\n  } = {}): void {\n    this.logger.info('enter uploadService.uploadFileItem()');\n\n    const method = endpoint.method as string;\n    const url = endpoint.url as string;\n\n    const index = this.queue.indexOf(fileItem);\n    const item = this.queue[index];\n\n    this.onBeforeUploadItem(item);\n\n    if (item.isCancel) {\n      return\n    }\n\n    item.uploadInProgress = true;\n\n    let sendable;\n\n    if (!fileItem.disableMultipart) {\n      sendable = item.formData;\n      sendable.append(item.alias, item.file, item.file.name);\n    } else {\n      sendable = item.file;\n    }\n\n    const req = new HttpRequest(method, url, sendable, Object.assign(options, {reportProgress: true}));\n\n    fileItem.sub = this.httpClient.request(req).subscribe(\n      (event) => {\n        if (event.type === HttpEventType.UploadProgress) {\n          // This is an upload progress event. Compute and show the % done:\n          const percentDone = Math.round(event.loaded * 100 / (event.total ? event.total : event.loaded));\n          this.logger.debug(`File is ${percentDone}% uploaded.`);\n          fileItem.ÉµonProgress(percentDone);\n          this.onProgressItem(item, percentDone);\n\n        } else if (event instanceof HttpResponse) {\n          // A successful response is delivered on the event stream.\n          fileItem.ÉµonSuccess();\n          this.onSuccess(item, event.body, event.status, event.headers);\n        }\n      },\n      (err) => {\n        if (err instanceof HttpErrorResponse) {\n          if (url === 'ngx_upload_mock') {\n            item.ÉµonSuccess();\n            this.onSuccess(item, err.message, err.status, err.headers);\n          } else if (err.error instanceof Error) {\n            // A client-side or network error occurred. Handle it accordingly.\n            item.ÉµonError();\n            this.onError(item, err.error.message, err.status, err.headers);\n          } else {\n            // The backend returned an unsuccessful response code.\n            // The response body may contain clues as to what went wrong,\n            item.ÉµonError();\n            this.onError(item, err.error, err.status, err.headers);\n          }\n        }\n      }\n    );\n  }\n\n  cancelFileItem(fileItem: FileItem) {\n    this.progressTotal = this.computeTotalProgress();\n    this.onCancel$.next(fileItem)\n  }\n\n  /**\n   * Uploads all not uploaded items of queue\n   */\n  uploadAll(endpoint: UploadEndPoint, options?: any) {\n    const items = this.queue.filter(item => (item.isReady));\n    if (!items.length) {\n      return;\n    }\n\n    for (const item of items) {\n      item.upload(endpoint, options);\n    }\n  }\n\n  /**\n   * Uploads all not uploaded items of queue\n   */\n  cancelAll() {\n    const items: FileItem[] = this.queue.filter(item => (item.uploadInProgress));\n    if (!items.length) {\n      return;\n    }\n\n    for (const item of items) {\n      item.cancel();\n    }\n    this.progressTotal = this.computeTotalProgress();\n  }\n\n  /**\n   * Uploads all not uploaded items of queue\n   */\n  removeAllFromQueue() {\n    const items: FileItem[] = this.queue.filter(item => (!item.uploadInProgress && !item.isSuccess));\n    if (!items.length) {\n      return;\n    }\n\n    for (const item of items) {\n      this.removeFromQueue(item);\n    }\n  }\n\n  removeFromQueue(fileItem: FileItem) {\n    const index = this.queue.indexOf(fileItem);\n    const item = this.queue[index];\n    if (item.uploadInProgress) {\n      item.cancel();\n    }\n    this.queue.splice(index, 1);\n    this.progressTotal = this.computeTotalProgress();\n  }\n\n\n  /**\n   * Returns the total progress\n   * @param {Number} [value]\n   * @returns {Number}\n   * @private\n   */\n  computeTotalProgress(): number {\n    let totalCurrent = 0;\n    let total = 0;\n    for (const item of this.queue) {\n      if (item.uploadInProgress || item.isSuccess) {\n        totalCurrent += (item.file.size / 100) * item.progress || 0;\n        total += item.file.size;\n        this.logger.debug(totalCurrent + ' / ' + total);\n      }\n    }\n    return Math.round((totalCurrent * 100) / total);\n  }\n\n  /**\n   * Prepares file status before upload\n   * @param item\n   */\n  protected onBeforeUploadItem(item: FileItem) {\n    this.logger.info('enter uploadService.ÉµonBeforeUploadItem()');\n    item.ÉµonBeforeUploadItem();\n    this.onBeforeUploadItem$.next(item);\n  }\n\n  /**\n   * Update status during upload progress\n   * @param item\n   * @param progress\n   */\n  protected onProgressItem(item: FileItem, progress: number): void {\n    this.logger.info(`call onProgressItem ${item} ${progress}`);\n    this.progressTotal = this.computeTotalProgress();\n    item.ÉµonProgress(progress);\n    this.onProgress$.next({item, progress});\n  }\n\n  /**\n   * Callback called when an upload error occurs\n   * @param item\n   * @param xhr\n   */\n  protected onError(item: FileItem, body: any, status: number, headers: any) {\n    this.logger.info(`call onError ${item} ${body} ${status} ${headers}`);\n    item.ÉµonError();\n    this.onError$.next({item, body, status, headers});\n  }\n\n  /**\n   * Callback called when an upload success occurs\n   * @param item\n   * @param xhr\n   */\n  protected onSuccess(item: FileItem, body: any, status: number, headers: any) { // TODO headers is not any\n    this.logger.info(`call onSuccess ${item} ${body} ${status} ${headers}`);\n    this.progressTotal = this.computeTotalProgress();\n    item.ÉµonSuccess();\n    this.onSuccess$.next({item, body, status, headers});\n  }\n\n\n}\n\n","import { InjectionToken } from '@angular/core';\nimport { MineTypeEnum } from './mimetype.model';\n\nexport type Method = 'POST' | 'GET';\n\nexport interface DropTargetOptions {\n  color: string;\n  colorDrag: string;\n  colorDrop: string;\n  accept?: MineTypeEnum[];\n  capture?: 'user' | 'environment';\n  multiple?: boolean;\n  disableMultipart?: boolean;\n}\n\nexport interface LoggerOptions {\n  enabled?: boolean;\n  debug?: boolean;\n}\n\nexport interface UploadEndPoint {\n  method?: Method;\n  url?: string;\n}\n\nexport interface InputFileOptions {\n  accept?: MineTypeEnum[];\n  capture?: 'user' | 'environment';\n  multiple?: boolean;\n  disableMultipart?: boolean;\n}\n\nexport const NGX_DROP_TARGET_OPTIONS = new InjectionToken<DropTargetOptions>('Ngx drop Zone Options');\nexport const NGX_LOGGER_OPTIONS = new InjectionToken<LoggerOptions>('Ngx Logger Options');\n\n\nexport const ngxDropTargetOptions: DropTargetOptions = {\n  color: '',\n  colorDrag: '',\n  colorDrop: '',\n  multiple: true,\n  disableMultipart: false\n};\n\nexport const ngxloggerOptions: LoggerOptions = {\n  enabled: false,\n  debug: true\n};\n\nexport const ngxInputFileOptions: InputFileOptions = {\n  multiple: true,\n  disableMultipart: false\n};\n","import {\n    Directive,\n    ElementRef,\n    HostListener,\n    Input,\n    OnInit,\n    Renderer2,\n    Inject, Injector, Optional, PLATFORM_ID\n} from '@angular/core';\nimport { FormGroup, FormGroupDirective, NgForm } from '@angular/forms';\nimport {\n    DropTargetOptions, NGX_DROP_TARGET_OPTIONS\n} from '../utils/configuration.model';\nimport { NgxUploadLogger } from '../utils/logger.model';\nimport { HttpClientUploadService } from '../services/httpClientUpload.service';\nimport {isPlatformBrowser} from '@angular/common';\n\n\n/**\n * Transforms a node into a drag and drop zone.\n */\n@Directive({\n    selector: '[ngxDragAndDrop]',\n    exportAs: 'ngxDragAndDrop'\n})\nexport class NgxDragAndDropDirective implements OnInit {\n\n    @Input()\n    set ngxDragAndDrop(dropOptions: DropTargetOptions) {\n        if (dropOptions) {\n            this.logger.debug(JSON.stringify(dropOptions));\n            this.dropOptions = dropOptions;\n        }\n    }\n\n    private readonly formGroup: FormGroup | null;\n\n    constructor(private el: ElementRef,\n                private renderer: Renderer2,\n                private injector: Injector,\n                private logger: NgxUploadLogger,\n                public uploader: HttpClientUploadService,\n                @Inject(NGX_DROP_TARGET_OPTIONS) private dropOptions: DropTargetOptions,\n                @Optional() private ngForm: NgForm, @Optional() private formGroupDirective: FormGroupDirective,\n                @Inject(PLATFORM_ID) platformId: Object) {\n        if (this.ngForm) {\n            this.formGroup = ngForm.form;\n        } else if (this.formGroupDirective) {\n            this.formGroup = formGroupDirective.form;\n        } else {\n            this.formGroup = null;\n        }\n        if (isPlatformBrowser(platformId)) {\n            this.renderer.listen(el.nativeElement, 'dragleave', ($event) => this.onDragLeave($event));\n            this.renderer.listen(el.nativeElement, 'drop', ($event) => this.dropEvent($event));\n            this.renderer.listen(el.nativeElement, 'dragover', ($event) => this.onDragOver($event));\n        }\n    }\n\n    ngOnInit(): void {\n        this.renderer.addClass(this.el.nativeElement, this.dropOptions.color);\n    }\n\n    onDragLeave(event) {\n        this.logger.debug('dragleave event');\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.colorDrag);\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.colorDrop);\n        this.renderer.addClass(this.el.nativeElement, this.dropOptions.color);\n        this.stopAndPrevent(event);\n    }\n\n    dropEvent(event) {\n        this.logger.debug('drop event');\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.color);\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.colorDrag);\n        this.renderer.addClass(this.el.nativeElement, this.dropOptions.colorDrop);\n        const transfer = this.getTransfer(event);\n        if (!transfer) {\n            return;\n        }\n        transfer.dropEffect = 'copy';\n        this.stopAndPrevent(event);\n        this.uploader.addToQueue(transfer.files, this.formGroup, this.dropOptions);\n    }\n\n\n    onDragOver(event) {\n        this.logger.debug('dragover event');\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.color);\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.colorDrop);\n        this.renderer.addClass(this.el.nativeElement, this.dropOptions.colorDrag);\n        const transfer = this.getTransfer(event);\n        if (!this.haveFiles(transfer.types)) {\n            return;\n        }\n        this.stopAndPrevent(event);\n    }\n\n    private stopAndPrevent(event): void {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    private getTransfer(event): DataTransfer {\n        return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer;\n    }\n\n    private haveFiles(types: any): boolean {\n        if (!types) {\n            return false;\n        }\n        if (types.indexOf) {\n            return types.indexOf('Files') !== -1;\n        } else if (types.contains) {\n            return types.contains('Files');\n        } else {\n            return false;\n        }\n    }\n\n}\n","import { Directive, ElementRef, Input, OnInit, Renderer2 } from '@angular/core';\nimport { FileItem } from '../services/fileItem.model';\n\n/**\n * Transforms a node into a thumbnail zone.\n */\n@Directive({\n    selector: '[ngxThumbnail]',\n    exportAs: 'ngxThumbnail'\n})\nexport class NgxThumbnailDirective implements OnInit {\n\n    @Input('ngxThumbnail') fileItem: FileItem;\n\n    constructor(private renderer: Renderer2, private el: ElementRef) { }\n\n    ngOnInit() {\n        // must be used only with image file\n        if (this.fileItem.file.type.indexOf('image/jpeg') !== 0 &&\n            this.fileItem.file.type.indexOf('image/png') !== 0) {\n            return\n        } else {\n\n            const imgEl = this.renderer.createElement('img');\n            this.renderer.appendChild(this.el.nativeElement, imgEl);\n            this.renderer.setStyle(imgEl, 'width', '100%');\n            this.renderer.setStyle(imgEl, 'height', '100%');\n\n            this._getOrientation(this.fileItem.file, (srcOrientation) => {\n\n                const img = new Image();\n                const reader = new FileReader();\n\n                reader.onload = (evt) => {\n\n                    img.onload = () => {\n                        const width = img.width,\n                            height = img.height,\n                            canvas = document.createElement('canvas'),\n                            ctx = canvas.getContext('2d')!;\n\n                        // set proper canvas dimensions before transform & export\n                        if (4 < srcOrientation && srcOrientation < 9) {\n                            canvas.width = height;\n                            canvas.height = width;\n                        } else {\n                            canvas.width = width;\n                            canvas.height = height;\n                        }\n\n                        // transform context before drawing image\n                        switch (srcOrientation) {\n                            case 2:\n                                ctx.transform(-1, 0, 0, 1, width, 0);\n                                break;\n                            case 3:\n                                ctx.transform(-1, 0, 0, -1, width, height);\n                                break;\n                            case 4:\n                                ctx.transform(1, 0, 0, -1, 0, height);\n                                break;\n                            case 5:\n                                ctx.transform(0, 1, 1, 0, 0, 0);\n                                break;\n                            case 6:\n                                ctx.transform(0, 1, -1, 0, height, 0);\n                                break;\n                            case 7:\n                                ctx.transform(0, -1, -1, 0, height, width);\n                                break;\n                            case 8:\n                                ctx.transform(0, -1, 1, 0, 0, width);\n                                break;\n                            default:\n                                break;\n                        }\n\n                        // draw image\n                        ctx.drawImage(img, 0, 0);\n\n                        this.renderer.setProperty(imgEl, 'src', canvas.toDataURL());\n                    };\n\n                    img.src = evt.target!['result'];\n                };\n                reader.readAsDataURL(this.fileItem.file);\n\n            });\n        }\n    }\n\n    /*\n    * getOrientation computes the real orientation of the image\n    *\n    */\n    _getOrientation(file, callback) {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n\n            const view = new DataView(event.target!['result']);\n\n            if (view.getUint16(0, false) !== 0xFFD8) return callback(-2);\n\n            const length = view.byteLength;\n            let offset = 2;\n\n            while (offset < length) {\n                const marker = view.getUint16(offset, false);\n                offset += 2;\n\n                if (marker === 0xFFE1) {\n                    if (view.getUint32(offset += 2, false) !== 0x45786966) {\n                        return callback(-1);\n                    }\n                    const little = view.getUint16(offset += 6, false) === 0x4949;\n                    offset += view.getUint32(offset + 4, little);\n                    const tags = view.getUint16(offset, little);\n                    offset += 2;\n\n                    for (let i = 0; i < tags; i++)\n                        if (view.getUint16(offset + (i * 12), little) === 0x0112)\n                            return callback(view.getUint16(offset + (i * 12) + 8, little));\n                } else if ((marker & 0xFF00) !== 0xFF00) break;\n                else offset += view.getUint16(offset, false);\n            }\n            return callback(-1);\n        };\n        reader.readAsArrayBuffer(file.slice(0, 64 * 1024));\n    };\n\n\n}\n","import { AfterViewInit, Component, Injector, Optional, Renderer2, ViewChild } from '@angular/core';\nimport { FormGroup, FormGroupDirective, NgForm } from '@angular/forms';\n\nimport { InputFileOptions } from '../utils/configuration.model';\nimport { HttpClientUploadService } from '../services/httpClientUpload.service';\n\n\n@Component({\n  selector: 'ngx-upload-inputfile',\n  template: `\n      <label class=\"input-file\">\n          <input type=\"file\" #file (change)=\"onFilesAdded()\">\n          <ng-content></ng-content>\n      </label>`,\n  styles: ['input[type=\"file\"] { display: none; } .input-file { width: 100%; }']\n})\nexport class InputfileComponent implements AfterViewInit {\n\n  @ViewChild('file', {static: true}) file;\n\n  files: Set<File> = new Set();\n\n  options: InputFileOptions;\n\n  private formGroup: FormGroup | null;\n\n\n  constructor(private injector: Injector, private uploader: HttpClientUploadService, private renderer: Renderer2,\n              @Optional() private ngForm: NgForm, @Optional() private formGroupDirective: FormGroupDirective) {\n    if (this.ngForm) {\n      this.formGroup = ngForm.form;\n    } else if (this.formGroupDirective) {\n      this.formGroup = formGroupDirective.form;\n    } else {\n      this.formGroup = null;\n    }\n  }\n\n  onFilesAdded() {\n    this.uploader.addToQueue(this.file.nativeElement.files, this.formGroup, this.options);\n    // Clear the previous input value\n    this.file.nativeElement.value = '';\n  }\n\n  ngAfterViewInit() {\n    if (this.options.multiple !== false) this.renderer.setProperty(this.file.nativeElement, 'multiple', 'multiple');\n    if (this.options.accept) this.renderer.setProperty(this.file.nativeElement, 'accept', this.options.accept.join());\n    if (this.options.capture) this.renderer.setProperty(this.file.nativeElement, 'capture', this.options.capture);\n  }\n}\n","import {\n  ComponentFactoryResolver, ComponentRef, Directive, Injector, Input, OnInit, TemplateRef, ViewContainerRef\n} from '@angular/core';\nimport { InputfileComponent } from '../components/inputfile.component';\nimport { InputFileOptions, ngxInputFileOptions } from '../utils/configuration.model';\n\n\n@Directive({\n  selector: '[ngxInputFile]'\n})\nexport class NgxInputFileDirective implements OnInit {\n\n  @Input()\n  ngxInputFile: InputFileOptions;\n\n  constructor(private resolver: ComponentFactoryResolver, private injector: Injector,\n              private vcRef: ViewContainerRef, private templateRef: TemplateRef<any>) {\n  }\n\n  ngOnInit() {\n    const _contentViewRef = this.templateRef.createEmbeddedView(null);\n    const factory = this.resolver.resolveComponentFactory(InputfileComponent);\n    const component: ComponentRef<InputfileComponent> = this.vcRef.createComponent(factory, 0, this.injector, [_contentViewRef.rootNodes]);\n    component.instance.options = (this.ngxInputFile) ? this.ngxInputFile : ngxInputFileOptions;\n    _contentViewRef.detectChanges();\n  }\n}\n","import { InjectionToken, isDevMode, ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { NgxDragAndDropDirective } from './directives/dropzone.directive';\nimport { NgxThumbnailDirective } from './directives/thumbnail.directive';\nimport { NgxInputFileDirective } from './directives/inputfile.directive';\nimport {\n  DropTargetOptions,\n  LoggerOptions, NGX_DROP_TARGET_OPTIONS,\n  NGX_LOGGER_OPTIONS,\n  ngxDropTargetOptions,\n  ngxloggerOptions\n} from './utils/configuration.model';\nimport { ConsoleLogger, NgxUploadLogger, NoOpLogger } from './utils/logger.model';\nimport { InputfileComponent } from './components/inputfile.component';\nimport { HttpClientModule } from '@angular/common/http';\n\nconst ngxDeclarations = [\n  NgxDragAndDropDirective, NgxThumbnailDirective, InputfileComponent, NgxInputFileDirective\n];\n\n/**\n * Factory associated with internal logger\n * @param options\n * @returns {any}\n * @private\n */\nexport function _loggerFactory(options: LoggerOptions): NgxUploadLogger {\n  const enabled = options.enabled ? options.enabled : isDevMode();\n  if (enabled) {\n    const _console: Console = typeof console === 'object' ? console : <any>{};\n    const debug = options.debug ? options.debug : true;\n    return new ConsoleLogger(_console, debug);\n  }\n  return new NoOpLogger();\n}\n\nexport const NGX_UPLOAD_ROOT_GUARD = new InjectionToken<void>('Internal forRoot Guard');\n\nexport function createNgxUploadRootGuard(options: LoggerOptions) {\n  if (options) {\n    throw new TypeError('NgxUploadModule.forRoot() is called twice.')\n  }\n  return 'guarded';\n}\n\n@NgModule({\n  declarations: [\n    ...ngxDeclarations\n  ],\n  exports: [\n    ...ngxDeclarations\n  ],\n  imports: [ HttpClientModule ],\n  entryComponents: [InputfileComponent]\n})\n\nexport class NgxUploadModule {\n\n  static forRoot(dropTargetOptions?: DropTargetOptions,\n                 loggerOptions?: LoggerOptions): ModuleWithProviders {\n\n    return {\n      ngModule: NgxUploadModule,\n      providers: [\n        { provide: NGX_LOGGER_OPTIONS, useValue: (loggerOptions) ? loggerOptions : ngxloggerOptions },\n        {\n          provide: NGX_DROP_TARGET_OPTIONS,\n          useValue: (dropTargetOptions) ? dropTargetOptions : ngxDropTargetOptions\n        },\n        {\n          provide: NgxUploadLogger,\n          useFactory: _loggerFactory,\n          deps: [NGX_LOGGER_OPTIONS]\n        },\n        {\n          provide: NGX_UPLOAD_ROOT_GUARD,\n          useFactory: createNgxUploadRootGuard,\n          deps: [[NGX_LOGGER_OPTIONS, new Optional(), new SkipSelf()]]\n        }\n      ]\n    }\n  };\n}\n\n"],"names":["tslib_1.__values","tslib_1.__decorate","tslib_1.__param"],"mappings":"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"}