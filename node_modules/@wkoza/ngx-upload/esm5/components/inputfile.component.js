import * as tslib_1 from "tslib";
import { Component, Injector, Optional, Renderer2, ViewChild } from '@angular/core';
import { FormGroupDirective, NgForm } from '@angular/forms';
import { HttpClientUploadService } from '../services/httpClientUpload.service';
var InputfileComponent = /** @class */ (function () {
    function InputfileComponent(injector, uploader, renderer, ngForm, formGroupDirective) {
        this.injector = injector;
        this.uploader = uploader;
        this.renderer = renderer;
        this.ngForm = ngForm;
        this.formGroupDirective = formGroupDirective;
        this.files = new Set();
        if (this.ngForm) {
            this.formGroup = ngForm.form;
        }
        else if (this.formGroupDirective) {
            this.formGroup = formGroupDirective.form;
        }
        else {
            this.formGroup = null;
        }
    }
    InputfileComponent.prototype.onFilesAdded = function () {
        this.uploader.addToQueue(this.file.nativeElement.files, this.formGroup, this.options);
        // Clear the previous input value
        this.file.nativeElement.value = '';
    };
    InputfileComponent.prototype.ngAfterViewInit = function () {
        if (this.options.multiple !== false)
            this.renderer.setProperty(this.file.nativeElement, 'multiple', 'multiple');
        if (this.options.accept)
            this.renderer.setProperty(this.file.nativeElement, 'accept', this.options.accept.join());
        if (this.options.capture)
            this.renderer.setProperty(this.file.nativeElement, 'capture', this.options.capture);
    };
    tslib_1.__decorate([
        ViewChild('file', { static: true }),
        tslib_1.__metadata("design:type", Object)
    ], InputfileComponent.prototype, "file", void 0);
    InputfileComponent = tslib_1.__decorate([
        Component({
            selector: 'ngx-upload-inputfile',
            template: "\n      <label class=\"input-file\">\n          <input type=\"file\" #file (change)=\"onFilesAdded()\">\n          <ng-content></ng-content>\n      </label>",
            styles: ['input[type="file"] { display: none; } .input-file { width: 100%; }']
        }),
        tslib_1.__param(3, Optional()), tslib_1.__param(4, Optional()),
        tslib_1.__metadata("design:paramtypes", [Injector, HttpClientUploadService, Renderer2,
            NgForm, FormGroupDirective])
    ], InputfileComponent);
    return InputfileComponent;
}());
export { InputfileComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRmaWxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B3a296YS9uZ3gtdXBsb2FkLyIsInNvdXJjZXMiOlsiY29tcG9uZW50cy9pbnB1dGZpbGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkcsT0FBTyxFQUFhLGtCQUFrQixFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3ZFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBWS9FO0lBV0UsNEJBQW9CLFFBQWtCLEVBQVUsUUFBaUMsRUFBVSxRQUFtQixFQUM5RSxNQUFjLEVBQXNCLGtCQUFzQztRQUR0RixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBeUI7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQzlFLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBc0IsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQVIxRyxVQUFLLEdBQWMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQVMzQixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDOUI7YUFBTSxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUNsQyxJQUFJLENBQUMsU0FBUyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQztTQUMxQzthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDdkI7SUFDSCxDQUFDO0lBRUQseUNBQVksR0FBWjtRQUNFLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0RixpQ0FBaUM7UUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRUQsNENBQWUsR0FBZjtRQUNFLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEtBQUssS0FBSztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNoSCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTTtZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2xILElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEgsQ0FBQztJQTlCa0M7UUFBbEMsU0FBUyxDQUFDLE1BQU0sRUFBRSxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUMsQ0FBQzs7b0RBQU07SUFGN0Isa0JBQWtCO1FBVDlCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxzQkFBc0I7WUFDaEMsUUFBUSxFQUFFLDhKQUlHO3FCQUNKLG9FQUFvRTtTQUM5RSxDQUFDO1FBYWEsbUJBQUEsUUFBUSxFQUFFLENBQUEsRUFBMEIsbUJBQUEsUUFBUSxFQUFFLENBQUE7aURBRDdCLFFBQVEsRUFBb0IsdUJBQXVCLEVBQW9CLFNBQVM7WUFDdEUsTUFBTSxFQUEwQyxrQkFBa0I7T0FaL0Ysa0JBQWtCLENBaUM5QjtJQUFELHlCQUFDO0NBQUEsQUFqQ0QsSUFpQ0M7U0FqQ1ksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBJbmplY3RvciwgT3B0aW9uYWwsIFJlbmRlcmVyMiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1Hcm91cERpcmVjdGl2ZSwgTmdGb3JtIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBJbnB1dEZpbGVPcHRpb25zIH0gZnJvbSAnLi4vdXRpbHMvY29uZmlndXJhdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50VXBsb2FkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2h0dHBDbGllbnRVcGxvYWQuc2VydmljZSc7XG5cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LXVwbG9hZC1pbnB1dGZpbGUnLFxuICB0ZW1wbGF0ZTogYFxuICAgICAgPGxhYmVsIGNsYXNzPVwiaW5wdXQtZmlsZVwiPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZmlsZVwiICNmaWxlIChjaGFuZ2UpPVwib25GaWxlc0FkZGVkKClcIj5cbiAgICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgICA8L2xhYmVsPmAsXG4gIHN0eWxlczogWydpbnB1dFt0eXBlPVwiZmlsZVwiXSB7IGRpc3BsYXk6IG5vbmU7IH0gLmlucHV0LWZpbGUgeyB3aWR0aDogMTAwJTsgfSddXG59KVxuZXhwb3J0IGNsYXNzIElucHV0ZmlsZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG4gIEBWaWV3Q2hpbGQoJ2ZpbGUnLCB7c3RhdGljOiB0cnVlfSkgZmlsZTtcblxuICBmaWxlczogU2V0PEZpbGU+ID0gbmV3IFNldCgpO1xuXG4gIG9wdGlvbnM6IElucHV0RmlsZU9wdGlvbnM7XG5cbiAgcHJpdmF0ZSBmb3JtR3JvdXA6IEZvcm1Hcm91cCB8IG51bGw7XG5cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSB1cGxvYWRlcjogSHR0cENsaWVudFVwbG9hZFNlcnZpY2UsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICAgICAgICAgICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBuZ0Zvcm06IE5nRm9ybSwgQE9wdGlvbmFsKCkgcHJpdmF0ZSBmb3JtR3JvdXBEaXJlY3RpdmU6IEZvcm1Hcm91cERpcmVjdGl2ZSkge1xuICAgIGlmICh0aGlzLm5nRm9ybSkge1xuICAgICAgdGhpcy5mb3JtR3JvdXAgPSBuZ0Zvcm0uZm9ybTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZm9ybUdyb3VwRGlyZWN0aXZlKSB7XG4gICAgICB0aGlzLmZvcm1Hcm91cCA9IGZvcm1Hcm91cERpcmVjdGl2ZS5mb3JtO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZvcm1Hcm91cCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgb25GaWxlc0FkZGVkKCkge1xuICAgIHRoaXMudXBsb2FkZXIuYWRkVG9RdWV1ZSh0aGlzLmZpbGUubmF0aXZlRWxlbWVudC5maWxlcywgdGhpcy5mb3JtR3JvdXAsIHRoaXMub3B0aW9ucyk7XG4gICAgLy8gQ2xlYXIgdGhlIHByZXZpb3VzIGlucHV0IHZhbHVlXG4gICAgdGhpcy5maWxlLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSAnJztcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLm11bHRpcGxlICE9PSBmYWxzZSkgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLmZpbGUubmF0aXZlRWxlbWVudCwgJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5hY2NlcHQpIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5maWxlLm5hdGl2ZUVsZW1lbnQsICdhY2NlcHQnLCB0aGlzLm9wdGlvbnMuYWNjZXB0LmpvaW4oKSk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jYXB0dXJlKSB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuZmlsZS5uYXRpdmVFbGVtZW50LCAnY2FwdHVyZScsIHRoaXMub3B0aW9ucy5jYXB0dXJlKTtcbiAgfVxufVxuIl19