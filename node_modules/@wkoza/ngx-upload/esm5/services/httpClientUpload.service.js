import * as tslib_1 from "tslib";
import { Subject } from 'rxjs';
import { HttpClient, HttpErrorResponse, HttpEventType, HttpRequest, HttpResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { FileItem } from './fileItem.model';
import { NgxUploadLogger } from '../utils/logger.model';
import * as i0 from "@angular/core";
import * as i1 from "../utils/logger.model";
import * as i2 from "@angular/common/http";
// send an event for each upload event. These events can be catched by the user for call a callback
var HttpClientUploadService = /** @class */ (function () {
    function HttpClientUploadService(logger, httpClient) {
        this.logger = logger;
        this.httpClient = httpClient;
        this.progressTotal = 0;
        this.onCancel$ = new Subject();
        this.onError$ = new Subject();
        this.onDropError$ = new Subject();
        this.onSuccess$ = new Subject(); // TODO headers isn't `any` but `Array`
        this.onBeforeUploadItem$ = new Subject();
        this.onProgress$ = new Subject();
        this.onAddToQueue$ = new Subject();
        this.queue = new Array();
        this.headers = new Map();
    }
    /**
     * Adds files to the queue
     */
    HttpClientUploadService.prototype.addToQueue = function (files, formGroup, options) {
        this.logger.info('add to queue');
        if (options && !options.multiple) {
            if (files.length > 1) {
                this.logger.error('there is more than one file.');
                this.onDropError$.next({ errorAccept: false, errorMultiple: true });
                return;
            }
        }
        var _loop_1 = function (i) {
            var file = files.item(i);
            this_1.logger.debug(files.item(i));
            if (options && options.accept) {
                var accepted = options.accept.some(function (type) {
                    if (type.indexOf('/*') > -1) {
                        return type.split('/')[0] === file.type.split('/')[0];
                    }
                    else {
                        return (type === '*' || type === file.type);
                    }
                });
                if (!accepted) {
                    this_1.logger.error('this file is not accepted because of its type', file);
                    this_1.onDropError$.next({ item: file, errorAccept: true, errorMultiple: false });
                    return "continue";
                }
            }
            var fileItem;
            if (options && options.disableMultipart) {
                fileItem = new FileItem(file, this_1, this_1.logger, true);
            }
            else {
                fileItem = new FileItem(file, this_1, this_1.logger, false);
                if (formGroup) {
                    Object.keys(formGroup.controls).forEach(function (key) {
                        fileItem.formData.append(key, formGroup.get(key).value);
                    });
                }
            }
            this_1.queue.push(fileItem);
            this_1.onAddToQueue$.next(fileItem);
        };
        var this_1 = this;
        for (var i = 0; i < files.length; i++) {
            _loop_1(i);
        }
    };
    HttpClientUploadService.prototype.uploadFileItem = function (fileItem, endpoint, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this.logger.info('enter uploadService.uploadFileItem()');
        var method = endpoint.method;
        var url = endpoint.url;
        var index = this.queue.indexOf(fileItem);
        var item = this.queue[index];
        this.onBeforeUploadItem(item);
        if (item.isCancel) {
            return;
        }
        item.uploadInProgress = true;
        var sendable;
        if (!fileItem.disableMultipart) {
            sendable = item.formData;
            sendable.append(item.alias, item.file, item.file.name);
        }
        else {
            sendable = item.file;
        }
        var req = new HttpRequest(method, url, sendable, Object.assign(options, { reportProgress: true }));
        fileItem.sub = this.httpClient.request(req).subscribe(function (event) {
            if (event.type === HttpEventType.UploadProgress) {
                // This is an upload progress event. Compute and show the % done:
                var percentDone = Math.round(event.loaded * 100 / (event.total ? event.total : event.loaded));
                _this.logger.debug("File is " + percentDone + "% uploaded.");
                fileItem.ɵonProgress(percentDone);
                _this.onProgressItem(item, percentDone);
            }
            else if (event instanceof HttpResponse) {
                // A successful response is delivered on the event stream.
                fileItem.ɵonSuccess();
                _this.onSuccess(item, event.body, event.status, event.headers);
            }
        }, function (err) {
            if (err instanceof HttpErrorResponse) {
                if (url === 'ngx_upload_mock') {
                    item.ɵonSuccess();
                    _this.onSuccess(item, err.message, err.status, err.headers);
                }
                else if (err.error instanceof Error) {
                    // A client-side or network error occurred. Handle it accordingly.
                    item.ɵonError();
                    _this.onError(item, err.error.message, err.status, err.headers);
                }
                else {
                    // The backend returned an unsuccessful response code.
                    // The response body may contain clues as to what went wrong,
                    item.ɵonError();
                    _this.onError(item, err.error, err.status, err.headers);
                }
            }
        });
    };
    HttpClientUploadService.prototype.cancelFileItem = function (fileItem) {
        this.progressTotal = this.computeTotalProgress();
        this.onCancel$.next(fileItem);
    };
    /**
     * Uploads all not uploaded items of queue
     */
    HttpClientUploadService.prototype.uploadAll = function (endpoint, options) {
        var e_1, _a;
        var items = this.queue.filter(function (item) { return (item.isReady); });
        if (!items.length) {
            return;
        }
        try {
            for (var items_1 = tslib_1.__values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                var item = items_1_1.value;
                item.upload(endpoint, options);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Uploads all not uploaded items of queue
     */
    HttpClientUploadService.prototype.cancelAll = function () {
        var e_2, _a;
        var items = this.queue.filter(function (item) { return (item.uploadInProgress); });
        if (!items.length) {
            return;
        }
        try {
            for (var items_2 = tslib_1.__values(items), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()) {
                var item = items_2_1.value;
                item.cancel();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this.progressTotal = this.computeTotalProgress();
    };
    /**
     * Uploads all not uploaded items of queue
     */
    HttpClientUploadService.prototype.removeAllFromQueue = function () {
        var e_3, _a;
        var items = this.queue.filter(function (item) { return (!item.uploadInProgress && !item.isSuccess); });
        if (!items.length) {
            return;
        }
        try {
            for (var items_3 = tslib_1.__values(items), items_3_1 = items_3.next(); !items_3_1.done; items_3_1 = items_3.next()) {
                var item = items_3_1.value;
                this.removeFromQueue(item);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (items_3_1 && !items_3_1.done && (_a = items_3.return)) _a.call(items_3);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    HttpClientUploadService.prototype.removeFromQueue = function (fileItem) {
        var index = this.queue.indexOf(fileItem);
        var item = this.queue[index];
        if (item.uploadInProgress) {
            item.cancel();
        }
        this.queue.splice(index, 1);
        this.progressTotal = this.computeTotalProgress();
    };
    /**
     * Returns the total progress
     * @param {Number} [value]
     * @returns {Number}
     * @private
     */
    HttpClientUploadService.prototype.computeTotalProgress = function () {
        var e_4, _a;
        var totalCurrent = 0;
        var total = 0;
        try {
            for (var _b = tslib_1.__values(this.queue), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                if (item.uploadInProgress || item.isSuccess) {
                    totalCurrent += (item.file.size / 100) * item.progress || 0;
                    total += item.file.size;
                    this.logger.debug(totalCurrent + ' / ' + total);
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return Math.round((totalCurrent * 100) / total);
    };
    /**
     * Prepares file status before upload
     * @param item
     */
    HttpClientUploadService.prototype.onBeforeUploadItem = function (item) {
        this.logger.info('enter uploadService.ɵonBeforeUploadItem()');
        item.ɵonBeforeUploadItem();
        this.onBeforeUploadItem$.next(item);
    };
    /**
     * Update status during upload progress
     * @param item
     * @param progress
     */
    HttpClientUploadService.prototype.onProgressItem = function (item, progress) {
        this.logger.info("call onProgressItem " + item + " " + progress);
        this.progressTotal = this.computeTotalProgress();
        item.ɵonProgress(progress);
        this.onProgress$.next({ item: item, progress: progress });
    };
    /**
     * Callback called when an upload error occurs
     * @param item
     * @param xhr
     */
    HttpClientUploadService.prototype.onError = function (item, body, status, headers) {
        this.logger.info("call onError " + item + " " + body + " " + status + " " + headers);
        item.ɵonError();
        this.onError$.next({ item: item, body: body, status: status, headers: headers });
    };
    /**
     * Callback called when an upload success occurs
     * @param item
     * @param xhr
     */
    HttpClientUploadService.prototype.onSuccess = function (item, body, status, headers) {
        this.logger.info("call onSuccess " + item + " " + body + " " + status + " " + headers);
        this.progressTotal = this.computeTotalProgress();
        item.ɵonSuccess();
        this.onSuccess$.next({ item: item, body: body, status: status, headers: headers });
    };
    HttpClientUploadService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function HttpClientUploadService_Factory() { return new HttpClientUploadService(i0.ɵɵinject(i1.NgxUploadLogger), i0.ɵɵinject(i2.HttpClient)); }, token: HttpClientUploadService, providedIn: "root" });
    HttpClientUploadService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        }),
        tslib_1.__metadata("design:paramtypes", [NgxUploadLogger, HttpClient])
    ], HttpClientUploadService);
    return HttpClientUploadService;
}());
export { HttpClientUploadService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cENsaWVudFVwbG9hZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHdrb3phL25neC11cGxvYWQvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9odHRwQ2xpZW50VXBsb2FkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFDTCxVQUFVLEVBQ1YsaUJBQWlCLEVBQ2pCLGFBQWEsRUFHYixXQUFXLEVBQ1gsWUFBWSxFQUNiLE1BQU0sc0JBQXNCLENBQUM7QUFDOUIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7O0FBSXhELG1HQUFtRztBQUtuRztJQXFCRSxpQ0FBc0IsTUFBdUIsRUFBVSxVQUFzQjtRQUF2RCxXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUFVLGVBQVUsR0FBVixVQUFVLENBQVk7UUFsQjdFLGtCQUFhLEdBQUcsQ0FBQyxDQUFDO1FBVVgsY0FBUyxHQUFHLElBQUksT0FBTyxFQUFZLENBQUM7UUFDcEMsYUFBUSxHQUFHLElBQUksT0FBTyxFQUErRCxDQUFDO1FBQ3RGLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQWlFLENBQUM7UUFDNUYsZUFBVSxHQUFHLElBQUksT0FBTyxFQUErRCxDQUFDLENBQUMsdUNBQXVDO1FBQ2hJLHdCQUFtQixHQUFHLElBQUksT0FBTyxFQUFZLENBQUM7UUFDOUMsZ0JBQVcsR0FBRyxJQUFJLE9BQU8sRUFBd0MsQ0FBQztRQUNsRSxrQkFBYSxHQUFHLElBQUksT0FBTyxFQUFZLENBQUM7UUFHN0MsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLEtBQUssRUFBWSxDQUFDO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxH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QUFBLEVBQUUsTUFBTSxRQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7O0lBMVFVLHVCQUF1QjtRQUhuQyxVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO2lEQXNCOEIsZUFBZSxFQUFzQixVQUFVO09BckJsRSx1QkFBdUIsQ0E2UW5DO2tDQXBTRDtDQW9TQyxBQTdRRCxJQTZRQztTQTdRWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIEh0dHBDbGllbnQsXG4gIEh0dHBFcnJvclJlc3BvbnNlLFxuICBIdHRwRXZlbnRUeXBlLFxuICBIdHRwSGVhZGVycyxcbiAgSHR0cFBhcmFtcyxcbiAgSHR0cFJlcXVlc3QsXG4gIEh0dHBSZXNwb25zZVxufSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEZpbGVJdGVtIH0gZnJvbSAnLi9maWxlSXRlbS5tb2RlbCc7XG5pbXBvcnQgeyBOZ3hVcGxvYWRMb2dnZXIgfSBmcm9tICcuLi91dGlscy9sb2dnZXIubW9kZWwnO1xuaW1wb3J0IHsgRHJvcFRhcmdldE9wdGlvbnMsIElucHV0RmlsZU9wdGlvbnMsIFVwbG9hZEVuZFBvaW50IH0gZnJvbSAnLi4vdXRpbHMvY29uZmlndXJhdGlvbi5tb2RlbCc7XG5cblxuLy8gc2VuZCBhbiBldmVudCBmb3IgZWFjaCB1cGxvYWQgZXZlbnQuIFRoZXNlIGV2ZW50cyBjYW4gYmUgY2F0Y2hlZCBieSB0aGUgdXNlciBmb3IgY2FsbCBhIGNhbGxiYWNrXG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEh0dHBDbGllbnRVcGxvYWRTZXJ2aWNlIHtcblxuICBxdWV1ZTogRmlsZUl0ZW1bXTtcbiAgcHJvZ3Jlc3NUb3RhbCA9IDA7XG4gIHdpdGhDcmVkZW50aWFsczogYm9vbGVhbjtcblxuICBzdWI6IFN1YnNjcmlwdGlvbjtcblxuICAvKipcbiAgICogSW50ZXJuYWwgbWFwIG9mIGxvd2VyY2FzZSBoZWFkZXIgbmFtZXMgdG8gdmFsdWVzLlxuICAgKi9cbiAgcHJvdGVjdGVkIGhlYWRlcnM6IE1hcDxzdHJpbmcsIHN0cmluZ1tdPjtcblxuICBwdWJsaWMgb25DYW5jZWwkID0gbmV3IFN1YmplY3Q8RmlsZUl0ZW0+KCk7XG4gIHB1YmxpYyBvbkVycm9yJCA9IG5ldyBTdWJqZWN0PHsgaXRlbTogRmlsZUl0ZW0sIGJvZHk6IGFueSwgc3RhdHVzOiBudW1iZXIsIGhlYWRlcnM6IGFueSB9PigpO1xuICBwdWJsaWMgb25Ecm9wRXJyb3IkID0gbmV3IFN1YmplY3Q8eyBpdGVtPzogRmlsZSwgZXJyb3JBY2NlcHQ6IGJvb2xlYW4sIGVycm9yTXVsdGlwbGU6IGJvb2xlYW4gfT4oKTtcbiAgcHVibGljIG9uU3VjY2VzcyQgPSBuZXcgU3ViamVjdDx7IGl0ZW06IEZpbGVJdGVtLCBib2R5OiBhbnksIHN0YXR1czogbnVtYmVyLCBoZWFkZXJzOiBhbnkgfT4oKTsgLy8gVE9ETyBoZWFkZXJzIGlzbid0IGBhbnlgIGJ1dCBgQXJyYXlgXG4gIHB1YmxpYyBvbkJlZm9yZVVwbG9hZEl0ZW0kID0gbmV3IFN1YmplY3Q8RmlsZUl0ZW0+KCk7XG4gIHB1YmxpYyBvblByb2dyZXNzJCA9IG5ldyBTdWJqZWN0PHsgaXRlbTogRmlsZUl0ZW0sIHByb2dyZXNzOiBudW1iZXIgfT4oKTtcbiAgcHVibGljIG9uQWRkVG9RdWV1ZSQgPSBuZXcgU3ViamVjdDxGaWxlSXRlbT4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgbG9nZ2VyOiBOZ3hVcGxvYWRMb2dnZXIsIHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkge1xuICAgIHRoaXMucXVldWUgPSBuZXcgQXJyYXk8RmlsZUl0ZW0+KCk7XG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZmlsZXMgdG8gdGhlIHF1ZXVlXG4gICAqL1xuICBhZGRUb1F1ZXVlKGZpbGVzOiBGaWxlTGlzdCwgZm9ybUdyb3VwOiBGb3JtR3JvdXAgfCBudWxsLCBvcHRpb25zOiBEcm9wVGFyZ2V0T3B0aW9ucyB8IElucHV0RmlsZU9wdGlvbnMpIHtcblxuICAgIHRoaXMubG9nZ2VyLmluZm8oJ2FkZCB0byBxdWV1ZScpO1xuXG4gICAgaWYgKG9wdGlvbnMgJiYgIW9wdGlvbnMubXVsdGlwbGUpIHtcbiAgICAgIGlmIChmaWxlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCd0aGVyZSBpcyBtb3JlIHRoYW4gb25lIGZpbGUuJyk7XG4gICAgICAgIHRoaXMub25Ecm9wRXJyb3IkLm5leHQoe2Vycm9yQWNjZXB0OiBmYWxzZSwgZXJyb3JNdWx0aXBsZTogdHJ1ZX0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZmlsZSA9IGZpbGVzLml0ZW0oaSkhO1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoZmlsZXMuaXRlbShpKSk7XG5cbiAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWNjZXB0KSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkID0gb3B0aW9ucy5hY2NlcHQuc29tZSgodHlwZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgaWYgKHR5cGUuaW5kZXhPZignLyonKSA+IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZS5zcGxpdCgnLycpWzBdID09PSBmaWxlLnR5cGUuc3BsaXQoJy8nKVswXVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKHR5cGUgPT09ICcqJyB8fCB0eXBlID09PSBmaWxlLnR5cGUpXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFhY2NlcHRlZCkge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCd0aGlzIGZpbGUgaXMgbm90IGFjY2VwdGVkIGJlY2F1c2Ugb2YgaXRzIHR5cGUnLCBmaWxlKTtcbiAgICAgICAgICB0aGlzLm9uRHJvcEVycm9yJC5uZXh0KHtpdGVtOiBmaWxlLCBlcnJvckFjY2VwdDogdHJ1ZSwgZXJyb3JNdWx0aXBsZTogZmFsc2V9KTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxldCBmaWxlSXRlbTtcbiAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZGlzYWJsZU11bHRpcGFydCkge1xuICAgICAgICBmaWxlSXRlbSA9IG5ldyBGaWxlSXRlbShmaWxlLCB0aGlzLCB0aGlzLmxvZ2dlciwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaWxlSXRlbSA9IG5ldyBGaWxlSXRlbShmaWxlLCB0aGlzLCB0aGlzLmxvZ2dlciwgZmFsc2UpO1xuICAgICAgICBpZiAoZm9ybUdyb3VwKSB7XG4gICAgICAgICAgT2JqZWN0LmtleXMoZm9ybUdyb3VwLmNvbnRyb2xzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGZpbGVJdGVtLmZvcm1EYXRhLmFwcGVuZChrZXksIGZvcm1Hcm91cC5nZXQoa2V5KSAhLnZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5xdWV1ZS5wdXNoKGZpbGVJdGVtKTtcbiAgICAgIHRoaXMub25BZGRUb1F1ZXVlJC5uZXh0KGZpbGVJdGVtKTtcbiAgICB9XG4gIH1cblxuICB1cGxvYWRGaWxlSXRlbShmaWxlSXRlbTogRmlsZUl0ZW0sIGVuZHBvaW50OiBVcGxvYWRFbmRQb2ludCwgb3B0aW9uczoge1xuICAgIGhlYWRlcnM/OiBIdHRwSGVhZGVycztcbiAgICByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW47XG4gICAgcGFyYW1zPzogSHR0cFBhcmFtcztcbiAgICByZXNwb25zZVR5cGU/OiAnYXJyYXlidWZmZXInIHwgJ2Jsb2InIHwgJ2pzb24nIHwgJ3RleHQnO1xuICAgIHdpdGhDcmVkZW50aWFscz86IGJvb2xlYW47XG4gIH0gPSB7fSk6IHZvaWQge1xuICAgIHRoaXMubG9nZ2VyLmluZm8oJ2VudGVyIHVwbG9hZFNlcnZpY2UudXBsb2FkRmlsZUl0ZW0oKScpO1xuXG4gICAgY29uc3QgbWV0aG9kID0gZW5kcG9pbnQubWV0aG9kIGFzIHN0cmluZztcbiAgICBjb25zdCB1cmwgPSBlbmRwb2ludC51cmwgYXMgc3RyaW5nO1xuXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnF1ZXVlLmluZGV4T2YoZmlsZUl0ZW0pO1xuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLnF1ZXVlW2luZGV4XTtcblxuICAgIHRoaXMub25CZWZvcmVVcGxvYWRJdGVtKGl0ZW0pO1xuXG4gICAgaWYgKGl0ZW0uaXNDYW5jZWwpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGl0ZW0udXBsb2FkSW5Qcm9ncmVzcyA9IHRydWU7XG5cbiAgICBsZXQgc2VuZGFibGU7XG5cbiAgICBpZiAoIWZpbGVJdGVtLmRpc2FibGVNdWx0aXBhcnQpIHtcbiAgICAgIHNlbmRhYmxlID0gaXRlbS5mb3JtRGF0YTtcbiAgICAgIHNlbmRhYmxlLmFwcGVuZChpdGVtLmFsaWFzLCBpdGVtLmZpbGUsIGl0ZW0uZmlsZS5uYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VuZGFibGUgPSBpdGVtLmZpbGU7XG4gICAgfVxuXG4gICAgY29uc3QgcmVxID0gbmV3IEh0dHBSZXF1ZXN0KG1ldGhvZCwgdXJsLCBzZW5kYWJsZSwgT2JqZWN0LmFzc2lnbihvcHRpb25zLCB7cmVwb3J0UHJvZ3Jlc3M6IHRydWV9KSk7XG5cbiAgICBmaWxlSXRlbS5zdWIgPSB0aGlzLmh0dHBDbGllbnQucmVxdWVzdChyZXEpLnN1YnNjcmliZShcbiAgICAgIChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gSHR0cEV2ZW50VHlwZS5VcGxvYWRQcm9ncmVzcykge1xuICAgICAgICAgIC8vIFRoaXMgaXMgYW4gdXBsb2FkIHByb2dyZXNzIGV2ZW50LiBDb21wdXRlIGFuZCBzaG93IHRoZSAlIGRvbmU6XG4gICAgICAgICAgY29uc3QgcGVyY2VudERvbmUgPSBNYXRoLnJvdW5kKGV2ZW50LmxvYWRlZCAqIDEwMCAvIChldmVudC50b3RhbCA/IGV2ZW50LnRvdGFsIDogZXZlbnQubG9hZGVkKSk7XG4gICAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoYEZpbGUgaXMgJHtwZXJjZW50RG9uZX0lIHVwbG9hZGVkLmApO1xuICAgICAgICAgIGZpbGVJdGVtLsm1b25Qcm9ncmVzcyhwZXJjZW50RG9uZSk7XG4gICAgICAgICAgdGhpcy5vblByb2dyZXNzSXRlbShpdGVtLCBwZXJjZW50RG9uZSk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChldmVudCBpbnN0YW5jZW9mIEh0dHBSZXNwb25zZSkge1xuICAgICAgICAgIC8vIEEgc3VjY2Vzc2Z1bCByZXNwb25zZSBpcyBkZWxpdmVyZWQgb24gdGhlIGV2ZW50IHN0cmVhbS5cbiAgICAgICAgICBmaWxlSXRlbS7JtW9uU3VjY2VzcygpO1xuICAgICAgICAgIHRoaXMub25TdWNjZXNzKGl0ZW0sIGV2ZW50LmJvZHksIGV2ZW50LnN0YXR1cywgZXZlbnQuaGVhZGVycyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAoZXJyKSA9PiB7XG4gICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgICAgICAgIGlmICh1cmwgPT09ICduZ3hfdXBsb2FkX21vY2snKSB7XG4gICAgICAgICAgICBpdGVtLsm1b25TdWNjZXNzKCk7XG4gICAgICAgICAgICB0aGlzLm9uU3VjY2VzcyhpdGVtLCBlcnIubWVzc2FnZSwgZXJyLnN0YXR1cywgZXJyLmhlYWRlcnMpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZXJyLmVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEEgY2xpZW50LXNpZGUgb3IgbmV0d29yayBlcnJvciBvY2N1cnJlZC4gSGFuZGxlIGl0IGFjY29yZGluZ2x5LlxuICAgICAgICAgICAgaXRlbS7JtW9uRXJyb3IoKTtcbiAgICAgICAgICAgIHRoaXMub25FcnJvcihpdGVtLCBlcnIuZXJyb3IubWVzc2FnZSwgZXJyLnN0YXR1cywgZXJyLmhlYWRlcnMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGUgYmFja2VuZCByZXR1cm5lZCBhbiB1bnN1Y2Nlc3NmdWwgcmVzcG9uc2UgY29kZS5cbiAgICAgICAgICAgIC8vIFRoZSByZXNwb25zZSBib2R5IG1heSBjb250YWluIGNsdWVzIGFzIHRvIHdoYXQgd2VudCB3cm9uZyxcbiAgICAgICAgICAgIGl0ZW0uybVvbkVycm9yKCk7XG4gICAgICAgICAgICB0aGlzLm9uRXJyb3IoaXRlbSwgZXJyLmVycm9yLCBlcnIuc3RhdHVzLCBlcnIuaGVhZGVycyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGNhbmNlbEZpbGVJdGVtKGZpbGVJdGVtOiBGaWxlSXRlbSkge1xuICAgIHRoaXMucHJvZ3Jlc3NUb3RhbCA9IHRoaXMuY29tcHV0ZVRvdGFsUHJvZ3Jlc3MoKTtcbiAgICB0aGlzLm9uQ2FuY2VsJC5uZXh0KGZpbGVJdGVtKVxuICB9XG5cbiAgLyoqXG4gICAqIFVwbG9hZHMgYWxsIG5vdCB1cGxvYWRlZCBpdGVtcyBvZiBxdWV1ZVxuICAgKi9cbiAgdXBsb2FkQWxsKGVuZHBvaW50OiBVcGxvYWRFbmRQb2ludCwgb3B0aW9ucz86IGFueSkge1xuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5xdWV1ZS5maWx0ZXIoaXRlbSA9PiAoaXRlbS5pc1JlYWR5KSk7XG4gICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgIGl0ZW0udXBsb2FkKGVuZHBvaW50LCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBsb2FkcyBhbGwgbm90IHVwbG9hZGVkIGl0ZW1zIG9mIHF1ZXVlXG4gICAqL1xuICBjYW5jZWxBbGwoKSB7XG4gICAgY29uc3QgaXRlbXM6IEZpbGVJdGVtW10gPSB0aGlzLnF1ZXVlLmZpbHRlcihpdGVtID0+IChpdGVtLnVwbG9hZEluUHJvZ3Jlc3MpKTtcbiAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgaXRlbS5jYW5jZWwoKTtcbiAgICB9XG4gICAgdGhpcy5wcm9ncmVzc1RvdGFsID0gdGhpcy5jb21wdXRlVG90YWxQcm9ncmVzcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwbG9hZHMgYWxsIG5vdCB1cGxvYWRlZCBpdGVtcyBvZiBxdWV1ZVxuICAgKi9cbiAgcmVtb3ZlQWxsRnJvbVF1ZXVlKCkge1xuICAgIGNvbnN0IGl0ZW1zOiBGaWxlSXRlbVtdID0gdGhpcy5xdWV1ZS5maWx0ZXIoaXRlbSA9PiAoIWl0ZW0udXBsb2FkSW5Qcm9ncmVzcyAmJiAhaXRlbS5pc1N1Y2Nlc3MpKTtcbiAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgdGhpcy5yZW1vdmVGcm9tUXVldWUoaXRlbSk7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlRnJvbVF1ZXVlKGZpbGVJdGVtOiBGaWxlSXRlbSkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5xdWV1ZS5pbmRleE9mKGZpbGVJdGVtKTtcbiAgICBjb25zdCBpdGVtID0gdGhpcy5xdWV1ZVtpbmRleF07XG4gICAgaWYgKGl0ZW0udXBsb2FkSW5Qcm9ncmVzcykge1xuICAgICAgaXRlbS5jYW5jZWwoKTtcbiAgICB9XG4gICAgdGhpcy5xdWV1ZS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHRoaXMucHJvZ3Jlc3NUb3RhbCA9IHRoaXMuY29tcHV0ZVRvdGFsUHJvZ3Jlc3MoKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHRvdGFsIHByb2dyZXNzXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbdmFsdWVdXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb21wdXRlVG90YWxQcm9ncmVzcygpOiBudW1iZXIge1xuICAgIGxldCB0b3RhbEN1cnJlbnQgPSAwO1xuICAgIGxldCB0b3RhbCA9IDA7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMucXVldWUpIHtcbiAgICAgIGlmIChpdGVtLnVwbG9hZEluUHJvZ3Jlc3MgfHwgaXRlbS5pc1N1Y2Nlc3MpIHtcbiAgICAgICAgdG90YWxDdXJyZW50ICs9IChpdGVtLmZpbGUuc2l6ZSAvIDEwMCkgKiBpdGVtLnByb2dyZXNzIHx8IDA7XG4gICAgICAgIHRvdGFsICs9IGl0ZW0uZmlsZS5zaXplO1xuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1Zyh0b3RhbEN1cnJlbnQgKyAnIC8gJyArIHRvdGFsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIE1hdGgucm91bmQoKHRvdGFsQ3VycmVudCAqIDEwMCkgLyB0b3RhbCk7XG4gIH1cblxuICAvKipcbiAgICogUHJlcGFyZXMgZmlsZSBzdGF0dXMgYmVmb3JlIHVwbG9hZFxuICAgKiBAcGFyYW0gaXRlbVxuICAgKi9cbiAgcHJvdGVjdGVkIG9uQmVmb3JlVXBsb2FkSXRlbShpdGVtOiBGaWxlSXRlbSkge1xuICAgIHRoaXMubG9nZ2VyLmluZm8oJ2VudGVyIHVwbG9hZFNlcnZpY2UuybVvbkJlZm9yZVVwbG9hZEl0ZW0oKScpO1xuICAgIGl0ZW0uybVvbkJlZm9yZVVwbG9hZEl0ZW0oKTtcbiAgICB0aGlzLm9uQmVmb3JlVXBsb2FkSXRlbSQubmV4dChpdGVtKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgc3RhdHVzIGR1cmluZyB1cGxvYWQgcHJvZ3Jlc3NcbiAgICogQHBhcmFtIGl0ZW1cbiAgICogQHBhcmFtIHByb2dyZXNzXG4gICAqL1xuICBwcm90ZWN0ZWQgb25Qcm9ncmVzc0l0ZW0oaXRlbTogRmlsZUl0ZW0sIHByb2dyZXNzOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmxvZ2dlci5pbmZvKGBjYWxsIG9uUHJvZ3Jlc3NJdGVtICR7aXRlbX0gJHtwcm9ncmVzc31gKTtcbiAgICB0aGlzLnByb2dyZXNzVG90YWwgPSB0aGlzLmNvbXB1dGVUb3RhbFByb2dyZXNzKCk7XG4gICAgaXRlbS7JtW9uUHJvZ3Jlc3MocHJvZ3Jlc3MpO1xuICAgIHRoaXMub25Qcm9ncmVzcyQubmV4dCh7aXRlbSwgcHJvZ3Jlc3N9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiBhbiB1cGxvYWQgZXJyb3Igb2NjdXJzXG4gICAqIEBwYXJhbSBpdGVtXG4gICAqIEBwYXJhbSB4aHJcbiAgICovXG4gIHByb3RlY3RlZCBvbkVycm9yKGl0ZW06IEZpbGVJdGVtLCBib2R5OiBhbnksIHN0YXR1czogbnVtYmVyLCBoZWFkZXJzOiBhbnkpIHtcbiAgICB0aGlzLmxvZ2dlci5pbmZvKGBjYWxsIG9uRXJyb3IgJHtpdGVtfSAke2JvZHl9ICR7c3RhdHVzfSAke2hlYWRlcnN9YCk7XG4gICAgaXRlbS7JtW9uRXJyb3IoKTtcbiAgICB0aGlzLm9uRXJyb3IkLm5leHQoe2l0ZW0sIGJvZHksIHN0YXR1cywgaGVhZGVyc30pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIGFuIHVwbG9hZCBzdWNjZXNzIG9jY3Vyc1xuICAgKiBAcGFyYW0gaXRlbVxuICAgKiBAcGFyYW0geGhyXG4gICAqL1xuICBwcm90ZWN0ZWQgb25TdWNjZXNzKGl0ZW06IEZpbGVJdGVtLCBib2R5OiBhbnksIHN0YXR1czogbnVtYmVyLCBoZWFkZXJzOiBhbnkpIHsgLy8gVE9ETyBoZWFkZXJzIGlzIG5vdCBhbnlcbiAgICB0aGlzLmxvZ2dlci5pbmZvKGBjYWxsIG9uU3VjY2VzcyAke2l0ZW19ICR7Ym9keX0gJHtzdGF0dXN9ICR7aGVhZGVyc31gKTtcbiAgICB0aGlzLnByb2dyZXNzVG90YWwgPSB0aGlzLmNvbXB1dGVUb3RhbFByb2dyZXNzKCk7XG4gICAgaXRlbS7JtW9uU3VjY2VzcygpO1xuICAgIHRoaXMub25TdWNjZXNzJC5uZXh0KHtpdGVtLCBib2R5LCBzdGF0dXMsIGhlYWRlcnN9KTtcbiAgfVxuXG5cbn1cblxuIl19