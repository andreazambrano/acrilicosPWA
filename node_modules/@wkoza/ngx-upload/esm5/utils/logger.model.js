/**
 * Simple service for logging the module.
 */
var NgxUploadLogger = /** @class */ (function () {
    function NgxUploadLogger() {
    }
    return NgxUploadLogger;
}());
export { NgxUploadLogger };
var noop = function () { return undefined; };
var ɵ0 = noop;
/**
 * Default implementation of Logger that safely writes the message into the console.
 *
 */
var ConsoleLogger = /** @class */ (function () {
    function ConsoleLogger(_console, _debugEnabled) {
        if (_debugEnabled === void 0) { _debugEnabled = true; }
        this._console = _console;
        this._debugEnabled = _debugEnabled;
    }
    ConsoleLogger.prototype.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._invokeConsoleMethod('log', args);
    };
    ConsoleLogger.prototype.info = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._invokeConsoleMethod('info', args);
    };
    ConsoleLogger.prototype.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._invokeConsoleMethod('warn', args);
    };
    ConsoleLogger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._invokeConsoleMethod('error', args);
    };
    ConsoleLogger.prototype.debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this._debugEnabled) {
            this._invokeConsoleMethod('debug', args);
        }
    };
    ConsoleLogger.prototype._invokeConsoleMethod = function (type, args) {
        var logFn = this._console[type] || this._console.log || noop;
        // console methods in IE9 don't have 'apply' method, polyfill it
        if (!logFn.apply) {
            logFn = Function.prototype.bind.call(logFn, this._console);
        }
        logFn.apply(this._console, args);
    };
    return ConsoleLogger;
}());
export { ConsoleLogger };
/**
 * No op implementation of Logger.
 *
 */
var NoOpLogger = /** @class */ (function () {
    function NoOpLogger() {
    }
    NoOpLogger.prototype.log = function () { };
    NoOpLogger.prototype.info = function () { };
    NoOpLogger.prototype.warn = function () { };
    NoOpLogger.prototype.error = function () { };
    NoOpLogger.prototype.debug = function () { };
    return NoOpLogger;
}());
export { NoOpLogger };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHdrb3phL25neC11cGxvYWQvIiwic291cmNlcyI6WyJ1dGlscy9sb2dnZXIubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7O0dBRUc7QUFDSDtJQUFBO0lBZ0JBLENBQUM7SUFBRCxzQkFBQztBQUFELENBQUMsQUFoQkQsSUFnQkM7O0FBRUQsSUFBTSxJQUFJLEdBQUcsY0FBVyxPQUFBLFNBQVMsRUFBVCxDQUFTLENBQUM7O0FBRWxDOzs7R0FHRztBQUNIO0lBQ0ksdUJBQW9CLFFBQWlCLEVBQVUsYUFBb0I7UUFBcEIsOEJBQUEsRUFBQSxvQkFBb0I7UUFBL0MsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFPO0lBQUcsQ0FBQztJQUV2RSwyQkFBRyxHQUFIO1FBQUksY0FBYzthQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7WUFBZCx5QkFBYzs7UUFBVSxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQUMsQ0FBQztJQUVyRSw0QkFBSSxHQUFKO1FBQUssY0FBYzthQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7WUFBZCx5QkFBYzs7UUFBVSxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQUMsQ0FBQztJQUV2RSw0QkFBSSxHQUFKO1FBQUssY0FBYzthQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7WUFBZCx5QkFBYzs7UUFBVSxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQUMsQ0FBQztJQUV2RSw2QkFBSyxHQUFMO1FBQU0sY0FBYzthQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7WUFBZCx5QkFBYzs7UUFBVSxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQUMsQ0FBQztJQUV6RSw2QkFBSyxHQUFMO1FBQU0sY0FBYzthQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7WUFBZCx5QkFBYzs7UUFDaEIsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztTQUFFO0lBQ3pFLENBQUM7SUFFTyw0Q0FBb0IsR0FBNUIsVUFBNkIsSUFBWSxFQUFFLElBQVk7UUFDbkQsSUFBSSxLQUFLLEdBQW1CLElBQUksQ0FBQyxRQUFTLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDO1FBRTlFLGdFQUFnRTtRQUNoRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRTtZQUNkLEtBQUssR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM5RDtRQUVELEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBQ0wsb0JBQUM7QUFBRCxDQUFDLEFBekJELElBeUJDOztBQUVEOzs7R0FHRztBQUNIO0lBQUE7SUFXQSxDQUFDO0lBVkcsd0JBQUcsR0FBSCxjQUFhLENBQUM7SUFFZCx5QkFBSSxHQUFKLGNBQWMsQ0FBQztJQUVmLHlCQUFJLEdBQUosY0FBYyxDQUFDO0lBRWYsMEJBQUssR0FBTCxjQUFlLENBQUM7SUFFaEIsMEJBQUssR0FBTCxjQUFlLENBQUM7SUFFcEIsaUJBQUM7QUFBRCxDQUFDLEFBWEQsSUFXQyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBTaW1wbGUgc2VydmljZSBmb3IgbG9nZ2luZyB0aGUgbW9kdWxlLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTmd4VXBsb2FkTG9nZ2VyIHtcbiAgICAvKiogV3JpdGUgYSBsb2cgbWVzc2FnZS4gKi9cbiAgICBhYnN0cmFjdCBsb2coLi4uYXJnczogYW55W10pOiB2b2lkO1xuXG4gICAgLyoqIFdyaXRlIGFuIGluZm9ybWF0aW9uIG1lc3NhZ2UuICovXG4gICAgYWJzdHJhY3QgaW5mbyguLi5hcmdzOiBhbnlbXSk6IHZvaWQ7XG5cbiAgICAvKiogV3JpdGUgYSB3YXJuaW5nIG1lc3NhZ2UuICovXG4gICAgYWJzdHJhY3Qgd2FybiguLi5hcmdzOiBhbnlbXSk6IHZvaWQ7XG5cbiAgICAvKiogV3JpdGUgYW4gZXJyb3IgbWVzc2FnZS4gKi9cbiAgICBhYnN0cmFjdCBlcnJvciguLi5hcmdzOiBhbnlbXSk6IHZvaWQ7XG5cbiAgICAvKiogV3JpdGUgYSBkZWJ1ZyBtZXNzYWdlLiAqL1xuICAgIGFic3RyYWN0IGRlYnVnKC4uLmFyZ3M6IGFueVtdKTogdm9pZDtcblxufVxuXG5jb25zdCBub29wID0gKCk6IGFueSA9PiB1bmRlZmluZWQ7XG5cbi8qKlxuICogRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBMb2dnZXIgdGhhdCBzYWZlbHkgd3JpdGVzIHRoZSBtZXNzYWdlIGludG8gdGhlIGNvbnNvbGUuXG4gKlxuICovXG5leHBvcnQgY2xhc3MgQ29uc29sZUxvZ2dlciBpbXBsZW1lbnRzIE5neFVwbG9hZExvZ2dlciB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfY29uc29sZTogQ29uc29sZSwgcHJpdmF0ZSBfZGVidWdFbmFibGVkID0gdHJ1ZSkge31cblxuICAgIGxvZyguLi5hcmdzOiBhbnlbXSk6IHZvaWQgeyB0aGlzLl9pbnZva2VDb25zb2xlTWV0aG9kKCdsb2cnLCBhcmdzKTsgfVxuXG4gICAgaW5mbyguLi5hcmdzOiBhbnlbXSk6IHZvaWQgeyB0aGlzLl9pbnZva2VDb25zb2xlTWV0aG9kKCdpbmZvJywgYXJncyk7IH1cblxuICAgIHdhcm4oLi4uYXJnczogYW55W10pOiB2b2lkIHsgdGhpcy5faW52b2tlQ29uc29sZU1ldGhvZCgnd2FybicsIGFyZ3MpOyB9XG5cbiAgICBlcnJvciguLi5hcmdzOiBhbnlbXSk6IHZvaWQgeyB0aGlzLl9pbnZva2VDb25zb2xlTWV0aG9kKCdlcnJvcicsIGFyZ3MpOyB9XG5cbiAgICBkZWJ1ZyguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5fZGVidWdFbmFibGVkKSB7IHRoaXMuX2ludm9rZUNvbnNvbGVNZXRob2QoJ2RlYnVnJywgYXJncyk7IH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9pbnZva2VDb25zb2xlTWV0aG9kKHR5cGU6IHN0cmluZywgYXJncz86IGFueVtdKTogdm9pZCB7XG4gICAgICAgIGxldCBsb2dGbjogRnVuY3Rpb24gPSAoPGFueT50aGlzLl9jb25zb2xlKVt0eXBlXSB8fCB0aGlzLl9jb25zb2xlLmxvZyB8fCBub29wO1xuXG4gICAgICAgIC8vIGNvbnNvbGUgbWV0aG9kcyBpbiBJRTkgZG9uJ3QgaGF2ZSAnYXBwbHknIG1ldGhvZCwgcG9seWZpbGwgaXRcbiAgICAgICAgaWYgKCFsb2dGbi5hcHBseSkge1xuICAgICAgICAgICAgbG9nRm4gPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKGxvZ0ZuLCB0aGlzLl9jb25zb2xlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvZ0ZuLmFwcGx5KHRoaXMuX2NvbnNvbGUsIGFyZ3MpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBObyBvcCBpbXBsZW1lbnRhdGlvbiBvZiBMb2dnZXIuXG4gKlxuICovXG5leHBvcnQgY2xhc3MgTm9PcExvZ2dlciBpbXBsZW1lbnRzIE5neFVwbG9hZExvZ2dlciB7XG4gICAgbG9nKCk6IHZvaWQge31cblxuICAgIGluZm8oKTogdm9pZCB7fVxuXG4gICAgd2FybigpOiB2b2lkIHt9XG5cbiAgICBlcnJvcigpOiB2b2lkIHt9XG5cbiAgICBkZWJ1ZygpOiB2b2lkIHt9XG5cbn1cbiJdfQ==