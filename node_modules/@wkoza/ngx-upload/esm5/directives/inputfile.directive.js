import * as tslib_1 from "tslib";
import { ComponentFactoryResolver, Directive, Injector, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { InputfileComponent } from '../components/inputfile.component';
import { ngxInputFileOptions } from '../utils/configuration.model';
var NgxInputFileDirective = /** @class */ (function () {
    function NgxInputFileDirective(resolver, injector, vcRef, templateRef) {
        this.resolver = resolver;
        this.injector = injector;
        this.vcRef = vcRef;
        this.templateRef = templateRef;
    }
    NgxInputFileDirective.prototype.ngOnInit = function () {
        var _contentViewRef = this.templateRef.createEmbeddedView(null);
        var factory = this.resolver.resolveComponentFactory(InputfileComponent);
        var component = this.vcRef.createComponent(factory, 0, this.injector, [_contentViewRef.rootNodes]);
        component.instance.options = (this.ngxInputFile) ? this.ngxInputFile : ngxInputFileOptions;
        _contentViewRef.detectChanges();
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], NgxInputFileDirective.prototype, "ngxInputFile", void 0);
    NgxInputFileDirective = tslib_1.__decorate([
        Directive({
            selector: '[ngxInputFile]'
        }),
        tslib_1.__metadata("design:paramtypes", [ComponentFactoryResolver, Injector,
            ViewContainerRef, TemplateRef])
    ], NgxInputFileDirective);
    return NgxInputFileDirective;
}());
export { NgxInputFileDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRmaWxlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B3a296YS9uZ3gtdXBsb2FkLyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy9pbnB1dGZpbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsd0JBQXdCLEVBQWdCLFNBQVMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFVLFdBQVcsRUFBRSxnQkFBZ0IsRUFDMUcsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdkUsT0FBTyxFQUFvQixtQkFBbUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBTXJGO0lBS0UsK0JBQW9CLFFBQWtDLEVBQVUsUUFBa0IsRUFDOUQsS0FBdUIsRUFBVSxXQUE2QjtRQUQ5RCxhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDOUQsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7SUFDbEYsQ0FBQztJQUVELHdDQUFRLEdBQVI7UUFDRSxJQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xFLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMxRSxJQUFNLFNBQVMsR0FBcUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDdkksU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDO1FBQzNGLGVBQWUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBWkQ7UUFEQyxLQUFLLEVBQUU7OytEQUN1QjtJQUhwQixxQkFBcUI7UUFIakMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGdCQUFnQjtTQUMzQixDQUFDO2lEQU04Qix3QkFBd0IsRUFBb0IsUUFBUTtZQUN2RCxnQkFBZ0IsRUFBdUIsV0FBVztPQU5sRSxxQkFBcUIsQ0FnQmpDO0lBQUQsNEJBQUM7Q0FBQSxBQWhCRCxJQWdCQztTQWhCWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIENvbXBvbmVudFJlZiwgRGlyZWN0aXZlLCBJbmplY3RvciwgSW5wdXQsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJbnB1dGZpbGVDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL2lucHV0ZmlsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgSW5wdXRGaWxlT3B0aW9ucywgbmd4SW5wdXRGaWxlT3B0aW9ucyB9IGZyb20gJy4uL3V0aWxzL2NvbmZpZ3VyYXRpb24ubW9kZWwnO1xuXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ3hJbnB1dEZpbGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hJbnB1dEZpbGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpXG4gIG5neElucHV0RmlsZTogSW5wdXRGaWxlT3B0aW9ucztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgICAgICAgICAgICBwcml2YXRlIHZjUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCBfY29udGVudFZpZXdSZWYgPSB0aGlzLnRlbXBsYXRlUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyhudWxsKTtcbiAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShJbnB1dGZpbGVDb21wb25lbnQpO1xuICAgIGNvbnN0IGNvbXBvbmVudDogQ29tcG9uZW50UmVmPElucHV0ZmlsZUNvbXBvbmVudD4gPSB0aGlzLnZjUmVmLmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5LCAwLCB0aGlzLmluamVjdG9yLCBbX2NvbnRlbnRWaWV3UmVmLnJvb3ROb2Rlc10pO1xuICAgIGNvbXBvbmVudC5pbnN0YW5jZS5vcHRpb25zID0gKHRoaXMubmd4SW5wdXRGaWxlKSA/IHRoaXMubmd4SW5wdXRGaWxlIDogbmd4SW5wdXRGaWxlT3B0aW9ucztcbiAgICBfY29udGVudFZpZXdSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG59XG4iXX0=