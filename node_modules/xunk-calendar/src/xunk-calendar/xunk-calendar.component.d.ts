import { OnInit, EventEmitter } from '@angular/core';
export interface XunkDate {
    date: number;
    month: any;
    year: any;
}
export declare class XunkCalendarComponent implements OnInit {
    /** Today */
    today: XunkDate;
    /** The page open with [xx, month, year] */
    openPage: XunkDate;
    /** Currently selected date */
    selectedDate: XunkDate;
    /** Array with all the calendar data */
    calendar: any[][];
    /** Color for heat map */
    heatMapColor: string;
    /** Color for primary */
    primaryColor: string;
    /** Color for primary foreground */
    primaryForeground: string;
    /** Heatmap data */
    heatmap: {};
    /** Set this to false to hide month changing header */
    showHeader: boolean;
    /** Emits the new date on change */
    change: EventEmitter<XunkDate>;
    /** Emits the new month with date as 1 on change */
    monthChange: EventEmitter<XunkDate>;
    private RGB_HM;
    private RGB_Primary;
    private RGB_Primary_FG;
    /** Constants */
    readonly monthNames: string[];
    readonly dayNames: string[];
    static parseColor(input: any): {
        R: string;
        G: string;
        B: string;
    };
    static getToday(): XunkDate;
    /** Pad number with zeros */
    static zeropad(num: any, padlen: any, padchar?: string): string;
    /** CalendarComponent */
    constructor();
    ngOnInit(): void;
    /**
     * Returns true if two dates are the same
     * with the date taken separately
     */
    protected sameDate(date: number, a: XunkDate, b: XunkDate): boolean;
    /** Returns true if fab! */
    protected isFab(col: number): string;
    /** Returns 'primary' if col is today */
    isToday(col: number): string;
    /** Select a day in the open page */
    selectDay(col: number): void;
    /** Change the month +1 or -1 */
    changeMonth(diff: number): void;
    /** Compute the calendar */
    displayCalendar(): void;
    /** Gets the DaysPerMonth array */
    protected getDaysOfMonth(month: number, year: number): number;
    /** Returns true if leap year */
    protected leapYear(year: number): boolean;
    /** Gets the heat map color */
    getHM(day: number): string;
    getForeground(day: number): string;
}
